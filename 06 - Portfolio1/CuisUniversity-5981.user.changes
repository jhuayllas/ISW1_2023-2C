

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 October 2023 17:24:11) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:58'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'CJF 10/2/2023 17:42:40' prior: 50653801!
asRot13
	"| asRotAcc |
	asRotAcc := OrderedCollection new.
	self do: [ :aCharacter | asRotAcc addLast: aCharacter asRot13 ].
	^asRotAcc "
	"^self inject: '' into: [ :asRotAcc :aCharacter | 
		asRotAcc . (aCharacter asRot13).
		self. ]."
	^self collect: [ :aChar | aChar asRot13 ].
	"self size = 1 ifTrue: [^String with: self first asRot13 ].
	self size = 2 ifTrue: [^String with: self first asRot13 with: self last asRot13 ]."! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:43:01'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'CJF 10/2/2023 17:53:22'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

----SNAPSHOT----(2 October 2023 17:54:17) CuisUniversity-5981.image priorSource: 10309400!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:54:42'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:57:00'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:57:47'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:58:08' prior: 50654145!
factorize
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:39'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:59:18' prior: 50654150!
factorize
	|resBag|
	resBag := Bag new.! !

----End fileIn of C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\Packages\TerseGuide.pck.st----!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:01:11' prior: 50654195!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag addLast: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:13'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:07'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:02:50' prior: 50657120!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag add: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:06:04' prior: 50657146!
factorize
	|resBag|
	resBag := Bag new.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657214!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:09:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:16'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:11:59'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:13:52' prior: 50657220!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:21:34' prior: 50657291!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657301!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:24:45' prior: 50657311!
factorize
	|resBag value numero |
	resBag := Bag new.
	value := 2.
	numero = self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(value to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:24:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:04'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:25:44' prior: 50657320!
factorize
	|resBag |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:54'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:26:58' prior: 50657353!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:07' prior: 50657367!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:28' prior: 50657377!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:58' prior: 50657387!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:28:16' prior: 50657397!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:29:25' prior: 50657480!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: 8 factorize equals: (Bag with: 2 with: 2 with: 2)
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:27'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:38:43' prior: 50657408!
factorize
	|resBag numero |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
	"	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	start := 2."
	[(numero = 1) not ] whileTrue: [ |aDivisor|
			aDivisor := (2 to: numero ) detect: [ :aDiv | numero isDivisibleBy: aDiv. ] ifNone:[ ^resBag .].
			resBag add: aDivisor.
			numero := numero / aDivisor.
		].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!

TDDBabyStepsGameAnagrams start.!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'CJF 10/2/2023 18:59:49'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:00:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:00:57'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:05'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:18' prior: 50657623!
anagrams
	^Set with: ''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:24'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:38'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:02:04' prior: 50657627!
anagrams
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:43'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:03:28' prior: 50657680!
anagrams
	(self size = 3) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:03:29'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:04:24' prior: 50657744!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:28'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:05:10'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:15:05' prior: 50657755!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet|
		resSet := Set new.
			resSet add: (self )
		].
	^Set with: self! !

a := 'hola'.
a first asString!

a := 'hola'.
a first asString!

a := 'hola'.
a first!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:23:15' prior: 50657844!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3).
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( self at: 2 asString ) , resto.
		resSet add: ( self at: 2 asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:23:17'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:25:47' prior: 50657855!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:55'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:44:51' prior: 50657900!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
"	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		resSet := Set new.
		
		primShuf collect:[ :anAnnagrama |  ].
		
		
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

----QUIT----(2 October 2023 20:23:38) CuisUniversity-5981.image priorSource: 10319435!

----STARTUP---- (3 October 2023 10:46:31) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:50:42' prior: 50658060!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:44'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:48'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:52:09' prior: 50658163!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:15'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:58:19' prior: 50658221!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/3/2023 10:58:35'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 10:58:35'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:09:08' prior: 50658279!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:09:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:51'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:10:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:11:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:11'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:11:20'!
mergeSubAnnagramsWithOut: aChar 
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:16:26' prior: 50658583!
mergeSubAnnagramsWithOut: aChar 
	|copia subAnnagrams |
	copia := self copyWithout: aChar.
	subAnnagrams := copia anagrams.
	
	^subAnnagrams collect: [ :anAnagram | (aChar asString ) , anAnagram ].! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:46'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:58'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:18:23'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:19:57' prior: 50658391!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		self halt.
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:27'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:33'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:02' prior: 50658685!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:11' prior: 50658764!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].

	^Set with: self! !

----QUIT----(3 October 2023 11:21:22) CuisUniversity-5981.image priorSource: 10447267!

----STARTUP---- (5 October 2023 17:20:24) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

----SNAPSHOT----(5 October 2023 17:21:33) CuisUniversity-5981.image priorSource: 10469659!

TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #TDDCalenadrioTest category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:42:08'!
TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:51:04'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!TDDCalenadrioTest methodsFor: 'no messages' stamp: 'CJF 10/5/2023 17:50:54'!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	self assert: ((Calendario new) isHoliday: GregorianDay monday) not! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:51:07'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:51:28'!
isHoliday: aRenameMe1 
	self shouldBeImplemented.! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:52:11' prior: 50658873!
isHoliday: aWeekday
	^false 
	! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:54:01'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)! !

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:59:06'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)! !

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!methodRemoval: TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 18:05:42'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)!

!methodRemoval: TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 18:05:44'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:14:52' prior: 50658863!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	| holidayCalendar aNonHoliday |
	
	holidayCalendar := Calendario new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday )! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:15:50'!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:17:46' prior: 50658963!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:47'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:18:41' prior: 50658878!
isHoliday: aWeekday
	^ aWeekday = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:42'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:51'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:20:14' prior: 50658991!
isHoliday: aWeekday
	^ aWeekday day = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:36:42'!
test03
	| holidayCalendar aMonday aSaturday |
	
	holidayCalendar := Calendario new.
	holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday ).! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:37:02'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:37:12'!
markWeekdayAsHoliday: Saturday 
	self shouldBeImplemented.! !

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 18:49:46'!
Object subclass: #Calendario
	instanceVariableNames: 'aListOfHolidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:49:45' prior: 50659031!
markWeekdayAsHoliday: aDay
	aListOfHolidays add: aDay.! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:49:52'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:50:51' overrides: 16920235!
initialize
	aListOfHolidays := OrderedCollection new.! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:51:30' prior: 50659001!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday .
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:31'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:32'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:33'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:51:37'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:52:39'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:53:56'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:54:18' prior: 50659068!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday day
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:54:20'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:56:46' prior: 50658980!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:47'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 20:09:46'!
test04
	| holidayCalendar "aMonday aSaturday "|
	
	holidayCalendar := Calendario new.
	"holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday )."
	"self deny: holidayCalendar aDayWithMonthIsHoliday: "! !

1@2 x!

1@2 x!

1@2!

a := 1@2.
a x!

a := 1@2.
a x.!

a y.!

----QUIT----(5 October 2023 21:54:48) CuisUniversity-5981.image priorSource: 10470106!

----STARTUP---- (8 October 2023 20:46:17) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/8/2023 20:47:27'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/8/2023 20:47:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/8/2023 20:48:00'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----STARTUP---- (9 October 2023 12:38:28) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'CJF 10/9/2023 12:39:25'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:14' prior: 50659224!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: valorA.
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:16'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:38' prior: 50659228!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:01' prior: 50659240!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:18' prior: 50659255!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:51:33' prior: 50659267!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:52:32' prior: 50659279!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:26' prior: 50659290!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:45' prior: 50659302!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:57' prior: 50659314!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:54:13' prior: 50659326!
test01
	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53'!
calcularInclude

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53' prior: 50659337!
test01
	self calcularInclude.
	! !

!classDefinition: #Obligation category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 15:18:45'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!Obligation methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45'!
sendTask

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45' prior: 50659345!
calcularInclude
	(Obligation new) sendTask! !

!classRemoval: #Obligation stamp: 'CJF 10/9/2023 19:42:44'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 19:42:44'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----End fileIn of C:\Users\crist\Downloads\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:44:44' prior: 50659602!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:44:47'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:10'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:55' prior: 50659692!
impactBalance: aReceptiveAccount 
	aReceptiveAccount incrementBalance: value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:45:59'!
ERROR!
!ReceptiveAccount methodsFor: 'balance - private' stamp: 'CJF 10/9/2023 20:46:12'!
incrementBalance: aValue 
	self shouldBeImplemented.! !

!methodRemoval: ReceptiveAccount #incrementBalance: stamp: 'CJF 10/9/2023 20:47:03'!
incrementBalance: aValue 
	self shouldBeImplemented.!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:22' prior: 50659697!
impactBalance: aReceptiveAccount 
	^value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:45'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:53' prior: 50659727!
impactBalance: aReceptiveAccount 
	^value * -1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:59:45' prior: 50659683!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:02' prior: 50659771!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:15' prior: 50659807!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value negated)]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:32' prior: 50659847!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1]
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:37' prior: 50659887!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:46' prior: 50659897!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		self.
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:56' prior: 50659937!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:06:51' prior: 50659977!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:09:55' prior: 50659715!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: self! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:09:58'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:04'!
transactionIsDeposit: aDeposit 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:09' prior: 50660090!
transactionIsDeposit: aDeposit 
	aDeposit value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:10:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:11:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:12:17'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:14:17' prior: 50660081!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:07' prior: 50659732!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsWithdraw: value ! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:10'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:15'!
transactionIsWithdraw: aValue 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:31' prior: 50660126!
transactionIsWithdraw: aValue 
	^aValue *-1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:21:17' prior: 50660048!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:22:29' prior: 50660111!
impactBalance: calculatedBalance
	^calculatedBalance + value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:23:14' prior: 50660117!
impactBalance: calculatedBalance
	^calculatedBalance - value! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:16'!
FAILURE!

!methodRemoval: ReceptiveAccount #transactionIsDeposit: stamp: 'CJF 10/9/2023 21:23:47'!
transactionIsDeposit: aDeposit 
	aDeposit value.!

!methodRemoval: ReceptiveAccount #transactionIsWithdraw: stamp: 'CJF 10/9/2023 21:23:48'!
transactionIsWithdraw: aValue 
	^aValue *-1!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:23:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:24:59' prior: 50660151!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:25:53' prior: 50660187!
impactBalance: calculatedBalance
	^(calculatedBalance + value)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:27:30' prior: 50660236!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  balance:= aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

----QUIT----(9 October 2023 21:53:50) CuisUniversity-5981.image priorSource: 10479967!

----STARTUP---- (12 October 2023 19:51:50) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:55:30'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CJF 10/12/2023 19:55:48'!
test01
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:57:45'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 19:57:34'!
test01EmptyPortfolioReturnBalanceZero
	self assert: (Portfolio new) balance equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:57:49'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:57:59'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:58:06' prior: 50660329!
balance
	^0! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!methodRemoval: PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:15'!
test01
!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:01:17'!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount|
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:08:08' prior: 50660348!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:08:11'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:09:29'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 20:10:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:10:21' prior: 50660369!
addAccount: anAccount 
	accounts := anAccount.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:10:27'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:31'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:12:11' prior: 50660333!
balance
	^accounts balance.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:13:56' prior: 50660401!
balance
	accounts ifNil: [ ^0 ]
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:13:59'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:15:35' prior: 50660434!
balance
	accounts ifNil: [ ^0 ].
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:02'!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:10' prior: 50660471!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:16' prior: 50660487!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:43' prior: 50660503!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:23:36' prior: 50660519!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:23:37'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:24:52' prior: 50660381!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection with: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:24:54'!
ERROR!

----SNAPSHOT----(12 October 2023 21:03:06) CuisUniversity-5981.image priorSource: 10516499!

----QUIT----(12 October 2023 21:03:31) CuisUniversity-5981.image priorSource: 10525304!

----STARTUP---- (12 October 2023 21:04:59) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:06:05'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 21:09:45' prior: 50660452!
balance
	accounts ifNil: [ ^0 ].
	^accounts sum: [ :anAccount | anAccount balance ].! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:09:46'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 21:16:05' prior: 50660535!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:07'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:12'!
FAILURE!

----SNAPSHOT----(12 October 2023 21:27:21) CuisUniversity-5981.image priorSource: 10525397!

----QUIT----(12 October 2023 21:27:26) CuisUniversity-5981.image priorSource: 10526876!

----STARTUP---- (13 October 2023 20:09:20) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:09:28'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:13:39' prior: 50660556!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection new ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:17:24'!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:17:28'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:17:49'!
addPortfolio: aSecondPorftfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/13/2023 20:18:11'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:18:06' prior: 50660666!
addPortfolio: aSecondPorftfolio 
	portfolios := aSecondPorftfolio ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:22:44'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:22:45'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:25:31' prior: 50660580!
balance
	| accountsBalance portfoliosBalance |
	accounts ifNil: [ ^0 ].
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:25:32'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:26:11' prior: 50660703!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:26:14'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:28:13' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:08'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:16'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:29:35' prior: 50660630!
addAccount: anAccount 
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:30:47' prior: 50660724!
balance
	| accountsBalance portfoliosBalance |
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ifEmpty: [0].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:31:06'!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!methodRemoval: PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:06'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:09'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:55'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:33:27'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:35:31' prior: 50660786!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:36:15' prior: 50660843!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:37:23' prior: 50660873!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isNil ifTrue: [ portfoliosBalance :=0] ifFalse: [
	portfoliosBalance := portfolios balance.].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:18'!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:31' prior: 50660936!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:40:32'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:41:06'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:41:30' prior: 50660759 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:42:04' prior: 50660679!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:11' prior: 50660904!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ ] ifTrue: [ portfoliosBalance := 0
		].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:51' prior: 50661006!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ portfoliosBalance := portfolios sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:44:53'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

----SNAPSHOT----(13 October 2023 20:47:08) CuisUniversity-5981.image priorSource: 10526969!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:48:20'!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:52:13' prior: 50661140!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:55:48'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:55:52'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:03'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:17' prior: 50661229!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:58:44'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	
	self assert: (Portfolio new) transactions isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:01:41' prior: 50661273!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:01:44'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:02:56' prior: 50661234!
transactions
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:27'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:04:05' prior: 50661297!
transactions
	accounts ifEmpty: [ ^OrderedCollection new].
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:02'!
test08TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!methodRemoval: PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:03'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:09'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:09'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

----SNAPSHOT----(13 October 2023 21:05:16) CuisUniversity-5981.image priorSource: 10543553!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:17'!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:25' prior: 50661547!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:07' prior: 50661560!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:44' prior: 50661573!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:07:48'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:08:10' prior: 50661590!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:08:15'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:12:45' prior: 50661391!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	^res! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:12:47'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:13:12'!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:13:12'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:13:15'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:15:30'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:08' prior: 50661613!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:47' prior: 50661681!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	alltransactions addAll: firstAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:16:50'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:17:11' prior: 50661702!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:19:12'!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio addAccount: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addPortfolio: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:19:19'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:20:09' prior: 50661636!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	portfolios do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:29:56'!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered): (Deposit register: 100 on: (ReceptiveAccount new)).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:30:40' prior: 50661875!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered: (Deposit register: 100 on: (ReceptiveAccount new)) ).! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:30:42'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:30:51'!
hasRegistered: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:31:21' prior: 50661894!
hasRegistered: anAccountTransaction
	^false.! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:33:59'!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	"self assert: aPortfolio hasRegistered: Deposit "! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:34:48' prior: 50661954!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio hasRegistered: (Deposit for: 100)). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:34:50'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:35:01'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:10' prior: 50661899!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self]. ! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:27' prior: 50661987!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:42:01' prior: 50661997!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:42:05'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:43:45' prior: 50662071!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction )].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:43:48'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:45:40' prior: 50662086!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) ;yourself ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:48'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:52'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:47:09' prior: 50662100!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	"res := accounts includes: anAccountTransaction "
	res := accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:12'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:16'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:49:45' prior: 50661966!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:49:48'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:52:31' prior: 50662119!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:55:38'!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:55:42'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:56:34' prior: 50662154!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:59:01'!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
	aPortfolio addAccount: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 22:00:14' prior: 50662238!
hasRegistered: anAccountTransaction
	^self transactions includes: anAccountTransaction 
	"| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. "! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

----SNAPSHOT----(13 October 2023 22:01:28) CuisUniversity-5981.image priorSource: 10556598!

----SNAPSHOT----(14 October 2023 08:34:53) CuisUniversity-5981.image priorSource: 10586172!

----QUIT----(14 October 2023 08:35:03) CuisUniversity-5981.image priorSource: 10586265!

----STARTUP---- (16 October 2023 19:06:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:32:44'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Account as: #CollectionAccount stamp: 'CJF 10/16/2023 19:33:37'!
Smalltalk renameClassNamed: #Account as: #CollectionAccount!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:18'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:27'!
CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:37:05'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:06'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50661001!
addPortfolio: aPortfolio
	portfolios add2: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50659593!
register: aTransaction

	transactions add2: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50660781!
addAccount: anAccount 
	
	accounts add2: anAccount.! !

!methodRemoval: Portfolio #add: stamp: 'CJF 10/16/2023 19:38:06'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:51'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662549!
register: aTransaction

	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662544!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662554!
addAccount: anAccount 
	
	accounts add: anAccount.! !

!methodRemoval: Portfolio #add2: stamp: 'CJF 10/16/2023 19:38:51'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:39:47' prior: 50660353!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:06' prior: 50660590!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount.
	aPortfolio add: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:19' prior: 50660651!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio add: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:31' prior: 50660795!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:44' prior: 50660961!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:49' prior: 50662915!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:53' prior: 50662940!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:56' prior: 50662965!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:07' prior: 50661166!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:17' prior: 50663078!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:30' prior: 50661646!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:36' prior: 50661727!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:43' prior: 50663199!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:05' prior: 50661790!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio add: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:20' prior: 50662137!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:33' prior: 50662217!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:54' prior: 50662309!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
	aPortfolio add: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:43:30' prior: 50662834!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

----SNAPSHOT----(16 October 2023 19:44:56) CuisUniversity-5981.image priorSource: 10586358!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:47:53'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:48:33' prior: 50662583!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:48:52' prior: 50661018!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:48:59' prior: 50661819!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:12' prior: 50660995 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:26' prior: 50663763 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:49:44'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:50:05' prior: 50662588!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:20' prior: 50663738!
balance
	| accountsBalance portfoliosBalance |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:50:29' prior: 50663753!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:37' prior: 50663771 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:50:52'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(16 October 2023 19:51:28) CuisUniversity-5981.image priorSource: 10626053!

!methodRemoval: Portfolio #addPortfolio: stamp: 'CJF 10/16/2023 19:52:46'!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:52:46' prior: 50662567!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !

!methodRemoval: Portfolio #addAccount: stamp: 'CJF 10/16/2023 19:53:01'!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:01' prior: 50663838!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:21' prior: 50663853!
add: aCollectionAccount
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:53:56' prior: 50663807!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	"collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ]."
	^res! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:05' prior: 50663791!
balance
	| accountsBalance  |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	
	^accountsBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:21' prior: 50663939!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:44' prior: 50663949!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :aCollectionAccount | aCollectionAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

----SNAPSHOT----(16 October 2023 19:56:07) CuisUniversity-5981.image priorSource: 10629727!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:57:17'!
test16! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:08:52'!
test16PortfolioCannotAddDuplicatedAccounts! !

!methodRemoval: PortfolioTest #test16 stamp: 'CJF 10/16/2023 20:08:52'!
test16!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:10:02' prior: 50664033!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:12:00' prior: 50664040!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:12:06'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:13:49' prior: 50663864!
add: aCollectionAccount
	self ifCannotAddRaiseError: aCollectionAccount.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:14:21'!
ifCannotAddRaiseError: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:15:16' prior: 50664141!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:15:18'!
ERROR!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:15:33'!
duplicatedAccountError
	self shouldBeImplemented.! !
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:16:17' prior: 50664158!
duplicatedAccountError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:20'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:42'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:53'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:17:13' prior: 50664147!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:19:45'!
test17CannotAddAccountInAlreadyPortfolioAdded
	| portfolio secondPortfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	secondPortfolio add: account.
	portfolio add: secondPortfolio.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:19:47'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:25:38' prior: 50664179!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp xyx: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:48'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:13'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:27:17'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:32:36' prior: 50664274!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:32:55'!
ifCannotAddRaiseError: aCollectionAccount
	^(self = aCollectionAccount )! !

!methodRemoval: ReceptiveAccount #xyx: stamp: 'CJF 10/16/2023 20:32:55'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:38:50' prior: 50664382!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^true ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:51'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:44'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:40:49' prior: 50664568!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^false ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:40:55'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:46:59'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:08'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:57'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:53:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:55:45' prior: 50664369!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:57:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:01:10'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:05' prior: 50664902!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	self.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:53' prior: 50664936!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:04:58'!
test18! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:05:30' prior: 50665030!
test18
	| portfolio |
	portfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:07:09' prior: 50665033!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:07:12'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:08:43' prior: 50664950!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^self = aCollectionAccount .
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:30'!
FAILURE!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 21:09:53'!
cannotAddPortfolioError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:12:23' prior: 50665051!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:13:17' prior: 50665144!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:16:22'!
test19
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]"! !

----SNAPSHOT----(16 October 2023 21:16:30) CuisUniversity-5981.image priorSource: 10636047!

----QUIT----(17 October 2023 00:02:06) CuisUniversity-5981.image priorSource: 10677625!

----STARTUP---- (17 October 2023 12:05:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:24:16'!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:24:16'!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:26:33' prior: 50665315!
test19
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:27:03' prior: 50665408!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 13:11:11' prior: 50665428!
test19"primer de agregar en un portfolio interno"
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

----QUIT----(17 October 2023 13:11:32) CuisUniversity-5981.image priorSource: 10677718!