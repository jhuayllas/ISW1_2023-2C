

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (14 August 2023 19:44:29) as /home/camila/Desktop/CUIS/CuisUniversity-5981.image!


ObjectBuilder create: #Pepito
	collaboratorNames: ''
	in: 'Primera Actividad'
	!

!classDefinition: #Pepito category: 'Primera Actividad' stamp: 'CRC 8/14/2023 19:55:14'!
DenotativeObject subclass: #Pepito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Primera Actividad'!

!classDefinition: 'Pepito class' category: 'Primera Actividad' stamp: 'CRC 8/14/2023 19:55:14'!
Pepito class
	instanceVariableNames: ''!

Pepito hola!
!Pepito class methodsFor: 'saludo' stamp: 'CRC 8/14/2023 20:02:41'!
hola
	self shouldBeImplemented.! !
!Pepito class methodsFor: 'saludo' stamp: 'CRC 8/14/2023 20:04:02' prior: 50650336!
hola
	^'chau'! !

Pepito hola!

Pepito hola!

Pepito hola!

Pepito hola !

Pepito hola  !
!Pepito class methodsFor: 'saludo' stamp: 'CRC 8/14/2023 20:09:16'!
comoESTAS
	^'bien'! !

Pepito comoEstas!
!Pepito class methodsFor: 'as yet unclassified' stamp: 'CRC 8/14/2023 20:09:44'!
comoEstas
	self shouldBeImplemented.! !
!Pepito class methodsFor: 'saludo' stamp: 'CRC 8/14/2023 20:10:48'!
comoVas
	^'maso'! !

Pepito comoVas!

!methodRemoval: Pepito class #comoEstas stamp: 'CRC 8/14/2023 20:11:10'!
comoEstas
	self shouldBeImplemented.!

Pepito comoESTAS!

Pepito comoESTAS !

Pepito comoVas!

ObjectBuilder create: #Bill
	collaboratorNames: ''
	in: 'Segunda Actividad'
	!

!classDefinition: #Bill category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 20:45:20'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 20:45:20'!
Bill class
	instanceVariableNames: ''!

Bill energia !
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 20:46:23'!
energia
	self shouldBeImplemented.! !

!classDefinition: #diasDeVida category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 20:47:50'!
DenotativeObject subclass: #diasDeVida
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 20:47:16' prior: 50650376!
energia
	^ diasDeVida
	! !

Bill energia!
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 20:51:40' prior: 50650388!
energia
	^ 28 days
	
	! !

Bill energia!

	^ 28 days + 1 days!

	^ 28 !

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:08:07'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 21:07:29' prior: 50650392!
energia
	^energia
	
	! !

Bill energia!

!classRemoval: #diasDeVida stamp: 'CRC 8/14/2023 21:10:38'!
DenotativeObject subclass: #diasDeVida
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 21:13:26'!
nacer
	^28
	
	! !
!Bill class methodsFor: 'energia' stamp: 'CRC 8/14/2023 21:14:11' prior: 50650412!
nacer
 energia := 28
		
	! !

Bill nacer!

Bill nacer!

Bill energia!

Bill
	collaboratorNames: ''
	in: 'Segunda Actividad'!

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:23:35'!
Bill class
	instanceVariableNames: ''!

!classDefinition: #Bill category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:23:35'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:23:35'!
Bill class
	instanceVariableNames: ''!

Bill 
!

Bill
	collaboratorNames: 'energia'
	in: 'Segunda Actividad'!

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:25:09'!
Bill class
	instanceVariableNames: 'energia'!

!classDefinition: #Bill category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:25:09'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!

!classDefinition: 'Bill class' category: 'Segunda Actividad' stamp: 'CRC 8/14/2023 21:25:09'!
Bill class
	instanceVariableNames: 'energia'!

Bill !

!methodRemoval: Bill class #nacer stamp: 'CRC 8/14/2023 21:25:57'!
nacer
 energia := 28
		
	!

Bill energia!

Bill come!
!Bill class methodsFor: 'comer' stamp: 'CRC 8/14/2023 21:27:33'!
come
	self shouldBeImplemented.! !
!Bill class methodsFor: 'comer' stamp: 'CRC 8/14/2023 21:29:38'!
come: unaCantidadDeKilosDeCerebro
energia := unaCantidadDeKilosDeCerebro * 4 days + energia! !

Bill come: 2!
!Bill class methodsFor: 'comer' stamp: 'CRC 8/14/2023 21:32:12' prior: 50650464!
come: unaCantidadDeKilosDeCerebro
energia := (unaCantidadDeKilosDeCerebro * 4) days + energia! !

!methodRemoval: Bill class #come stamp: 'CRC 8/14/2023 21:32:26'!
come
	self shouldBeImplemented.!
!Bill class methodsFor: 'comer' stamp: 'CRC 8/14/2023 21:34:06' prior: 50650470!
come: unaCantidadDeKilosDeCerebro

energia := unaCantidadDeKilosDeCerebro * 4 days + energia! !

Bill come: 2!
!Bill class methodsFor: 'comer' stamp: 'CRC 8/14/2023 21:34:48' prior: 50650479!
come: unaCantidadDeKilosDeCerebro

energia := 4 days * unaCantidadDeKilosDeCerebro + energia! !

Bill energia!

----STARTUP---- (18 August 2023 22:46:47) as /home/camila/Desktop/CUIS/CuisUniversity-5981.image!


ObjectBuilder create: #testsBooleanos
	collaboratorNames: ''
	in: 'DenotativeObject-TestSupport'
	!

!classDefinition: #testsBooleanos category: 'DenotativeObject-TestSupport' stamp: 'camila 8/18/2023 22:47:17'!
DenotativeObject subclass: #testsBooleanos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!

!classDefinition: 'testsBooleanos class' category: 'DenotativeObject-TestSupport' stamp: 'camila 8/18/2023 22:47:17'!
testsBooleanos class
	instanceVariableNames: ''!

!classDefinition: #Verdadero category: 'DenotativeObject-TestSupport' stamp: 'camila 8/18/2023 22:47:48'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!

!classDefinition: #Falso category: 'DenotativeObject-TestSupport' stamp: 'camila 8/18/2023 22:47:51'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!
!testsBooleanos class methodsFor: 'no messages' stamp: 'camila 8/18/2023 22:47:47'!
test01NoVerdaderoEsFalso
Assert that: Verdadero no isEqualTo: Falso! !

Assert that: Verdadero no isEqualTo: Falso!
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:48:34'!
no
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:48:41' prior: 50650362!
no
	^Falso! !
!testsBooleanos class methodsFor: 'as yet unclassified' stamp: 'camila 8/18/2023 22:49:04'!
test01NoFalsoEsVerdadero
Assert that: Falso no isEqualTo: Verdadero! !

Assert that: Falso no isEqualTo: Verdadero!
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:49:15'!
no
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:49:21' prior: 50650376!
no
	^Verdadero! !

	^Verdadero!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:49:45'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:49:45'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:50:41'!
test02VerdaderoYFalsoEsFalso
Assert that: (Verdadero y Falso) isEqualTo: Falso! !

Assert that: (Verdadero y Falso) isEqualTo: Falso!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:50:53' prior: 50650390!
test02VerdaderoYFalsoEsFalso
Assert that: (Verdadero y:Falso) isEqualTo: Falso! !

Falso!

Falso!

Falso!

Falso!
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:51:32'!
y:unBooleano
	^unBooleano! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:51:44'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:52:08'!
test02VerdaderoYVerdaderEsVerdadero
Assert that: (Verdadero y:Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:52:13'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:52:31'!
test02FalsoYVerdaderoEsFalso
Assert that: (Falso y:Verdadero) isEqualTo: Falso! !

Assert that: (Falso y:Verdadero) isEqualTo: Falso!

Assert that: (Falso y:Verdadero) isEqualTo: Falso!
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:52:53'!
y: Verdadero 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:52:58' prior: 50650429!
y: Verdadero 
	^Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:53:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:53:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:53:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:53:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:53:10'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:53:31'!
test03VerdaderoOFalsoEsVerdadero
Assert that: (Verdadero o:Falso) isEqualTo: Verdadero! !

Assert that: (Verdadero o:Falso) isEqualTo: Verdadero!
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:53:38'!
o: Falso 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:53:44' prior: 50650460!
o: Falso 
	^Verdadero! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:53:57'!
test03VerdaderoOVerdaderoEsVerdadero
Assert that: (Verdadero o:Verdadero) isEqualTo: Verdadero! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:54:10'!
test03FalsoOVerdaderoEsVerdadero
Assert that: (Falso o:Verdadero) isEqualTo: Verdadero! !

Assert that: (Falso o:Verdadero) isEqualTo: Verdadero!
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:54:18'!
o: Verdadero 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 22:54:30' prior: 50650482!
o: Verdadero 
 	^Verdadero! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 22:54:56'!
test03FalsoOFalsoEsFalso
Assert that: (Falso o:Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 22:55:01'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:02:31'!
test04VerdaderoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Verdadero siEsVerdadero:aClousure.

Assert that: n1 isEqualTo: 6! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:03:15' prior: 50650524!
test04VerdaderoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Verdadero siEsVerdadero:aClousure.

Assert that: n1 isEqualTo: 6! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:03:37' prior: 50650532!
test04VerdaderoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Verdadero siEsVerdadero: aClousure.

Assert that: n1 isEqualTo: 6! !
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:04:19'!
siEsVerdadero: aClosure
 	^aClosure value! !
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:04:35'!
siEsFalso: aClosure
 	^self! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:04:47'!
PASSED!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:05:17'!
test04VerdaderoSiEsFalso
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Verdadero siEsFalso: aClousure.

Assert that: n1 isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:05:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:05:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:05:44'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:05:44'!
ERROR!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:06:25'!
test04FalsoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Falso siEsFalso: aClousure.

Assert that: n1 isEqualTo: Verdadero! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:06:30' prior: 50650579!
test04FalsoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Falso siEsFalso: aClousure.

Assert that: n1 isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:06:35'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:06:35'!
ERROR!
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:06:40'!
siEsFalso: aClousure 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:06:46' prior: 50650600!
siEsFalso: aClousure 
	^self.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:06:48'!
ERROR!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:07:33'!
test04FalsoSiEsFalso
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Falso siEsFalso: aClousure.

Assert that: n1 isEqualTo: 6! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:07:45' prior: 50650587!
test04FalsoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Falso siEsVerdadero: aClousure.

Assert that: n1 isEqualTo: Falso! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:08:06' prior: 50650605!
siEsFalso: aClousure 
	^aClousure value! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:08:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:08:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:08:36'!
ERROR!
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:08:40'!
siEsVerdadero: aClousure 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:08:44' prior: 50650641!
siEsVerdadero: aClousure 
	^self.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:08:46'!
ERROR!
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:08:58' prior: 50650620!
test04FalsoSiEsVerdadero
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Falso siEsVerdadero: aClousure.

Assert that: n1 isEqualTo: 0! !
!Falso class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:09:06' prior: 50650646!
siEsVerdadero: aClousure 
	^0.! !
!Verdadero class methodsFor: 'operadores' stamp: 'camila 8/18/2023 23:09:14' prior: 50650552!
siEsFalso: aClosure
 	^0! !
!testsBooleanos class methodsFor: 'tests' stamp: 'camila 8/18/2023 23:09:33' prior: 50650559!
test04VerdaderoSiEsFalso
| aClousure  n1 |
n1 := 0.
aClousure := [n1 := 6].

Verdadero siEsFalso: aClousure.

Assert that: n1 isEqualTo: 0! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/18/2023 23:09:38'!
PASSED!

----STARTUP---- (24 August 2023 19:44:27) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Peano'
	!

!classDefinition: #I category: 'Peano' stamp: 'camila 8/24/2023 20:29:19'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'camila 8/24/2023 20:29:19'!
I class
	instanceVariableNames: ''!

!classDefinition: #II category: 'Peano' stamp: 'camila 8/24/2023 20:30:38'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: 'no messages' stamp: 'camila 8/24/2023 20:30:31'!
next
	^II! !

!classDefinition: #III category: 'Peano' stamp: 'camila 8/24/2023 20:31:15'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'no messages' stamp: 'camila 8/24/2023 20:31:14'!
next
	^III! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:35:46' prior: 50650349!
next
	^ self cloneNamed: self name, 'I'.! !

II next!

!classRemoval: #III stamp: 'camila 8/24/2023 20:36:06'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/24/2023 20:36:13'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/24/2023 20:36:13'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:36:13'!
next
	^ self cloneNamed: self name, 'I'.! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:38:04' prior: 50650353!
next
	^ self + 1! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:38:29'!
+ aRenameMe1 
	self shouldBeImplemented.! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:39:17' prior: 50650384!
next
	^ self name, 'I'! !

II next!

II next!

II next!

!methodRemoval: II class #+ stamp: 'camila 8/24/2023 20:39:37'!
+ aRenameMe1 
	self shouldBeImplemented.!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Packages/TerseGuide.pck.st----!

----SNAPSHOT----(24 August 2023 20:43:59) CuisUniversity-5981.image priorSource: 10197292!

I
	collaboratorNames: 'next'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'camila 8/24/2023 20:53:46'!
I class
	instanceVariableNames: 'next'!

!classDefinition: #I category: 'Peano' stamp: 'camila 8/24/2023 20:53:46'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'camila 8/24/2023 20:53:46'!
I class
	instanceVariableNames: 'next'!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:56:14' prior: 50650340!
next
	next ifNotNil: [^next].
	next := self name, 'I'! !

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 20:57:47' prior: 50653339!
next
	next ifNotNil: [^next].
	
	next := self cloneNamed: self name, 'I'.
	
	^next.! !

!classRemoval: #II stamp: 'camila 8/24/2023 20:57:57'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'camila 8/24/2023 20:58:02'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

I next!

I next !

I next !

!classDefinition: #II category: 'Workspace-Objects' stamp: 'camila 8/24/2023 20:59:33'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Workspace-Objects'!

II!

II
	collaboratorNames: ''
	in: 'Peano'!

!classDefinition: 'II class' category: 'Workspace-Objects' stamp: 'camila 8/24/2023 21:00:01'!
II class
	instanceVariableNames: ''!

!classDefinition: #II category: 'Peano' stamp: 'camila 8/24/2023 21:00:01'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'camila 8/24/2023 21:00:01'!
II class
	instanceVariableNames: ''!

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:00:13'!
next
	self shouldBeImplemented.! !

!classDefinition: 'II class' category: 'Peano' stamp: 'camila 8/24/2023 21:01:12'!
II class
	instanceVariableNames: 'next'!
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:01:10' prior: 50653386!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	^next! !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/24/2023 21:01:15'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/24/2023 21:01:15'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:01:15'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	^next! !

!classRemoval: #III stamp: 'camila 8/24/2023 21:01:23'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:02:27'!
+ aNaturalNumber
	^aNaturalNumber next.! !

I + II!

II next!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:03:27' prior: 50653345!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	^next.! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/24/2023 21:05:30'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/24/2023 21:05:30'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:05:30'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	^next! !

I next!

----SNAPSHOT----(24 August 2023 21:06:44) CuisUniversity-5981.image priorSource: 10293429!
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:09:05'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:17:52' prior: 50653394!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !

!classDefinition: 'II class' category: 'Peano' stamp: 'camila 8/24/2023 21:21:11'!
II class
	instanceVariableNames: 'next previous'!
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:21:07'!
previous: aNaturalNumber
	^previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:21:26'!
previous
	^previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:22:42' prior: 50653477!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

!classRemoval: #III stamp: 'camila 8/24/2023 21:24:35'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II + I!

II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/24/2023 21:25:58'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/24/2023 21:25:58'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
previous
	^previous.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'camila 8/24/2023 21:25:58'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:25:58'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
previous
	^previous.! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:25:58'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

IIII next!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIII category: 'Peano' stamp: 'camila 8/24/2023 21:26:21'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:26:21'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:26:21'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:26:21'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:26:21'!
previous
	^previous.! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:26:21'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

----SNAPSHOT----(24 August 2023 21:27:15) CuisUniversity-5981.image priorSource: 10297850!

II + I!

I + II!

II + I!

II + II!

II + I!

II + I!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:33:36' prior: 50653431!
next
	^II.! !

II + I!

II + II!

IIIII + IIII!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIII category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous
	^previous.! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIII category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIIII category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous
	^previous.! !
!IIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIIIII category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: 'Peano' stamp: 'camila 8/24/2023 21:34:02'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous
	^previous.! !
!IIIIIIIII class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:34:02'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:36:59'!
- aNaturalNumber
	^nil.! !

I - III!

I - I!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:37:22' prior: 50653756!
- aNaturalNumber
	^0.! !

I - III!
!II class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:41:11'!
- aNaturalNumber
	^self previous - aNaturalNumber previous.! !

II - I!

II - I!

I
	collaboratorNames: 'next previous'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'camila 8/24/2023 21:42:14'!
I class
	instanceVariableNames: 'next previous'!

!classDefinition: #I category: 'Peano' stamp: 'camila 8/24/2023 21:42:14'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'camila 8/24/2023 21:42:14'!
I class
	instanceVariableNames: 'next previous'!

II - I!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/24/2023 21:43:20'!
previous
	^0.! !

II - I!

!methodRemoval: I class #- stamp: 'camila 8/24/2023 21:44:42'!
- aNaturalNumber
	^0.!

!methodRemoval: I class #previous stamp: 'camila 8/24/2023 21:44:50'!
previous
	^0.!
!II class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:46:03' prior: 50653765!
- aNaturalNumber

	^self previous.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:46:20'!
- aNaturalNumber
	^ self previous - aNaturalNumber previous.! !
!II class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:48:17' prior: 50653796!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous]
	^self previous - aNaturalNumber previous.! !

II - I!
!II class methodsFor: 'axiomas' stamp: 'camila 8/24/2023 21:48:37' prior: 50653805!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !

II - I!

----SNAPSHOT----(24 August 2023 21:53:14) CuisUniversity-5981.image priorSource: 10302392!

----SNAPSHOT----(24 August 2023 21:58:59) CuisUniversity-5981.image priorSource: 10309365!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/25/2023 01:47:00'!
* aNaturalNumber
	^aNaturalNumber.! !

I * II!
!II class methodsFor: 'axiomas' stamp: 'camila 8/25/2023 01:48:04'!
* aNaturalNumber
	^ self + self * (aNaturalNumber - I) ! !

II * I !
!II class methodsFor: 'axiomas' stamp: 'camila 8/25/2023 01:50:18' prior: 50653828!
* aNaturalNumber
	aNaturalNumber = I ifTrue: [^self]
	^ self + self * (aNaturalNumber previous)! !

II * I !
!II class methodsFor: 'axiomas' stamp: 'camila 8/25/2023 01:50:36' prior: 50653833!
* aNaturalNumber
	aNaturalNumber = I ifTrue: [^self]
	^ self + (self * (aNaturalNumber previous))! !

II * I !
!II class methodsFor: 'axiomas' stamp: 'camila 8/25/2023 01:52:09' prior: 50653840!
* aNaturalNumber
	aNaturalNumber = I ifTrue: [^self].
	^self * (aNaturalNumber previous) + previous.! !

II * I !

II * II  II .!

II * III!

----SNAPSHOT----(25 August 2023 01:55:27) CuisUniversity-5981.image priorSource: 10309457!

----STARTUP---- (27 August 2023 19:29:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #IIIIIIIII stamp: 'camila 8/27/2023 19:49:41'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIIII stamp: 'camila 8/27/2023 19:49:45'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := 'II'.
	previous := 0.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIII.
	previous := IIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/27/2023 20:37:44' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := AnObsoleteIIIIIIII.
	previous := IIIIII.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := 'II'.
	previous := 0.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIII.
	previous := IIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'camila 8/27/2023 20:37:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := AnObsoleteIIIIIIII.
	previous := IIIIII.!

----STARTUP---- (28 August 2023 19:54:39) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 19:56:09' prior: 50653847!
* aNaturalNumber
	
	^self + (aNaturalNumber previous * self) .! !

II next!

!classRemoval: #IIII stamp: 'camila 8/28/2023 20:00:48'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIIIII stamp: 'camila 8/28/2023 20:00:52'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIIII stamp: 'camila 8/28/2023 20:00:54'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIII stamp: 'camila 8/28/2023 20:00:58'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIII stamp: 'camila 8/28/2023 20:01:01'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIII stamp: 'camila 8/28/2023 20:01:03'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'camila 8/28/2023 20:01:05'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

II next!

II next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/28/2023 20:34:19'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/28/2023 20:34:19'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
* aNaturalNumber
	
	^self + (aNaturalNumber previous * self) .! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
previous
	^previous.! !
!III class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:34:19'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

II + III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'camila 8/28/2023 20:39:37'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'camila 8/28/2023 20:39:37'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
* aNaturalNumber
	
	^self + (aNaturalNumber previous * self) .! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
previous
	^previous.! !
!IIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIII category: 'Peano' stamp: 'camila 8/28/2023 20:39:37'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Peano' stamp: 'camila 8/28/2023 20:39:37'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
* aNaturalNumber
	
	^self + (aNaturalNumber previous * self) .! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
previous
	^previous.! !
!IIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:37'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

III + III!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIII category: 'Peano' stamp: 'camila 8/28/2023 20:39:46'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Peano' stamp: 'camila 8/28/2023 20:39:46'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
* aNaturalNumber
	
	^self + (aNaturalNumber previous * self) .! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
- aNaturalNumber
	aNaturalNumber = I ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
next
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	next previous: self.
	^next! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
previous
	^previous.! !
!IIIIII class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:39:46'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !

II * III!

II * III!

----SNAPSHOT----(28 August 2023 20:40:25) CuisUniversity-5981.image priorSource: 10310508!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:44:09' prior: 50653983!
* aNaturalNumber
	^aNaturalNumber + (self previous * aNaturalNumber ) .! !

!classRemoval: #IIIIII stamp: 'camila 8/28/2023 20:44:15'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIII stamp: 'camila 8/28/2023 20:44:19'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIII stamp: 'camila 8/28/2023 20:44:21'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:52:10'!
TimesToDivide: aNaturalNumber
	aNaturalNumber = self ifTrue: [^I]
	^aNaturalNumber  - self / self next! !
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:52:39'!
/ aNaturalNumber
	self TimesToDivide: aNaturalNumber! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 20:52:57'!
TimesToDivide: aNaturalNumber
	^aNaturalNumber.! !
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:53:52' prior: 50654247!
/ aNaturalNumber
	self TimesToDivide: aNaturalNumber.! !
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:54:16' prior: 50654257!
/ aNaturalNumber
	aNaturalNumber TimesToDivide: self.! !

----SNAPSHOT----(28 August 2023 20:54:23) CuisUniversity-5981.image priorSource: 10322094!
!I class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/28/2023 20:54:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := 'II'.
	previous := 0.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/28/2023 20:54:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'camila 8/28/2023 20:54:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := AnObsoleteIIII.
	previous := II.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'camila 8/28/2023 20:54:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := 'II'.
	previous := 0.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'camila 8/28/2023 20:54:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'camila 8/28/2023 20:54:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := AnObsoleteIIII.
	previous := II.!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:55:15' prior: 50654241!
TimesToDivide: aNaturalNumber
	aNaturalNumber = self ifTrue: [^I]
	^aNaturalNumber  - self / self +1 ! !

!classRemoval: #III stamp: 'camila 8/28/2023 20:55:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 20:55:50'!
^ aNaturalNumber
! !
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 21:12:00' prior: 50653467!
next
	next ifNotNil: [^next].
	next := self createChildNamed: self name, 'I'.
	next previous: self.
	^next! !

II next!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/28/2023 21:12:40'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/28/2023 21:12:40'!
III class
	instanceVariableNames: ''!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 21:13:18' prior: 50654332!
next
	next ifNotNil: [^next].
	next := II createChildNamed: self name, 'I'.
	next previous: self.
	^next! !

!classRemoval: #III stamp: 'camila 8/28/2023 21:13:24'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

----SNAPSHOT----(28 August 2023 21:17:39) CuisUniversity-5981.image priorSource: 10323704!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:30:52'!
- aNaturalNumber
	^self error: 'no entiendo'.! !

I - II !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:31:11' prior: 50654363!
- aNaturalNumber
	^self error: 'no entiendo la resta'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:31:41'!
/ aNaturalNumber
	^self error: 'no entiendo la divisiond'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:31:42' prior: 50654373!
/ aNaturalNumber
	^self error: 'no entiendo la division'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:32:24' prior: 50654368!
- aNaturalNumber
	^'No puedo restar porque soy el I'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:32:34'!
NoPuedoRestar
	^'No puedo restar porque soy el I'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:32:52' prior: 50654383!
- aNaturalNumber
	 self error: self NoPuedoRestar ! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:33:11' prior: 50654378!
/ aNaturalNumber
	 self error: self NoPuedoDividir. ! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:33:28'!
NoPuedoDividir
	^'No puedo dividir porque soy el I'.! !

----SNAPSHOT----(28 August 2023 21:35:36) CuisUniversity-5981.image priorSource: 10326707!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numeros Naturales Tests.st----!

II next!

!classDefinition: #III category: 'Peano' stamp: 'camila 8/28/2023 21:41:03'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 8/28/2023 21:41:03'!
III class
	instanceVariableNames: ''!

III next!

!classDefinition: #IIII category: 'Peano' stamp: 'camila 8/28/2023 21:41:09'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'camila 8/28/2023 21:41:09'!
IIII class
	instanceVariableNames: ''!

DenotativeObject subclass: #test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #test category: 'Peano' stamp: 'camila 8/28/2023 21:43:29'!
DenotativeObject subclass: #test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

test class
	instanceVariableNames: 'next previous'!

!classDefinition: 'test class' category: 'Peano' stamp: 'camila 8/28/2023 21:43:29'!
test class
	instanceVariableNames: 'next previous'!
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
* aNaturalNumber
	^aNaturalNumber.! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
+ aNaturalNumber
	^aNaturalNumber next.! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
- aNaturalNumber
	 self error: self NoPuedoRestar ! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
/ aNaturalNumber
	 self error: self NoPuedoDividir. ! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
NoPuedoDividir
	^'No puedo dividir porque soy el I'.! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
NoPuedoRestar
	^'No puedo restar porque soy el I'.! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
TimesToDivide: aNaturalNumber
	^aNaturalNumber.! !
!test class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 21:43:29'!
next
	^II.! !

!classRemoval: #test stamp: 'camila 8/28/2023 21:43:46'!
DenotativeObject subclass: #test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 21:44:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 21:44:19'!
PASSED!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 21:52:45' prior: 50654316!
TimesToDivide: aNaturalNumber
	aNaturalNumber = self ifTrue: [^I]
	^aNaturalNumber  - self / self next.! !

IIII / II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 8/28/2023 22:03:35'!
ERROR!

I / I!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 8/28/2023 22:04:39' prior: 50654398!
/ aNaturalNumber
	 ^self TimesToDivide: aNaturalNumber ! !

I / I!

IIII / II!
!II class methodsFor: 'axiomas' stamp: 'camila 8/28/2023 22:05:04' prior: 50654601!
TimesToDivide: aNaturalNumber
	aNaturalNumber = self ifTrue: [^I]
	^(aNaturalNumber  - self / self) next.! !

IIII / II!

IIII / II!

----STARTUP---- (31 August 2023 20:31:49) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


Object subclass: 		#XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW'!

!classDefinition: #XXX category: 'ISW' stamp: 'camila 8/31/2023 20:43:52'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW'!
!XXX methodsFor: 'no messages' stamp: 'camila 8/31/2023 20:46:58'!
findOddsPart0

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
                index := index +1.
                ].
        ^odds! !

XXX new!

XXX new!

XXX new!

XXX new!

XXX new!

XXX new findOddsPart0 !

XXX new findOddsPart0 !

XXX new findOddsPart0 !
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:06:16'!
findOddsPart1

        | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements do:[:  element |   element odd ifTrue: [odds add: element ]].
        ^odds.! !

----SNAPSHOT----(31 August 2023 21:06:46) CuisUniversity-5981.image priorSource: 10328215!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:07:45' prior: 50654689!
findOddsPart1

        | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements do:[: element |  
		 element odd ifTrue: [odds add: element ]].
        ^odds.! !

       | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements do:[: element |  
		 element odd ifTrue: [odds add: element ]].
        ^odds.!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:13:12'!
findOddsPart2

        | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements select:[: element |  
		 element odd ].
        ^odds.! !

      | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements select:[: element |  
		 element odd ].
        ^odds.!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:14:40' prior: 50654718!
findOddsPart2

        | elements |

        elements:= #(1 2 5 6 9).

     
	^elements select:[: element |  element odd ].
! !
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:15:01' prior: 50654733!
findOddsPart2

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements select:[: element |  element odd ].
! !

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements select:[: element |  element odd ].
!


        | elements odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
     
	elements do:[: element |  
		 element odd ifTrue: [odds add: element ]].
        ^odds.!

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements select:[: element |  element odd ].!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:23:03'!
findDoubles

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements collect:[: element |  element *2 ].
! !

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements collect:[: element |  element *2 ].!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:26:28'!
findFirstEven

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements detect:[: element |  element even ].
! !


        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements detect:[: element |  element even ].!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:36:05'!
findFirstEvenWithoutMatching

        | elements |

        elements:= #(1 2 5 6 9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].
! !

       | elements |

        elements:= #(1 2 5 6 9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:36:18' prior: 50654780!
findFirstEvenWithoutMatching

        | elements |

        elements:= #(1 5 6 9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].
! !

        | elements |

        elements:= #(1 5 6 9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].
!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:36:29' prior: 50654793!
findFirstEvenWithoutMatching

        | elements |

        elements:= #(1 5  9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].
! !


        | elements |

        elements:= #(1 5  9).
 
	^elements detect:[: element |  element even ]ifNone:[self error: 'no existe'].
!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:36:46' prior: 50654806!
findFirstEvenWithoutMatching

        | elements |

        elements:= #(1 5  9).
 
	^elements detect:[: element |  element even ]ifNone:[42].
! !

        | elements |

        elements:= #(1 5  9).
 
	^elements detect:[: element |  element even ]ifNone:[42].!

^#(1 5 9) inject: 0 into: [:sum :element | sum + element].!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:43:31'!
sumElementsInjecting

        ^#(1 5 9) inject: 0 into: [:sum :element | sum + element].

! !
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:45:39'!
sumElements

        ^#(1 5 9) sum.

! !

^#(1 5 9) sum.!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:46:54'!
extractVowels 'asdasdasdasdiqwi'


! !

'asdasdasdasdiqwi' select: [:char | char isVowel]!
!XXX methodsFor: 'as yet unclassified' stamp: 'camila 8/31/2023 21:49:42' prior: 50654843!
extractVowels 
'asdasdasdasdiqwi' select: [:char | char isVowel]


! !

----SNAPSHOT----(31 August 2023 21:49:47) CuisUniversity-5981.image priorSource: 10337522!

----SNAPSHOT----(31 August 2023 21:56:30) CuisUniversity-5981.image priorSource: 10342502!

----STARTUP---- (3 September 2023 18:55:54) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numeros Naturales Tests.st----!

!classDefinition: #III category: 'Peano' stamp: 'camila 9/3/2023 18:58:37'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'III class' category: 'Peano' stamp: 'camila 9/3/2023 18:58:37'!
III class
	instanceVariableNames: ''!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!classDefinition: #IIII category: 'Peano' stamp: 'camila 9/3/2023 18:58:37'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'camila 9/3/2023 18:58:37'!
IIII class
	instanceVariableNames: ''!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 18:58:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:00:35'!
ERROR!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 9/3/2023 19:00:53'!
descripcionDeErrorDeNumerosNegativosNoSoportados
	self shouldBeImplemented.! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 9/3/2023 19:01:29' prior: 50655027!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'no puedo restar'! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 9/3/2023 19:01:38' prior: 50655033!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'no puedo restar numeros mas grande que yo'! !
!I class methodsFor: 'as yet unclassified' stamp: 'camila 9/3/2023 19:02:08' prior: 50654393!
- aNaturalNumber 
	self error: self NoPuedoRestar ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:02:25'!
ERROR!
!I class methodsFor: 'as yet unclassified' stamp: 'camila 9/3/2023 19:03:19' prior: 50654398!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [^I].
	 self error: self NoPuedoDividir. ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'camila 9/3/2023 19:04:06'!
PASSED!

----STARTUP---- (4 September 2023 20:04:01) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/CodigoRepetido-Ejercicio.st----!

----SNAPSHOT----(4 September 2023 21:00:09) CuisUniversity-5981.image priorSource: 10342594!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 21:25:12'!
xxxxx

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 21:29:29'!
xxxxx: aBlockClosure

	
	| customerBook millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 21:33:27'!
xxxxx: aBlockClosure xx:name xx:time

	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	 aBlockClosure value: name.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 21:35:08' prior: 50655415!
xxxxx: aBlockClosure xx:name xx:number

	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	 aBlockClosure value: name.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (number * millisecond)
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 21:35:22' prior: 50655427!
xxxxx: aBlockClosure xx:name xx:number

	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	 aBlockClosure value: name.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (number * millisecond)
	
	
! !

!methodRemoval: CustomerBookTest #xxxxx stamp: 'camila 9/4/2023 21:37:50'!
xxxxx

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
!

!methodRemoval: CustomerBookTest #xxxxx: stamp: 'camila 9/4/2023 21:37:58'!
xxxxx: aBlockClosure

	
	| customerBook millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/4/2023 22:06:15'!
XXXXX:aBlockClosure xxx: error xxx:bloqueAEjecutarDespuesDelError

	aBlockClosure
		on: error
		do: bloqueAEjecutarDespuesDelError! !

----SNAPSHOT----(4 September 2023 22:07:38) CuisUniversity-5981.image priorSource: 10359488!

----STARTUP---- (5 September 2023 15:59:03) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 15:59:45'!
ejecutar:aBlockClosure enCasoDe: error ejecutar: bloqueAEjecutarDespuesDelError

	aBlockClosure value
		on: error
		do: bloqueAEjecutarDespuesDelError! !

!methodRemoval: CustomerBookTest #XXXXX:xxx:xxx: stamp: 'camila 9/5/2023 15:59:55'!
XXXXX:aBlockClosure xxx: error xxx:bloqueAEjecutarDespuesDelError

	aBlockClosure
		on: error
		do: bloqueAEjecutarDespuesDelError!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 16:01:16'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 16:01:41' prior: 50655178!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	
	self ejecutar: [ customerBook addCustomerNamed: ''. 
				self fail ] 
	enCasoDe: Error 
	ejecutar: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 16:14:14' prior: 50655190!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	
	self ejecutar:[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
	enCasoDe: NotFound 
	ejecutar: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:14:24'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:14:24'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:16:17'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:16:17'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 16:25:58' prior: 50655528!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	
	self ejecutar:[ customerBook removeCustomerNamed: 'Paul McCartney'.
				self fail ]
	enCasoDe: NotFound 
	ejecutar: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #xxxxx:xx:xx: stamp: 'camila 9/5/2023 16:57:37'!
xxxxx: aBlockClosure xx:name xx:number

	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	 aBlockClosure value: name.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (number * millisecond)
	
	
!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:57:52'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:57:52'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 16:58:08'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 16:58:08'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 16:58:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 16:58:21'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 16:58:37'!
FAILURE!

!classRemoval: #CustomerBook stamp: 'camila 9/5/2023 16:58:56'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'camila 9/5/2023 16:58:56'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'camila 9/5/2023 16:58:56'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'camila 9/5/2023 16:58:56'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:02:11'!
xxxxx:aBlockClosure xx: error xx: blockClosureInCaseOfError

	aBlockClosure
		on: error
		do: blockClosureInCaseOfError! !

self fail!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:04:51' prior: 50655940!
xxxxx:aBlockClosure xx: error xx: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: blockClosureInCaseOfError value.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:05:01' prior: 50655948!
xxxxx:aBlockClosure xx: error xx: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:06:21'!
execute:aBlockClosure inCaseOf: error doThis: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).! !

!methodRemoval: CustomerBookTest #xxxxx:xx:xx: stamp: 'camila 9/5/2023 17:06:27'!
xxxxx:aBlockClosure xx: error xx: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:08:54'!
evaluate:aBlockClosure inCaseOf: error doThis: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:10:35'!
evaluate:collaboration mustRaise: anException thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException
		do: (collaborationInCaseOfException value).! !

!methodRemoval: CustomerBookTest #evaluate:inCaseOf:doThis: stamp: 'camila 9/5/2023 17:10:41'!
evaluate:aBlockClosure inCaseOf: error doThis: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).!

!methodRemoval: CustomerBookTest #execute:inCaseOf:doThis: stamp: 'camila 9/5/2023 17:10:46'!
execute:aBlockClosure inCaseOf: error doThis: blockClosureInCaseOfError

	[aBlockClosure value.
	self fail]
		on: error
		do: (blockClosureInCaseOfError value).!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:11:30' prior: 50655733!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self evaluate:[ customerBook addCustomerNamed: '']
		mustRaise: Error 
		thenAssert: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:11:34'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:11:34'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:12:44' prior: 50655987!
evaluate:collaboration mustRaise: anException thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException
		do: (collaborationInCaseOfException).! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:12:50'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:12:57'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:13:17' prior: 50656032!
evaluate:collaboration mustRaise: anException1 thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException1
		do: (collaborationInCaseOfException).! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:13:22' prior: 50656048!
evaluate:collaboration mustRaise: anException thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException
		do: (collaborationInCaseOfException).! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:14:14'!
evaluate:collaboration mustRaise2: anException thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException
		do: (collaborationInCaseOfException).! !

!methodRemoval: CustomerBookTest #evaluate:mustRaise2:thenAssert: stamp: 'camila 9/5/2023 17:14:33'!
evaluate:collaboration mustRaise2: anException thenAssert: collaborationInCaseOfException

	[collaboration value.
	self fail]
		on: anException
		do: (collaborationInCaseOfException).!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:14:59' prior: 50655745!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self evaluate:[ customerBook removeCustomerNamed: 'Paul McCartney'.]
		mustRaise: NotFound 
		thenAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:15:02'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:15:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:15:13'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:15:55' prior: 50655816!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self evaluate:[ customerBook suspendCustomerNamed: johnLennon.]
		mustRaise: CantSuspend 
		thenAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:15:58'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:15:58'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:16:27' prior: 50655800!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self evaluate:[ customerBook suspendCustomerNamed: 'George Harrison'.]
		mustRaise: CantSuspend 
		thenAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:16:30'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:16:30'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:19:24'!
xxxx: aBlockClosure
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:19:57' prior: 50656231!
xxxx: aBlockClosure
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:21:12'!
xxxx: aBlockClosure xx: timeInMilliseconds
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < (timeInMilliseconds)
	
	
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:21:39'!
x: aBlockClosure x: timeInMilliseconds
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < (timeInMilliseconds)
	
	
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:23:46' prior: 50655696!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook xx |
	
	customerBook := CustomerBook new.
	
	
	xx := self x: [customerBook addCustomerNamed: 'John Lennon'.] x: (50 * millisecond).
	
	
	self assert: xx.
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:24:24' prior: 50656281!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	
	
	self assert: (self x: [customerBook addCustomerNamed: 'John Lennon'.] x: (50 * millisecond)).
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:24:34'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:25:46' prior: 50655713!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self assert: (self x: [customerBook removeCustomerNamed: paulMcCartney.] x: (100 * millisecond)).
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:25:51'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:25:55'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:25:55'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:27:10'!
checkIfThisCollaboration: aBlockClosure takesLessThan: timeInMilliseconds
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < (timeInMilliseconds)
	
	
	
	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'camila 9/5/2023 17:27:10' prior: 50656292!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	
	
	self assert: (self checkIfThisCollaboration: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: (50 * millisecond)).
	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'camila 9/5/2023 17:27:10' prior: 50656306!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self assert: (self checkIfThisCollaboration: [customerBook removeCustomerNamed: paulMcCartney.] takesLessThan: (100 * millisecond)).
	
! !

!methodRemoval: CustomerBookTest #x:x: stamp: 'camila 9/5/2023 17:27:10'!
x: aBlockClosure x: timeInMilliseconds
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < (timeInMilliseconds)
	
	
	
	
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:27:26'!
PASSED!

----SNAPSHOT----(5 September 2023 17:28:22) CuisUniversity-5981.image priorSource: 10362853!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:31:30'!
xxxx: active x: suspended x: total x: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !

!methodRemoval: CustomerBookTest #xxxx:xx: stamp: 'camila 9/5/2023 17:31:49'!
xxxx: aBlockClosure xx: timeInMilliseconds
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < (timeInMilliseconds)
	
	
	
	
!

!methodRemoval: CustomerBookTest #xxxx: stamp: 'camila 9/5/2023 17:31:52'!
xxxx: aBlockClosure
	
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	
	
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:32:10'!
x: active x: suspended x: total x: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !

!methodRemoval: CustomerBookTest #xxxx:x:x:x: stamp: 'camila 9/5/2023 17:32:10'!
xxxx: active x: suspended x: total x: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:32:53' prior: 50655760!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self x: 0 x: 1 x: 1 x:customerBook.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:32:58'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:33:23' prior: 50655779!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self x: 0 x: 0 x: 0 x: customerBook.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:33:27'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:35:22'!
checkIfThisCustomerBookHas: active activeCustomers: suspended suspendedCustomers: total totalCustomers: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'camila 9/5/2023 17:35:22' prior: 50656500!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkIfThisCustomerBookHas: 0 activeCustomers: 1 suspendedCustomers: 1 totalCustomers:customerBook.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'camila 9/5/2023 17:35:22' prior: 50656519!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkIfThisCustomerBookHas: 0 activeCustomers: 0 suspendedCustomers: 0 totalCustomers: customerBook.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!methodRemoval: CustomerBookTest #x:x:x:x: stamp: 'camila 9/5/2023 17:35:22'!
x: active x: suspended x: total x: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:35:47' prior: 50656554!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkIfThisCustomerBookHas: customerBook activeCustomers: 0 suspendedCustomers: 1 totalCustomers:1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:36:00' prior: 50656572!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkIfThisCustomerBookHas: customerBook activeCustomers: 0 suspendedCustomers: 0 totalCustomers: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:36:02'!
ERROR!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:36:02'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:36:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:36:25'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:36:25'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:37:05' prior: 50656540!
checkIfThisCustomerBookHas: customerBook activeCustomers: suspended suspendedCustomers: total totalCustomers: active
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:15'!
FAILURE!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:15'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 17:37:33' prior: 50656676!
checkIfThisCustomerBookHas: customerBook activeCustomers: active suspendedCustomers: suspended totalCustomers: total
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:39'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:43'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:37:46'!
PASSED!

----SNAPSHOT----(5 September 2023 17:37:52) CuisUniversity-5981.image priorSource: 10393252!
!CustomerBookTest methodsFor: 'nil' stamp: 'camila 9/5/2023 17:39:34' overrides: 16961394!
setUp! !

!methodRemoval: CustomerBookTest #setUp stamp: 'camila 9/5/2023 17:41:29'!
setUp!
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:45:22' prior: 50655886!
removeCustomerNamed: aName 
 
	self select:[:element | element = aName].

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:46:45' prior: 50656759!
removeCustomerNamed: aName 
 
	self select:[:element | element = aName].

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:50:06' prior: 50656774!
removeCustomerNamed: aName 
 
	active reject:[:element | element = aName].

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:50:43' prior: 50656789!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:50:47'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:50:47'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:53:02' prior: 50656804!
removeCustomerNamed: aName 

	active reject:[:element | element = aName].
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:53:17' prior: 50656848!
removeCustomerNamed: aName 

	active reject:[:element | element = aName].
 
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	]."

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:53:32' prior: 50656863!
removeCustomerNamed: aName 

	active := active reject:[:element | element = aName].
 
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	]."

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:54:00'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:54:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:54:00'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:56:48'!
xxx: aName x: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:57:13'!
removeCustomer: aName from: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:58:04' prior: 50656878!
removeCustomerNamed: aName 

	self removeCustomer:aName from:active.
	self removeCustomer:aName from:suspended.
	
	^ NotFound signal.
! !

!methodRemoval: CustomerBook #xxx:x: stamp: 'camila 9/5/2023 17:58:11'!
xxx: aName x: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:58:16'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:58:16'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:58:16'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 17:59:12'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:59:12'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 17:59:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 17:59:30'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:04:50'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:04:50'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:04:50'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:04:53'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 18:07:17' prior: 50656937!
removeCustomer: aName from: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^aName.! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:07:22'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:07:22'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:07:22'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:07:22'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:07:22'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:07:22'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:07:22'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:07:22'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 18:08:09' prior: 50657063!
removeCustomer: aName from: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].
! !
!CustomerBook methodsFor: 'customer management' stamp: 'camila 9/5/2023 17:45:22' prior: 50656947!
removeCustomerNamed: aName 
 
	self select:[:element | element = aName].

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!methodRemoval: CustomerBook #removeCustomer:from: stamp: 'camila 9/5/2023 18:10:01'!
removeCustomer: aName from: listOfCustomers

	1 to: listOfCustomers size do: 
	[ :index |
		aName = (listOfCustomers at: index)
			ifTrue: [
				listOfCustomers removeAt: index.
				^ aName 
			] 
	].
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:10:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:10:05'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:10:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:10:05'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:10:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:10:05'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:10:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:10:05'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:10:33'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:10:33'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:10:33'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:10:33'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:10:33'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:10:33'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:10:33'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:10:33'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:10:40'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50657114!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:11:12'!
PASSED!

----SNAPSHOT----(5 September 2023 18:11:15) CuisUniversity-5981.image priorSource: 10403173!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:13:03'!
PASSED!

----SNAPSHOT----(5 September 2023 18:13:06) CuisUniversity-5981.image priorSource: 10419062!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 18:31:11'!
assertIfThisCustomerBook: customerBook withSuspendedCustomer: suspendedCustomer hasThisCustomer: anotherCustomer
	
	self evaluate:[ customerBook suspendCustomerNamed: suspendedCustomer.]
		mustRaise: CantSuspend 
		thenAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: anotherCustomer) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 18:32:12' prior: 50656184!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	self assertIfThisCustomerBook: customerBook withSuspendedCustomer: 'George Harrison' hasThisCustomer:johnLennon.
	
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:32:16'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:32:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:32:23'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 18:32:43' prior: 50656135!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	
	self assertIfThisCustomerBook: customerBook withSuspendedCustomer: johnLennon hasThisCustomer:johnLennon.
	
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:32:47'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:32:52'!
PASSED!

----SNAPSHOT----(5 September 2023 18:33:06) CuisUniversity-5981.image priorSource: 10420134!
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 18:33:41' prior: 50657345!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self assertIfThisCustomerBook: customerBook withSuspendedCustomer: johnLennon hasThisCustomer:johnLennon.
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'camila 9/5/2023 18:33:46' prior: 50657298!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self assertIfThisCustomerBook: customerBook withSuspendedCustomer: 'George Harrison' hasThisCustomer:johnLennon.
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'camila 9/5/2023 18:38:23'!
PASSED!

----SNAPSHOT----(5 September 2023 18:38:27) CuisUniversity-5981.image priorSource: 10423755!

----STARTUP---- (10 September 2023 17:26:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/Pre-Numeros-Ejercicio.st----!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numeros-Ejercicio.st----!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Pre-Numeros-Ejercicio.st----!

----SNAPSHOT----(10 September 2023 17:29:25) CuisUniversity-5981.image priorSource: 10425696!

Object subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 17:53:15'!
Object subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/10/2023 17:55:01'!
Object subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 17:55:26'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'camila 9/10/2023 17:55:32'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'no messages' stamp: 'camila 9/10/2023 17:57:29' overrides: 50658830!
isZero
 ^ self value = 0.! !
!Fraccion methodsFor: 'no messages' stamp: 'camila 9/10/2023 17:58:21' overrides: 50658830!
isZero
^false.! !
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 17:59:28' prior: 50658830!
isZero

	^self subclassResponsibility .! !
!NumeroTest methodsFor: 'setup' stamp: 'camila 9/10/2023 18:04:04' prior: 50658720 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Fraccion with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:04:10'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:04:10'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:04:30'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:04:30'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:04:41'!
PASSED!
!Entero methodsFor: 'testing' stamp: 'camila 9/10/2023 18:07:01' prior: 50658984 overrides: 50658992!
isZero
 ^ self value isEqualTo: 0.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:07:09'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:07:09'!
FAILURE!
!Entero methodsFor: 'testing' stamp: 'camila 9/10/2023 17:57:29' prior: 50659034 overrides: 50658992!
isZero
 ^ self value = 0.! !

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 18:07:40'!
PASSED!
!Entero methodsFor: 'testing' stamp: 'camila 9/10/2023 18:08:24' overrides: 50658825!
isOne
 ^ self value = 1.! !
!Fraccion methodsFor: 'testing' stamp: 'camila 9/10/2023 18:08:32' overrides: 50658825!
isOne
^false.! !
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 18:08:49' prior: 50658825!
isOne

	^self subclassResponsibility .! !

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 18:08:56'!
FAILURE!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 18:08:56'!
FAILURE!
!Numero methodsFor: 'initialization' stamp: 'camila 9/10/2023 18:09:59' prior: 50658836!
initializeWith: aValue
	
	type := Entero new.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'camila 9/10/2023 18:10:07' prior: 50658841!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=Fraccion new.
	numerator := aNumerator.
	denominator := aDenominator ! !

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Pre-Numeros-Ejercicio Solu.st----!

!classRemoval: #Fraccion stamp: 'camila 9/10/2023 18:37:28'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/10/2023 18:37:29'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'camila 9/10/2023 18:37:29'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'camila 9/10/2023 18:37:29'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Pre-Numeros-Ejercicio.st----!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:38:33'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:38:38'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: ' numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:38:45'!
Object subclass: #Numero
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:38:50'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:39:10'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:39:14'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'no messages' stamp: 'camila 9/10/2023 18:39:26' overrides: 50659767!
isZero
 ^value = 0.! !
!Fraccion methodsFor: 'no messages' stamp: 'camila 9/10/2023 18:39:41' overrides: 50659767!
isZero
^false.! !
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 18:40:03' prior: 50659767!
isZero
^self subclassResponsibility .! !
!NumeroTest methodsFor: 'setup' stamp: 'camila 9/10/2023 18:41:00' prior: 50659657 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:41:05'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:41:05'!
FAILURE!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: 'value'
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:44:11'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:44:18'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: 'type class numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:44:25'!
Object subclass: #Numero
	instanceVariableNames: 'type class numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:44:31'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:44:31'!
FAILURE!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 18:44:43'!
PASSED!

Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'camila 9/10/2023 18:46:38'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:46:55'!
PASSED!
!Entero methodsFor: 'testing' stamp: 'camila 9/10/2023 18:47:28' overrides: 50659762!
isOne
 ^value = 1.! !
!Fraccion methodsFor: 'testing' stamp: 'camila 9/10/2023 18:47:38' overrides: 50659762!
isOne
	^false.! !
!Fraccion methodsFor: 'testing' stamp: 'camila 9/10/2023 18:47:43' prior: 50659953 overrides: 50659957!
isZero
	^false.! !

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 18:47:49'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 18:47:56'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:49:19' overrides: 50659703!
+ anAdder
[anAdder type = #Entero] ifTrue: [ ^self class with: value + anAdder integerValue ].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:49:44' prior: 50660073 overrides: 50659703!
+ anAdder
[anAdder type = #Entero] ifTrue: [ ^self class with: value + anAdder integerValue ].
self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:49:45' prior: 50660080 overrides: 50659703!
+ anAdder
[anAdder type = #Entero] ifTrue: [ ^self class with: value + anAdder integerValue ].
self error: 'Tipo de número no soportado'.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:50:32' overrides: 50659703!
+ anAdder
[anAdder type = #Fraccion] ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:50:53' prior: 50660089 overrides: 50659703!
+ anAdder
	[anAdder type = #Entero] ifTrue: [ ^self class with: value + anAdder integerValue ].
	self error: 'Tipo de número no soportado'.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:51:11' prior: 50660097 overrides: 50659703!
+ anAdder
	[anAdder type = #Fraccion] ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'.! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:51:17'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:51:17'!
ERROR!
!Numero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:51:34' prior: 50659703!
+ anAdder 
	self subclassResponsibility .
	! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:52:21'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:52:21'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 18:55:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 18:55:51'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 18:55:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 18:55:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:56:43'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:56:43'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:57:14' prior: 50660110 overrides: 50660139!
+ anAdder
	[anAdder type = self class] ifTrue: [ ^self class with: value + anAdder integerValue ].
	self error: 'Tipo de número no soportado'.! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:57:21'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:57:21'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:57:44' prior: 50660171 overrides: 50660139!
+ anAdder
	[anAdder type = Entero] ifTrue: [ ^self class with: value + anAdder integerValue ].
	self error: 'Tipo de número no soportado'.! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:57:49'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:57:49'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:58:13' prior: 50660186 overrides: 50660139!
+ anAdder
	^self class with: value + anAdder integerValue.! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 18:58:18'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 18:58:39' prior: 50660119 overrides: 50660139!
+ anAdder
	| newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		^ self class with: newNumerator over: newDenominator.! !

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 18:58:53'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 18:58:53'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'camila 9/10/2023 18:59:12' prior: 50659587!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraccion with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 18:59:16'!
PASSED!
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 19:00:35' prior: 50659957!
isZero
	^self subclassResponsibility .! !
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 19:00:48' prior: 50659762!
isOne

	^self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:01:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:04:23'!
PASSED!
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 19:05:00' prior: 50660250!
isOne
	^self subclassResponsibility .! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:10:38'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:12:08' overrides: 50659689!
* aMultiplier
	^self class with: value * aMultiplier integerValue.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:12:34' overrides: 50659689!
* aMultiplier
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) .! !
!Numero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:12:46' prior: 50659689!
* aMultiplier 
^self subclassResponsibility .
	! !

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:12:53'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:13:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:13:25'!
PASSED!
!NumeroTest methodsFor: 'tests' stamp: 'camila 9/10/2023 19:13:42' prior: 50659609!
test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Fraccion with: two over: four)! !

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:13:55'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:14:33'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:14:44'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:14:54'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:24:32'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:24:40'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:25:17'!
PASSED!

----SNAPSHOT----(10 September 2023 19:26:34) CuisUniversity-5981.image priorSource: 10473071!
!Fraccion methodsFor: 'initialization' stamp: 'camila 9/10/2023 19:27:08' overrides: 50659778!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'initialization' stamp: 'camila 9/10/2023 19:27:23' prior: 50659778!
initializeWith: aNumerator over: aDenominator

	^self subclassResponsibility .! !

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:27:32'!
PASSED!
!Entero methodsFor: 'initialization' stamp: 'camila 9/10/2023 19:28:39' overrides: 50659773!
initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'camila 9/10/2023 19:28:48' prior: 50659773!
initializeWith: aValue
	
	^self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:29:00'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:29:00'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:29:00'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:29:00'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:30:06' overrides: 50659736!
negated
	^self * (self class with: -1).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:30:33' overrides: 50659736!
negated
	^self class with: numerator * (self class with: -1) over: denominator.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:30:43' prior: 50659736!
negated
	^self subclassResponsibility .! !

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:30:49'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:30:56'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:30:56'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:31:37'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:32:32' prior: 50660427 overrides: 50660433!
negated
	^self class with: numerator * (Entero with: -1) over: denominator.! !

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:32:39'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:32:55'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:32:55'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'camila 9/10/2023 19:33:13' prior: 50659643!
test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Fraccion with: negativeOne over: negativeTwo)! !

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:33:16'!
PASSED!
!NumeroTest methodsFor: 'tests' stamp: 'camila 9/10/2023 19:33:24' prior: 50659650!
test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Fraccion with: one over: negativeTwo)! !

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:33:26'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:33:30'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:33:30'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:34:55' overrides: 50659728!
greatestCommonDivisorWith: anEntero 
		^self class with: (value gcd: anEntero integerValue).! !

----SNAPSHOT----(10 September 2023 19:36:19) CuisUniversity-5981.image priorSource: 10517590!

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'camila 9/10/2023 19:36:24'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:36:28'!
PASSED!

----SNAPSHOT----(10 September 2023 19:37:30) CuisUniversity-5981.image priorSource: 10524863!
!Fraccion methodsFor: 'accessing' stamp: 'camila 9/10/2023 19:38:55' overrides: 50659793!
denominator
	^denominator.! !
!Fraccion methodsFor: 'accessing' stamp: 'camila 9/10/2023 19:39:02' overrides: 50659803!
numerator
	^numerator.! !

----SNAPSHOT----(10 September 2023 19:39:10) CuisUniversity-5981.image priorSource: 10527052!

!methodRemoval: Numero #denominator stamp: 'camila 9/10/2023 19:39:19'!
denominator

	^denominator!

!methodRemoval: Numero #numerator stamp: 'camila 9/10/2023 19:39:26'!
numerator

	^numerator!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:39:48'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:39:48'!
PASSED!
!Entero methodsFor: 'testing' stamp: 'camila 9/10/2023 19:40:25' overrides: 50659756!
isNegative
	^value < 0.! !
!Fraccion methodsFor: 'testing' stamp: 'camila 9/10/2023 19:40:45' overrides: 50659756!
isNegative
	^denominator < 0 .! !
!Numero methodsFor: 'testing' stamp: 'camila 9/10/2023 19:40:54' prior: 50659756!
isNegative
	 ^ self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:40:58'!
PASSED!

----SNAPSHOT----(10 September 2023 19:41:00) CuisUniversity-5981.image priorSource: 10527417!

----SNAPSHOT----(10 September 2023 19:41:23) CuisUniversity-5981.image priorSource: 10531772!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:41:35' overrides: 50659721!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:41:35' overrides: 50659721!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:41:35' prior: 50659721!
// aDivisor

	self subclassResponsibility! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:42:09' prior: 50660775 overrides: 50660791!
// aDivisor 
	^self class with: value // aDivisor integerValue.! !

----SNAPSHOT----(10 September 2023 19:42:22) CuisUniversity-5981.image priorSource: 10531867!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:42:31' overrides: 50659745!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:42:31' overrides: 50659745!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:42:31' prior: 50659745 overrides: 16902975!
printOn: aStream

	self subclassResponsibility! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:42:49' prior: 50660806 overrides: 50660825!
printOn: aStream
	
		aStream print: value.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/10/2023 19:43:02' prior: 50660815 overrides: 50660825!
printOn: aStream
	
	
	 aStream 
			print: numerator;
			nextPut: $/;
			print: denominator.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:43:18'!
PASSED!

----SNAPSHOT----(10 September 2023 19:43:26) CuisUniversity-5981.image priorSource: 10532834!
!Entero methodsFor: 'accessing' stamp: 'camila 9/10/2023 19:44:33' overrides: 50659796!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !

!methodRemoval: Numero #integerValue stamp: 'camila 9/10/2023 19:44:42'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value!
!Entero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:45:02' overrides: 50659807!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Fraccion methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:45:02' overrides: 50659807!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Numero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:45:02' prior: 50659807 overrides: 16901772!
= anObject

	self subclassResponsibility! !
!Entero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:49:36' prior: 50660919 overrides: 50660943!
= anObject

	^value = anObject integerValue.! !
!Fraccion methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:49:53' prior: 50660931 overrides: 50660943!
= anObject

	^(numerator * anObject denominator) = (denominator * anObject numerator)! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:49:58'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:49:58'!
PASSED!
!Entero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:50:36' overrides: 50659818!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Fraccion methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:50:36' overrides: 50659818!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:50:36' prior: 50659818 overrides: 16901788!
hash

	self subclassResponsibility! !
!Entero methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:50:50' prior: 50661016 overrides: 50661031!
hash
	
		^value hash .! !
!Fraccion methodsFor: 'comparing' stamp: 'camila 9/10/2023 19:51:00' prior: 50661023 overrides: 50661031!
hash
	^(numerator hash / denominator hash) hash.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:51:08'!
PASSED!

!methodRemoval: Numero #type stamp: 'camila 9/10/2023 19:51:17'!
type
	
	^type!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/10/2023 19:51:21'!
PASSED!

----SNAPSHOT----(10 September 2023 19:51:24) CuisUniversity-5981.image priorSource: 10535979!

----STARTUP---- (11 September 2023 19:22:29) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #Fraccion stamp: 'camila 9/11/2023 19:57:00'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/11/2023 19:57:00'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'camila 9/11/2023 19:57:00'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'camila 9/11/2023 19:57:00'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 19:58:57'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 19:58:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 19:58:57'!
ERROR!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:01:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:01:20'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:01:20'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:03:32'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:03:32'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:04:04'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:04:04'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:04:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:04:04'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:09:19' prior: 50661583 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self Class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: (anAdder denominator  * value + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:09:29'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:09:29'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:09:44' prior: 50662115 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: (anAdder denominator  * value + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:09:51'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:09:51'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:10:53' prior: 50662132 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: (anAdder denominator  * self integer value + anAdder numerator) over: (anAdder denominator). 
	 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:11:00' prior: 50662149 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: (anAdder denominator  * self integerValue + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:11:09'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:11:09'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:11:09'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:12:06'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:12:52' prior: 50662160 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: (value * anAdder denominator  + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:12:54'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:12:54'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:12:54'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:13:12'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:13:44'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:14:10' prior: 50662315 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: ((value * anAdder denominator)  + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:14:16'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:14:16'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:14:47' prior: 50662473 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: ((anAdder denominator * value)  + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:14:56'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:14:56'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:17:02' prior: 50661577 overrides: 50661507!
* aMultiplier 
	
	^self class with: value * aMultiplier value.
	! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:17:11'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:17:11'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' prior: 50662507 overrides: 50661507!
* aMultiplier 
	
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:17:56' prior: 50662490 overrides: 50661512!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	^Fraccion with: ((anAdder denominator * self value)  + anAdder numerator) over: (anAdder denominator). 
	 
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:17:58'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:17:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:17:58'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:18:05'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:18:05'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:18:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:18:05'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:21:35' prior: 50661705 overrides: 50661512!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [^ anAdder + self]. 

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:21:41'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:23:18' prior: 50662520 overrides: 50661507!
* aMultiplier 
	
	(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with:(self value *aMultiplier numerator )  over: (aMultiplier denominator )].
	^self class with: value * aMultiplier integerValue
	! !

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:23:26'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:24:15' prior: 50661698 overrides: 50661507!
* aMultiplier 
	
	(aMultiplier  isKindOf: Entero) ifTrue: [^aMultiplier * self].
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:24:23'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:25:33' prior: 50661600!
// aDivisor 
	
	(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^self class with: value // aDivisor integerValue! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:25:36'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:25:36'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:25:36'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:25:36'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:25:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:25:36'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:26:12' prior: 50661595 overrides: 50661521!
/ aDivisor 
	
	(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:26:13'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:26:13'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:26:13'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:26:13'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:26:13'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:26:13'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:27:46' prior: 50661727 overrides: 50661521!
/ aDivisor 
	(aDivisor isKindOf: Entero) ifTrue: [^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value)  ].
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)! !

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:28:09'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:28:28'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:29:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:30:06'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:26'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:30:33'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:30:33'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:30:33'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:30:33'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:31:00'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:31:00'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:31:00'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:31:00'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:31:00'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:33:51' prior: 50661589 overrides: 50661516!
- aSubtrahend 
	(aSubtrahend isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator].
	^ self class with: value - aSubtrahend integerValue.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:33:52'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:33:52'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:37:10'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:38:03' prior: 50661716 overrides: 50661516!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [^aSubtrahend - self].
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator 
! !

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:38:10'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:38:10'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:46:46' prior: 50663638 overrides: 50661516!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [
		^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator ].
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator 
! !

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:47:03'!
PASSED!

----SNAPSHOT----(11 September 2023 20:47:08) CuisUniversity-5981.image priorSource: 10544382!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:48:19' prior: 50662526 overrides: 50661512!
+ anAdder 
	(anAdder isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((anAdder denominator * self value)  + anAdder numerator) over: (anAdder denominator). ].
	^self class with: value + anAdder integerValue.
	
	 
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:48:24'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 20:54:11'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:58:27' prior: 50663823 overrides: 50661512!
+ anAdder 
	anAdder sumarEntero: self. 
	(anAdder isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((anAdder denominator * self value)  + anAdder numerator) over: (anAdder denominator). ].
	^self class with: value + anAdder integerValue.
	
	 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:59:08' prior: 50664117 overrides: 50661512!
+ anAdder 
	^anAdder sumarEntero: self. 
	"(anAdder isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((anAdder denominator * self value)  + anAdder numerator) over: (anAdder denominator). ].
	^self class with: value + anAdder integerValue."
	
	 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:59:26'!
sumarEntero: anAdder
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 20:59:46' prior: 50664140!
sumarEntero: anAdder
	^Fraccion with: ((anAdder denominator * self value)  + anAdder numerator) over: (anAdder denominator). ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:00:13'!
sumarEntero: anAdder
	
	^self class with: value + anAdder integerValue.
	
	 
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 21:00:24'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 21:00:24'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 21:00:53'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:01:50' prior: 50664144!
sumarEntero: anAdder
	^Fraccion with: ((self denominator * anAdder value)  + self numerator) over: (self denominator). ! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 21:02:11'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:02:52' prior: 50662819 overrides: 50661512!
+ anAdder 
	
	^anAdder sumarFraccion: self.
	"| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [^ anAdder + self]. 

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator "! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:03:39'!
sumarFraccion: anAdder 
	
	| newNumerator newDenominator |

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:04:14'!
sumarFraccion: anAdder
	
	^anAdder + self. 
	
	 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:04:59' prior: 50664201!
sumarFraccion: anAdder
	
	^anAdder sumarEntero: self. 
	
	 
! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 21:05:09'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:05:46' prior: 50662835 overrides: 50661507!
* aMultiplier 

	aMultiplier multiplicarEntero: self.
	
	"(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with:(self value *aMultiplier numerator )  over: (aMultiplier denominator )].
	^self class with: value * aMultiplier integerValue"
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:06:17'!
multiplicarEntero: aMultiplier 
	
	^self class with: value * aMultiplier integerValue.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:07:27'!
multiplicarEntero: aMultiplier
	
	^Fraccion with:(self numerator *aMultiplier value )  over: (self denominator )! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:07:35' prior: 50664215 overrides: 50661507!
* aMultiplier 

	^aMultiplier multiplicarEntero: self.
	
	"(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with:(self value *aMultiplier numerator )  over: (aMultiplier denominator )].
	^self class with: value * aMultiplier integerValue"
	! !

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 21:07:43'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:08:11' prior: 50662849 overrides: 50661507!
* aMultiplier 
	^aMultiplier multiplicarFraccion: self.
	"(aMultiplier  isKindOf: Entero) ifTrue: [^aMultiplier * self].
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)"
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:08:48'!
multiplicarFraccion: aMultiplier 

	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:09:26'!
multiplicarFraccion: aMultiplier 
	
	^aMultiplier multiplicarEntero: self.
	! !

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 21:10:01'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:10:09' prior: 50664129 overrides: 50661512!
+ anAdder 
	^anAdder sumarEntero: self. 
	
	 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:10:13' prior: 50664240 overrides: 50661507!
* aMultiplier 

	^aMultiplier multiplicarEntero: self.
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:10:20' prior: 50664255 overrides: 50661507!
* aMultiplier 
	^aMultiplier multiplicarFraccion: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:10:24' prior: 50664178 overrides: 50661512!
+ anAdder 
	
	^anAdder sumarFraccion: self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/11/2023 21:10:31'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/11/2023 21:10:32'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/11/2023 21:10:32'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:11:18' prior: 50663012 overrides: 50661521!
/ aDivisor 
	^ aDivisor dividirConEntero: self.
	"(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:12:32'!
dividirConEntero: numeroADividir.
	^Fraccion with: self over: numeroADividir.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:12:46' prior: 50664457!
dividirConEntero: numeroADividir.
	^Fraccion with: numeroADividir over: self value.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:13:26' prior: 50664447 overrides: 50661521!
/ aDivisor 
	^ aDivisor divideA: self.
	"(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:15:04'!
divideA: numeroADividir
	"^ numeroADividir divideA: self.
	(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:15:44' prior: 50664470 overrides: 50661521!
/ aDivisor 
	^ aDivisor divideAUnEntero: self.
	"(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/11/2023 21:15:51'!
divideAUnEntero: numeroADividir
	"^ numeroADividir divideA: self.
	(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !

----SNAPSHOT----(11 September 2023 21:51:23) CuisUniversity-5981.image priorSource: 10629375!

----STARTUP---- (12 September 2023 15:56:11) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:01:12' prior: 50664490 overrides: 50661521!
/ aDivisor 
	^ aDivisor m: self.
	"(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:03:04'!
m: enteroQueSeQuiereDividir
^ Fraccion with:(enteroQueSeQuiereDividir value *  denominator) over: numerator.
"^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)	"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:05:01'!
dividirAEsteEntero: enteroQueSeQuiereDividir
^ Fraccion with:(enteroQueSeQuiereDividir value *  denominator) over: numerator.
"^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)	"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:05:48'!
m: enteroQueQuieroDividir 
	^Fraccion with: enteroQueQuieroDividir over: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:06:42'!
dividirAEsteEntero: enteroQueQuieroDividir 
	^Fraccion with: enteroQueQuieroDividir over: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:06:49' prior: 50664518 overrides: 50661521!
/ aDivisor 
	^ aDivisor dividirAEsteEntero: self.
	"(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:06:55'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:07:30' prior: 50663163 overrides: 50661521!
/ aDivisor 
	^aDivisor m: self.
	"(aDivisor isKindOf: Entero) ifTrue: [^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value)  ].
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:08:33' prior: 50664546!
m: fraccionQueQuieroDividir
^ Fraccion with: (fraccionQueQuieroDividir numerator )  over: (fraccionQueQuieroDividir denominator * self value).
	"^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value) " ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:09:07'!
dividirAEstaFraccion: fraccionQueQuieroDividir
^ Fraccion with: (fraccionQueQuieroDividir numerator )  over: (fraccionQueQuieroDividir denominator * self value).
	"^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value) " ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:10:40'!
n: fraccionQueQuieroDividir
^(fraccionQueQuieroDividir numerator *  denominator) / (fraccionQueQuieroDividir denominator *  numerator)
"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:10:50'!
dividirAEstaFraccion: fraccionQueQuieroDividir
^(fraccionQueQuieroDividir numerator *  denominator) / (fraccionQueQuieroDividir denominator *  numerator)
"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:10:55' prior: 50664573 overrides: 50661521!
/ aDivisor 
	^aDivisor dividirAEstaFraccion: self.
	"(aDivisor isKindOf: Entero) ifTrue: [^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value)  ].
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:11:04'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:12:05'!
PASSED!

!methodRemoval: Entero #divideAUnEntero: stamp: 'camila 9/12/2023 16:12:24'!
divideAUnEntero: numeroADividir
	"^ numeroADividir divideA: self.
	(aDivisor isKindOf: Fraccion) ifTrue: [^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)].
	^Fraccion with: self over: aDivisor"!

!methodRemoval: Entero #dividirConEntero: stamp: 'camila 9/12/2023 16:12:32'!
dividirConEntero: numeroADividir.
	^Fraccion with: numeroADividir over: self value.!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55' prior: 50662861!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:13:58' prior: 50663479 overrides: 50661516!
- aSubtrahend 
	aSubtrahend k: self.
	"(aSubtrahend isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator].
	^ self class with: value - aSubtrahend integerValue."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:14:57'!
k: enteroAlQueHayQueRestar
^Fraccion with: ((enteroAlQueHayQueRestar *  denominator ) -   numerator) over:  denominator
"^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:15:05'!
restateAEsteEntero: enteroAlQueHayQueRestar
^Fraccion with: ((enteroAlQueHayQueRestar *  denominator ) -   numerator) over:  denominator
"^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:16:38'!
k: enteroAlQueHayQueRestar
^  enteroAlQueHayQueRestar - self.
"^ self class with: value - aSubtrahend integerValue."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:16:55'!
restateAEsteEntero: enteroAlQueHayQueRestar
^  enteroAlQueHayQueRestar - self.
"^ self class with: value - aSubtrahend integerValue."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:17:02' prior: 50664665 overrides: 50661516!
- aSubtrahend 
	aSubtrahend restateAEsteEntero: self.
	"(aSubtrahend isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator].
	^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:17:07'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:17:07'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:17:31' prior: 50664704!
restateAEsteEntero: enteroAlQueHayQueRestar
^  self class with: enteroAlQueHayQueRestar - self.
"^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:17:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:17:37'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:17:46' prior: 50664810!
restateAEsteEntero: enteroAlQueHayQueRestar
^  self class with: enteroAlQueHayQueRestar - self value.
"^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:17:52'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:17:52'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:18:10' prior: 50664904!
restateAEsteEntero: enteroAlQueHayQueRestar
^  self class with: enteroAlQueHayQueRestar integerValue - self value.
"^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:18:13'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:18:13'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:18:22'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:18:22'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:18:39'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:18:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:19:34'!
ERROR!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:21:06'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:23:32' prior: 50664998!
restateAEsteEntero: enteroAlQueHayQueRestar
^  self class with: enteroAlQueHayQueRestar integerValue - self integerValue.
"^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:23:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:23:37'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:23:37'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:23:48'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:23:48'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:23:55'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:23:55'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:24:16' prior: 50665437!
restateAEsteEntero: enteroAlQueHayQueRestar
^  self class with: enteroAlQueHayQueRestar integerValue -  value.
"^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:24:23'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:24:23'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:26:03' prior: 50664712 overrides: 50661516!
- aSubtrahend 
	^aSubtrahend restateAEsteEntero: self.
	"(aSubtrahend isKindOf: Fraccion) ifTrue: [
		^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator].
	^ self class with: value - aSubtrahend integerValue."! !

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:26:10'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:26:53' prior: 50663659 overrides: 50661516!
- aSubtrahend 
	
	^aSubtrahend p: self.
	"End of block expected ->| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [
		^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator ].
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:28:19'!
restateAEstaFraccion: restateAEstaFraccion
^Fraccion with:  restateAEstaFraccion numerator - (restateAEstaFraccion denominator *  value )  over:  restateAEstaFraccion denominator. 
"^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator "! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:28:44' prior: 50665628!
restateAEstaFraccion: fraccionAlQueHayQueRestar
^Fraccion with:  fraccionAlQueHayQueRestar numerator - (fraccionAlQueHayQueRestar denominator *  value )  over:  fraccionAlQueHayQueRestar denominator. 
"^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator "! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:30:04'!
p: fraccionALaQueQuieroRestar

| newNumerator newDenominator |
	
	newNumerator := (fraccionALaQueQuieroRestar numerator *  denominator) - (fraccionALaQueQuieroRestar denominator *  numerator).
	newDenominator := fraccionALaQueQuieroRestar denominator *  denominator.
	
	^newNumerator / newDenominator

"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:30:13'!
restateAEstaFraccion: fraccionALaQueQuieroRestar

| newNumerator newDenominator |
	
	newNumerator := (fraccionALaQueQuieroRestar numerator *  denominator) - (fraccionALaQueQuieroRestar denominator *  numerator).
	newDenominator := fraccionALaQueQuieroRestar denominator *  denominator.
	
	^newNumerator / newDenominator

"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:30:19' prior: 50665611 overrides: 50661516!
- aSubtrahend 
	
	^aSubtrahend restateAEstaFraccion: self.
	"End of block expected ->| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [
		^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator ].
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:30:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:36'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:48'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:30:48'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:31:37'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:32:29' prior: 50665640!
restateAEstaFraccion: fraccionAlQueHayQueRestar
^Fraccion with:  fraccionAlQueHayQueRestar numerator - (fraccionAlQueHayQueRestar denominator *  self integerValue )  over:  fraccionAlQueHayQueRestar denominator. 
"^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator "! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:32:55' prior: 50665867!
restateAEstaFraccion: fraccionAlQueHayQueRestar
^Fraccion with:  fraccionAlQueHayQueRestar numerator - (fraccionAlQueHayQueRestar denominator *  self )  over:  fraccionAlQueHayQueRestar denominator. 
"^Fraccion with:  self numerator - (self denominator * aSubtrahend value )  over:  self denominator "! !

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:04'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:13'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:33:17'!
PASSED!

----SNAPSHOT----(12 September 2023 16:33:21) CuisUniversity-5981.image priorSource: 10651490!

!methodRemoval: Entero #k: stamp: 'camila 9/12/2023 16:33:33'!
k: enteroAlQueHayQueRestar
^  enteroAlQueHayQueRestar - self.
"^ self class with: value - aSubtrahend integerValue."!

!methodRemoval: Entero #m: stamp: 'camila 9/12/2023 16:33:36'!
m: fraccionQueQuieroDividir
^ Fraccion with: (fraccionQueQuieroDividir numerator )  over: (fraccionQueQuieroDividir denominator * self value).
	"^ Fraccion with: (self numerator )  over: (self denominator * aDivisor value) " !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:33:43'!
PASSED!

!methodRemoval: Fraccion #m: stamp: 'camila 9/12/2023 16:33:49'!
m: enteroQueSeQuiereDividir
^ Fraccion with:(enteroQueSeQuiereDividir value *  denominator) over: numerator.
"^ Fraccion with:(self value * aDivisor denominator) over:(aDivisor numerator)	"!

!methodRemoval: Fraccion #k: stamp: 'camila 9/12/2023 16:33:53'!
k: enteroAlQueHayQueRestar
^Fraccion with: ((enteroAlQueHayQueRestar *  denominator ) -   numerator) over:  denominator
"^Fraccion with: ((self value * aSubtrahend denominator ) - aSubtrahend  numerator) over: aSubtrahend denominator"!

!methodRemoval: Fraccion #n: stamp: 'camila 9/12/2023 16:33:57'!
n: fraccionQueQuieroDividir
^(fraccionQueQuieroDividir numerator *  denominator) / (fraccionQueQuieroDividir denominator *  numerator)
"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"!

!methodRemoval: Fraccion #p: stamp: 'camila 9/12/2023 16:34:00'!
p: fraccionALaQueQuieroRestar

| newNumerator newDenominator |
	
	newNumerator := (fraccionALaQueQuieroRestar numerator *  denominator) - (fraccionALaQueQuieroRestar denominator *  numerator).
	newDenominator := fraccionALaQueQuieroRestar denominator *  denominator.
	
	^newNumerator / newDenominator

"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 16:34:05'!
PASSED!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'camila 9/12/2023 16:37:21'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'camila 9/12/2023 16:37:53'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'camila 9/12/2023 16:37:55'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'no messages' stamp: 'camila 9/12/2023 16:39:03' overrides: 50661605!
fibonacci

	| one  |
	one := Entero with: 1.
	 ^one.
! !
!EnteroNegativo methodsFor: 'no messages' stamp: 'camila 9/12/2023 16:39:20' overrides: 50661605!
fibonacci! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'camila 9/12/2023 16:39:46' prior: 50666424 overrides: 50661605!
fibonacci
	^self error: Entero negativeFibonacciErrorDescription .	! !
!Uno methodsFor: 'no messages' stamp: 'camila 9/12/2023 16:41:31' overrides: 50661605!
fibonacci
	| one |
	one := Entero with: 1.
	^one! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:42:45' prior: 50661605!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

"	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:44:37' prior: 50666439!
fibonacci

	| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

"	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Cero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:45:14' prior: 50666419 overrides: 50666455!
fibonacci

	| one  |
	one := Uno with: 1.
	 ^one.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:48:39' prior: 50666455!
fibonacci

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:48:50' prior: 50666476!
fibonacci

	self subclassResponsibility 

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Cero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:49:36' prior: 50666471 overrides: 50666491!
fibonacci

	| one  |
	one := Entero with: 1.
	 ^one.
! !

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:49:58'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:49:58'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:54:44'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 16:54:44'!
ERROR!
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:11:56' prior: 50661674!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with: 0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^self new initalizeWith: aValue.
	! !
!Cero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:13:12' overrides: 50666525!
with: aValue
	! !
!Cero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:13:49' prior: 50666541 overrides: 50666525!
with: aValue
	^ self new initializeWith: 0.! !
!Uno class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:14:24' overrides: 50666525!
with: aValue
	^self new initalizeWith: 1.! !
!EnteroNegativo class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:15:47' overrides: 50666525!
with: aValue
	^self new initializeWith: aValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 17:16:37' prior: 50666491!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'camila 9/12/2023 17:17:19'!
Entero subclass: #Cero
	instanceVariableNames: 'renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'initialization' stamp: 'camila 9/12/2023 17:17:19'!
initializeWith: aRenameMe1 
	self shouldBeImplemented.
	renameMe1 := aRenameMe1.! !
!Cero methodsFor: 'initialization' stamp: 'camila 9/12/2023 17:17:53' prior: 50666590!
initializeWith: aRenameMe1 
	self .
	renameMe1 := aRenameMe1.! !
!Cero methodsFor: 'initialization' stamp: 'camila 9/12/2023 17:18:09' prior: 50666596!
initializeWith: aRenameMe1 
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:19:31' prior: 50666525!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero initalizeWith: 0 ].
	(aValue = 1) ifTrue: [ ^ Uno initalizeWith: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo initalizeWith: 0 ].
	^self new initalizeWith: aValue.
	! !
!Cero methodsFor: 'initialization' stamp: 'camila 9/12/2023 17:20:34' prior: 50666601!
initializeWith: aRenameMe1 
	
	! !

Entero subclass: #Cero
	instanceVariableNames: 'cero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'camila 9/12/2023 17:20:53'!
Entero subclass: #Cero
	instanceVariableNames: 'cero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'initialization' stamp: 'camila 9/12/2023 17:21:19' prior: 50666622!
initializeWith: aRenameMe1 
	cero :=aRenameMe1.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:22:28' prior: 50666606!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^self new initalizeWith: aValue.
	! !

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'camila 9/12/2023 17:23:32'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: 'valorNegativo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativo methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 17:23:27'!
initializeWith: aRenameMe1 
	valorNegativo :=aRenameMe1.
	! !

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'camila 9/12/2023 17:23:49'!
Entero subclass: #Uno
	instanceVariableNames: 'uno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 17:23:48'!
initializeWith: aRenameMe1 
	uno :=aRenameMe1.
	! !

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 17:24:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 17:24:09'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 17:24:14'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 17:24:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 17:24:30'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 17:24:30'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 17:24:50'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 17:26:21'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 17:27:01' prior: 50666561!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	"self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	"
	"(self isZero or: [self isOne]) ifTrue: [^one]."
	
	^ (self - one) fibonacci + (self - two) fibonacci

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 17:27:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 17:29:38'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 17:29:38'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 17:29:47'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/12/2023 17:29:47'!
FAILURE!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/12/2023 17:29:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/12/2023 17:29:47'!
ERROR!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/12/2023 17:29:47'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/12/2023 17:29:47'!
ERROR!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/12/2023 17:29:47'!
ERROR!
!Entero class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2016 22:53' prior: 50666642!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/12/2023 17:30:29'!
PASSED!

----SNAPSHOT----(12 September 2023 17:31:57) CuisUniversity-5981.image priorSource: 10700473!

----STARTUP---- (13 September 2023 20:19:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


Entero subclass: #EnteroPositivo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroPositivo
	instanceVariableNames: 'valorPositivo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'camila 9/13/2023 20:22:06'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: 'valorPositivo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:22:28' prior: 50666886!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^self new initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:34' prior: 50667034!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:46' prior: 50667050!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:52' prior: 50667066!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: aValue ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!EnteroPositivo class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:23:17' overrides: 50667082!
with: aValue! !
!EnteroPositivo class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:23:31' prior: 50667098 overrides: 50667082!
with: aValue
^self new initializeWith: aValue.! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'camila 9/13/2023 20:24:09'!
initializeWith: aRenameMe1 
	valorPositivo :=aRenameMe1.
	! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'camila 9/13/2023 20:26:16' overrides: 50666711!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:48:50' prior: 50666711!
fibonacci

	self subclassResponsibility 

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:27:43' prior: 50667082!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: aValue ].
	^EnteroPositivo with: aValue.
	! !
!EnteroNegativo methodsFor: 'nil' stamp: 'camila 9/13/2023 20:29:56' overrides: 50661648!
isNegative
^true.! !
!EnteroPositivo methodsFor: 'nil' stamp: 'camila 9/13/2023 20:30:07' overrides: 50661648!
isNegative
^false.! !
!Uno methodsFor: 'nil' stamp: 'camila 9/13/2023 20:30:15' overrides: 50661648!
isNegative
^false.! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:30:38' prior: 50661648 overrides: 50661535!
isNegative
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:30:47' prior: 50667165 overrides: 50661535!
isNegative
	
	^self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:30' prior: 50667170 overrides: 50661535!
isNegative
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:37' prior: 50661652 overrides: 50661539!
isOne
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:45' prior: 50661656 overrides: 50661543!
isZero
	
self subclassResponsibility .! !
!Cero methodsFor: 'nil' stamp: 'camila 9/13/2023 20:31:55' overrides: 50667185!
isZero
	^true! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:10' overrides: 50667185!
isZero
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:23' overrides: 50667185!
isZero
	^false.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:40' overrides: 50667180!
isOne
	^false! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:52' overrides: 50667180!
isOne
^false! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:33:03' overrides: 50667180!
isOne
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:33:15' overrides: 50667180!
isOne
	^true! !

----STARTUP---- (14 September 2023 15:10:26) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'camila 9/14/2023 15:10:32'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: 'valorPositivo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'camila 9/14/2023 15:10:32'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: 'valorPositivo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/12/2023 17:22:28' prior: 50666886!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^self new initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:34' prior: 50667236!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 0 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:46' prior: 50667252!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: 0 ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:22:52' prior: 50667268!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: aValue ].
	^EnteroPositivo initalizeWith: aValue.
	! !
!EnteroPositivo class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:23:17' overrides: 50667284!
with: aValue! !
!EnteroPositivo class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:23:31' prior: 50667300 overrides: 50667284!
with: aValue
^self new initializeWith: aValue.! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'camila 9/13/2023 20:24:09'!
initializeWith: aRenameMe1 
	valorPositivo :=aRenameMe1.
	! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'camila 9/13/2023 20:26:16' overrides: 50666711!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'camila 9/12/2023 16:48:50' prior: 50666711!
fibonacci

	self subclassResponsibility 

	"| one two |
	
	one := Uno with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !
!Entero class methodsFor: 'instance creation' stamp: 'camila 9/13/2023 20:27:43' prior: 50667284!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [ ^ Cero with:0 ].
	(aValue = 1) ifTrue: [ ^ Uno with: 1 ].
	(aValue <0) ifTrue: [ ^ EnteroNegativo with: aValue ].
	^EnteroPositivo with: aValue.
	! !
!EnteroNegativo methodsFor: 'nil' stamp: 'camila 9/13/2023 20:29:56' overrides: 50661648!
isNegative
^true.! !
!EnteroPositivo methodsFor: 'nil' stamp: 'camila 9/13/2023 20:30:07' overrides: 50661648!
isNegative
^false.! !
!Uno methodsFor: 'nil' stamp: 'camila 9/13/2023 20:30:15' overrides: 50661648!
isNegative
^false.! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:30:38' prior: 50661648 overrides: 50661535!
isNegative
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:30:47' prior: 50667367 overrides: 50661535!
isNegative
	
	^self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:30' prior: 50667372 overrides: 50661535!
isNegative
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:37' prior: 50661652 overrides: 50661539!
isOne
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'camila 9/13/2023 20:31:45' prior: 50661656 overrides: 50661543!
isZero
	
self subclassResponsibility .! !
!Cero methodsFor: 'nil' stamp: 'camila 9/13/2023 20:31:55' overrides: 50667387!
isZero
	^true! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:10' overrides: 50667387!
isZero
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:23' overrides: 50667387!
isZero
	^false.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:40' overrides: 50667382!
isOne
	^false! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:32:52' overrides: 50667382!
isOne
^false! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:33:03' overrides: 50667382!
isOne
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'camila 9/13/2023 20:33:15' overrides: 50667382!
isOne
	^true! !

!classRemoval: #Fraccion stamp: 'camila 9/14/2023 15:25:54'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'camila 9/14/2023 15:25:55'!
Entero subclass: #Uno
	instanceVariableNames: 'uno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositivo stamp: 'camila 9/14/2023 15:25:55'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: 'valorPositivo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'camila 9/14/2023 15:25:55'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: 'valorNegativo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'camila 9/14/2023 15:25:55'!
Entero subclass: #Cero
	instanceVariableNames: 'cero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/14/2023 15:25:55'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'camila 9/14/2023 15:25:55'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'camila 9/14/2023 15:25:56'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'camila 9/14/2023 15:27:03'!
PASSED!

----SNAPSHOT----(14 September 2023 15:43:04) CuisUniversity-5981.image priorSource: 10731506!

----STARTUP---- (14 September 2023 17:44:00) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 18:43:00' prior: 50668097 overrides: 50667905!
fibonacci
	^self error: Entero negativeFibonacciErrorDescription
! !

!classRemoval: #Fraccion stamp: 'camila 9/14/2023 20:33:37'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroUno stamp: 'camila 9/14/2023 20:33:38'!
Entero subclass: #EnteroUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'camila 9/14/2023 20:33:38'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroCero stamp: 'camila 9/14/2023 20:33:38'!
Entero subclass: #EnteroCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #ElRestoDeLosEnteros stamp: 'camila 9/14/2023 20:33:38'!
Entero subclass: #ElRestoDeLosEnteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/14/2023 20:33:38'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'camila 9/14/2023 20:33:38'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'camila 9/14/2023 20:33:39'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Stack-Exercise.st----!

----SNAPSHOT----(14 September 2023 20:34:00) CuisUniversity-5981.image priorSource: 10778406!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/14/2023 20:49:40'!
ERROR!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Exercise.st----!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NameOfSubclass category: 'Stack-Exercise' stamp: 'camila 9/14/2023 20:58:24'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 20:58:30'!
Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack class methodsFor: 'instance creation' stamp: 'camila 9/14/2023 20:58:48' overrides: 16785646!
new
	! !

!classRemoval: #NameOfSubclass stamp: 'camila 9/14/2023 21:00:53'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!methodRemoval: OOStack class #new stamp: 'camila 9/14/2023 21:01:12'!
new
	!
!OOStack methodsFor: 'no messages' stamp: 'camila 9/14/2023 21:01:38'!
initializeStack
	
	stack := OrderedCollection new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:01:41' prior: 50669635!
initializeStack
	
	stack := OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:01:42' prior: 50669640!
initializeStack
	
	stack := OrderedCollection new! !
!OOStack class methodsFor: 'instance creation' stamp: 'camila 9/14/2023 21:02:29' overrides: 16785646!
new
	"self"! !
!OOStack class methodsFor: 'instance creation' stamp: 'camila 9/14/2023 21:03:24' prior: 50669650 overrides: 16785646!
new
	"^self"! !
!OOStack class methodsFor: 'instance creation' stamp: 'camila 9/14/2023 21:04:45' prior: 50669655 overrides: 16785646!
new
	^self initializeStack! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:04:55'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:04:55'!
ERROR!

----STARTUP---- (14 September 2023 21:05:22) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:08:09'!
Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Exercise.st----!

----SNAPSHOT----(14 September 2023 21:09:03) CuisUniversity-5981.image priorSource: 10785547!

----SNAPSHOT----(14 September 2023 21:09:35) CuisUniversity-5981.image priorSource: 10813723!
!OOStack methodsFor: 'no messages' stamp: 'camila 9/14/2023 21:10:06'!
initalize
	
	stack := OrderedCollection new! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:10:14'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:10:14'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:13:23'!
new
	
	stack := OrderedCollection new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:14:08'!
isEmpty
	^stack size = 0.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:14:15'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:14:15'!
ERROR!

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:14:46'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OrderedCollection subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:14:52'!
OrderedCollection subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----STARTUP---- (14 September 2023 21:15:21) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


OrderedCollection subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:15:43'!
OrderedCollection subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OrderedCollection subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:15:49'!
OrderedCollection subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'no messages' stamp: 'camila 9/14/2023 21:16:15' overrides: 50344891!
isEmpty
	^self isEmpty .! !

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:17:49'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:20:31'!
Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:20:24' overrides: 16920235!
initialize
	^stack := OrderedCollection new.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:21:09'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:22:09'!
push: aValue
	"self" ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:23:10' prior: 50669643!
push: aValue
	"self add aValue"! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:23:55' prior: 50669647!
push: aValue
	stack add aValue! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:24:07'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:24:07'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:24:19'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:24:48' prior: 50669635 overrides: 16920235!
initialize
	^OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:25:16' prior: 50669652!
push: aValue
	self class add aValue! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:25:30'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:25:35'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:25:35'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:26:03' prior: 50669667 overrides: 16920235!
initialize
	^OrderedCollection  basicNew ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:26:33' prior: 50669687 overrides: 16920235!
initialize
	^OrderedCollection  basicNew initialize ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:26:39'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:26:39'!
ERROR!

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:27:10'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:27:40'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:27:40'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/14/2023 21:28:27'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:29:01'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:29:19' prior: 50669692 overrides: 16920235!
initialize
	^OrderedCollection initialize ! !

Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/14/2023 21:30:36'!
Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:30:52' prior: 50669759 overrides: 16920235!
initialize
	^stack := OrderedCollection new! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:31:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:31:21'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:31:21'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:32:16'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:32:38'!
push! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:34:03' prior: 50669672!
push: aValue
	stack add aValue! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/14/2023 21:34:12'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:34:17'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:34:17'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:35:01'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:35:01'!
ERROR!

!methodRemoval: OOStack #push stamp: 'camila 9/14/2023 21:35:57'!
push!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:36:50' prior: 50669613!
isEmpty
	^stack isEmpty .! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:37:05'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:37:05'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:39:33'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:39:33'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:40:35' prior: 50669797!
push: aValue
	stack add: aValue! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:41:08'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:41:08'!
ERROR!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!

OrderedCollection  new add: 2!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:43:26' prior: 50669776 overrides: 16920235!
initialize
	stack := OrderedCollection new! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/14/2023 21:43:37'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:43:54'!
pop
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:44:25' prior: 50669864!
pop
	"stack if"! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:45:20' prior: 50669868!
pop
	stack removeFirst ! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/14/2023 21:45:25'!
PASSED!

----SNAPSHOT----(14 September 2023 21:47:13) CuisUniversity-5981.image priorSource: 10813818!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:52:59' prior: 50669872!
pop
	stack removeLast ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/14/2023 21:53:03' prior: 50669883!
pop
	^stack removeLast ! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/14/2023 21:53:10'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/14/2023 21:53:15'!
PASSED!

----SNAPSHOT----(14 September 2023 21:54:59) CuisUniversity-5981.image priorSource: 10823300!

----SNAPSHOT----(14 September 2023 22:07:48) CuisUniversity-5981.image priorSource: 10823882!

----STARTUP---- (15 September 2023 22:11:21) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/15/2023 22:11:26'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/15/2023 22:11:26'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/15/2023 22:11:26'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:11:26'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/15/2023 22:11:26'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:11:26'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/15/2023 22:11:26'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:11:26'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/15/2023 22:11:26'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:11:26'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:11:38'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/15/2023 22:11:45'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:11:51'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:11:51'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:12:42'!
top
	^stack removeFirst ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:12:54' prior: 50669953!
top
	^stack last ! !

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/15/2023 22:13:03'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/15/2023 22:13:09'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/15/2023 22:13:09'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/15/2023 22:13:48'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:14:13' overrides: 16901663!
size
	^stack size! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/15/2023 22:14:23'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:15:46' prior: 50669887!
pop
	stack isEmpty ifTrue: [^'mensaje error'].
	stack isEmpty ifFalse : [^stack removeLast]. ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:16:01' prior: 50669981!
pop
	stack isEmpty ifTrue:  [^'mensaje error'].
	stack isEmpty ifFalse: [^stack removeLast]. ! !

----SNAPSHOT----(15 September 2023 22:16:17) CuisUniversity-5981.image priorSource: 10823977!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:18:35'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:18:35'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:20:15' prior: 50669957!
top
	stack isEmpty ifTrue:  [^'mensaje error'].
	stack isEmpty ifFalse: [^stack last]. 
	 ! !

----SNAPSHOT----(15 September 2023 22:20:23) CuisUniversity-5981.image priorSource: 10826944!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:24:20' prior: 50669987!
pop
	stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:24:28'!
signalCantPopEmptyStack
! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:25:05' prior: 50670019!
signalCantPopEmptyStack
	self error: self class stackEmptyErrorDescription 
! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:25:12'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'camila 9/15/2023 22:25:44' prior: 50670004!
top
	stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack last]. 
	 ! !

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/15/2023 22:25:59'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/15/2023 22:26:10'!
PASSED!

----SNAPSHOT----(15 September 2023 22:26:25) CuisUniversity-5981.image priorSource: 10827485!

----SNAPSHOT----(15 September 2023 22:27:14) CuisUniversity-5981.image priorSource: 10828679!

----STARTUP---- (17 September 2023 18:42:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 18:42:42'!
PASSED!

----SNAPSHOT----(17 September 2023 18:47:03) CuisUniversity-5981.image priorSource: 10828774!

!classRemoval: #Fraccion stamp: 'camila 9/17/2023 18:51:49'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroUno stamp: 'camila 9/17/2023 18:51:50'!
Entero subclass: #EnteroUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'camila 9/17/2023 18:51:50'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroCero stamp: 'camila 9/17/2023 18:51:50'!
Entero subclass: #EnteroCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #ElRestoDeLosEnteros stamp: 'camila 9/17/2023 18:51:50'!
Entero subclass: #ElRestoDeLosEnteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'camila 9/17/2023 18:51:50'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'camila 9/17/2023 18:51:50'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'camila 9/17/2023 18:51:51'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Solution-3.5.st----!

----SNAPSHOT----(17 September 2023 18:52:10) CuisUniversity-5981.image priorSource: 10830061!

!classRemoval: #CustomerBook stamp: 'camila 9/17/2023 18:52:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'camila 9/17/2023 18:52:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'camila 9/17/2023 18:52:22'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'camila 9/17/2023 18:52:22'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/CodigoRepetido-SolucionConSetup.st----!

----SNAPSHOT----(17 September 2023 18:54:23) CuisUniversity-5981.image priorSource: 10862097!

----SNAPSHOT----(17 September 2023 19:06:57) CuisUniversity-5981.image priorSource: 10873601!

Object subclass: #StackState
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:16:24'!
Object subclass: #StackState
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----SNAPSHOT----(17 September 2023 19:16:46) CuisUniversity-5981.image priorSource: 10873696!
!StackState methodsFor: 'no messages' stamp: 'camila 9/17/2023 19:17:41' overrides: 16920235!
initialize
	state := 'vacio'! !

StackState subclass: #StateVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StateVacio category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:18:09'!
StackState subclass: #StateVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StateConCosas category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:18:16'!
StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'stack state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:19:17'!
Object subclass: #OOStack
	instanceVariableNames: 'stack state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 19:20:20' prior: 50669856 overrides: 16920235!
initialize
	stack := OrderedCollection new! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 19:21:35' prior: 50671512 overrides: 16920235!
initialize
	stack := OrderedCollection new! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 19:23:22' prior: 50671517 overrides: 16920235!
initialize
	stack := OrderedCollection new.
	state := StateVacio new! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 19:23:27'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 19:23:27'!
PASSED!
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 19:23:45' prior: 50669820!
isEmpty
	^state isEmpty .! !
!StateVacio methodsFor: 'no messages' stamp: 'camila 9/17/2023 19:23:54'!
isEmpty
	^true! !
!StateConCosas methodsFor: 'no messages' stamp: 'camila 9/17/2023 19:24:07'!
isEmpty
	^false! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 19:24:17'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 19:24:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 19:24:17'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 19:24:23'!
PASSED!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:24:46' prior: 50669837!
push: aValue
	stack add: aValue.
	state := StateConCosas new.! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 19:25:15' prior: 50671561!
isEmpty
	^state isEmpty .
	"^stack isEmpty"! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:26:01' prior: 50670013!
pop
	state popFromThisStack: stack
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:26:14' prior: 50671622!
pop
	state m: stack
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:28:22'!
m: stack
	! !
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:28:46' prior: 50671637!
m: stack
	"^signalCantPopEmptyStack"! !
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:29:29' prior: 50671641!
m: stack
	stack signalCantPopEmptyStack .
	"^signalCantPopEmptyStack"! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:32:57'!
m: stack
	^stack removeLast 
	"stack isEmpty ifFalse: [^stack removeLast]."! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:33:09'!
popFromThisStack: stack
	^stack removeLast 
	"stack isEmpty ifFalse: [^stack removeLast]."! !
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:33:17'!
popFromThisStack: stack
	stack signalCantPopEmptyStack .
	"^signalCantPopEmptyStack"! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:33:24' prior: 50671630!
pop
	state popFromThisStack: stack
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 19:33:32'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 19:33:55'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:34:01'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:34:01'!
FAILURE!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:35:39' prior: 50671669!
pop
	^state popFromThisStack: stack
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:35:45'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:35:45'!
FAILURE!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:38:30' prior: 50671690!
pop
	state popFromThisStack: stack.
	stack isEmpty ifTrue: [state := StateVacio new].
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:40:36' prior: 50671704!
pop
	state popFromThisStack: stack.
	state updateStatus.
	"stack isEmpty ifTrue: [state := StateVacio new]."
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:41:01' prior: 50671713!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	stack isEmpty ifTrue: [state := StateVacio new].
	
	! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:41:07'!
PASSED!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:41:34' prior: 50671723!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	| popItem |
	popItem = state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	stack isEmpty ifTrue: [state := StateVacio new].
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:41:44' prior: 50671737!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	| popItem |
	popItem = state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	stack isEmpty ifTrue: [state := StateVacio new].
	
	^popItem.
	
	! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:42:07'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:42:07'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:42:40'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:42:40'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 19:42:54'!
ERROR!
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:43:19' prior: 50671657!
popFromThisStack: stack
	^stack removeLast 
	"stack isEmpty ifFalse: [^stack removeLast]."! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:45:43' prior: 50671749!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	stack isEmpty ifTrue: [state := StateVacio new].
	
	
	! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 19:46:49' prior: 50670033!
top
	state topFromThisStack.
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack last]." 
	 ! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 19:47:10' prior: 50671795!
top
	state topFromThisStack: stack.
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack last]." 
	 ! !

Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:47:45'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:48:16'!
topFromThisStack: stack
	stack signalCantPopEmptyStack .
	"^signalCantPopEmptyStack"! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:48:39'!
topFromThisStack: stack
	^stack last 
	"stack isEmpty ifFalse: [^stack removeLast]."! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:51:07' prior: 50671778!
popFromThisStack: stack
	^stack removeLast 
	"stack isEmpty ifFalse: [^stack removeLast]."
		
		
	   "pop: 
	    | elem |
	    elem := stack last.
	    colaboradorInterno = OOStack new: stack sin El ultimo elemento
	    ^elem"! !

Object subclass: #StackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:52:10'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StateConCosas category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:54:06'!
StackState subclass: #StateConCosas
	instanceVariableNames: 'stackSaved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:54:05'!
pop
	 | elem |
	    elem := stackSaved last.
	    stackSaved = OOStack new: stackSaved
	    ^elem! !

StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StateConCosas category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:54:19'!
StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackState
	instanceVariableNames: 'stackSaved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'camila 9/17/2023 19:54:24'!
Object subclass: #StackState
	instanceVariableNames: 'stackSaved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:55:04' prior: 50671871!
pop
	 | elem |
	    elem := stackSaved removeLast.
	    stackSaved = OOStack new: stackSaved
	    ^elem! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 19:55:44' prior: 50671784!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	"stack isEmpty ifTrue: [state := StateVacio new]."
	
	
	! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 19:56:58'!
initializeWith
	stack := OrderedCollection new.
	state := StateVacio new! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 19:57:48' prior: 50671901!
pop
	 | elem |
	    elem := stackSaved removeLast.
	    stackSaved = OOStack with: stackSaved
	    ^elem! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 19:58:09'!
initializeWith: oldStack
	stack := OrderedCollection with: oldStack.
	state := StateVacio new! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 20:01:43' prior: 50671930!
initializeWith: oldStack
	oldStack isEmpty ifTrue:
	 [	state := StateVacio new.
		stack := OrderedCollection new. ].
	"tiene cosas"
	state := StateConCosas new.
	stack := oldStack.! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 20:01:49' prior: 50671936!
initializeWith: oldStack
	oldStack isEmpty ifTrue:
	 [	state := StateVacio new.
		stack := OrderedCollection new. ].
	
	state := StateConCosas new.
	stack := oldStack.! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:06:49' prior: 50671924!
pop
	 | elem |
	    elem := stackSaved removeLast.
	    stackSaved = OOStack with: stackSaved stackElement
	    ^elem! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/17/2023 20:07:01'!
stackElement
	^stack! !

!methodRemoval: OOStack #initializeWith stamp: 'camila 9/17/2023 20:07:40'!
initializeWith
	stack := OrderedCollection new.
	state := StateVacio new!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:08:07' prior: 50671907!
pop
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	^state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new]."
	"stack isEmpty ifTrue: [state := StateVacio new]."
	
	
	! !
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:09:35' prior: 50671833!
popFromThisStack: stack
	| elem |
	   elem := stackSaved removeLast.
	   stackSaved = OOStack with: stackSaved stackElement
	   ^elem! !
!StackState methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:10:02'!
initializeWith: stackQueHaceReferencia
	stackSaved := stackQueHaceReferencia! !

!methodRemoval: StateConCosas #m: stamp: 'camila 9/17/2023 20:13:42'!
m: stack
	^stack removeLast 
	"stack isEmpty ifFalse: [^stack removeLast]."!

!methodRemoval: StateConCosas #pop stamp: 'camila 9/17/2023 20:13:50'!
pop
	 | elem |
	    elem := stackSaved removeLast.
	    stackSaved = OOStack with: stackSaved stackElement
	    ^elem!

!methodRemoval: StateVacio #m: stamp: 'camila 9/17/2023 20:14:43'!
m: stack
	stack signalCantPopEmptyStack .
	"^signalCantPopEmptyStack"!

----SNAPSHOT----(17 September 2023 20:14:47) CuisUniversity-5981.image priorSource: 10874158!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:16:04' prior: 50671970!
pop
	^state popFromThisStack: stack.
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:16:45' prior: 50672012!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	state update
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:16:50' prior: 50672020!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	state update.
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:18:08' prior: 50672030!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	state := [state update].
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:18:23' prior: 50672040!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	state := [state update: stack ].
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Solution-3.6.st----!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Numero-Solution-3.6.st----!
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 20:21:38' prior: 50671617!
isEmpty
	"^state isEmpty ."
	^stack isEmpty! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:22:33' prior: 50672050!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	stack ifEmpty: [state := StateVacio new.]
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:22:39'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:22:39'!
ERROR!
!StateConCosas methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:23:14' prior: 50671982!
popFromThisStack: stack
^stack removeLast .
	"| elem |
	   elem := stackSaved removeLast.
	   stackSaved = OOStack with: stackSaved stackElement
	   ^elem"! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:23:23'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:23:23'!
ERROR!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:24:00' prior: 50674232!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	stack ifEmpty: [state := StateVacio new.]
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:24:20' prior: 50674265!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	stack isEmpty ifTrue: [state := StateVacio new.]
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:24:26'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:24:26'!
ERROR!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:24:42' prior: 50674276!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	stack isEmpty ifTrue: [state := StateVacio new.].
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:24:48'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:24:52'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:25:17'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 20:25:17'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:25:17'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 20:25:17'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:25:17'!
ERROR!
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:30:28' prior: 50674293!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	"stack isEmpty ifTrue: [state := StateVacio new.]."
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/17/2023 20:31:22' prior: 50674344!
pop
	| topElement |
	topElement := state popFromThisStack: stack.
	
	stack isEmpty ifTrue: [state := StateVacio new.].
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !

Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:32:52'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!methodRemoval: StackState #initialize stamp: 'camila 9/17/2023 20:33:06'!
initialize
	state := 'vacio'!

!methodRemoval: StackState #initializeWith: stamp: 'camila 9/17/2023 20:33:11'!
initializeWith: stackQueHaceReferencia
	stackSaved := stackQueHaceReferencia!
!OOStack methodsFor: 'observation' stamp: 'camila 9/17/2023 20:34:13' prior: 50671802!
top
	^state topFromThisStack: stack.
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack last]." 
	 ! !

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:34:20'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 20:34:23'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:34:23'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 20:34:23'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:34:23'!
ERROR!
!StateVacio methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:34:43' prior: 50671821!
topFromThisStack: stack
	^stack signalCantPopEmptyStack .
	"^signalCantPopEmptyStack"! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'camila 9/17/2023 20:35:05'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:35:05'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'camila 9/17/2023 20:35:05'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'camila 9/17/2023 20:35:05'!
ERROR!

----SNAPSHOT----(17 September 2023 20:37:35) CuisUniversity-5981.image priorSource: 10891469!

OOStack subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:37:44'!
OOStack subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:37:53'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'OOStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:38:02'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'OOStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'camila 9/17/2023 20:38:25' overrides: 16920235!
initialize
	OOStack := OOStack new.! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'ooStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:38:46'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'ooStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'OOElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:39:01'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'OOElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:39:09' prior: 50674511 overrides: 16920235!
initialize
	OOElement := OOStack new.! !
!SentenceFinderByPrefixTest methodsFor: 'no messages' stamp: 'camila 9/17/2023 20:40:01'!
test01StackShouldBeEmptyWhenCreated

	| sentenceFinder |
	
	sentenceFinder := SentenceFinderByPrefix  new.
	
	self assert: sentenceFinder isEmpty! !

!testRun: #SentenceFinderByPrefixTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:40:09'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:40:09'!
ERROR!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'StringStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'camila 9/17/2023 20:42:39'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'StringStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:42:43' prior: 50674542 overrides: 16920235!
initialize
	StringStack := OOStack new.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:43:19'!
test01IfPrefixNotInStackReturnEmpty

	| sentenceFinder |
	
	sentenceFinder := SentenceFinderByPrefix  new.
	
	self assert: sentenceFinder isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:43:51' prior: 50674582!
test01IfPrefixNotInStackReturnEmpty

	| sentenceFinder  prefix|
	
	sentenceFinder := SentenceFinderByPrefix  new.
	prefix := 'Test'
	
	self assert: sentenceFinder find prefix ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:43:59' prior: 50674591!
test01IfPrefixNotInStackReturnEmpty

	| sentenceFinder  prefix|
	
	sentenceFinder := SentenceFinderByPrefix  new.
	prefix := 'Test'.
	
	self assert: sentenceFinder find prefix ! !

!methodRemoval: SentenceFinderByPrefixTest #test01StackShouldBeEmptyWhenCreated stamp: 'camila 9/17/2023 20:44:07'!
test01StackShouldBeEmptyWhenCreated

	| sentenceFinder |
	
	sentenceFinder := SentenceFinderByPrefix  new.
	
	self assert: sentenceFinder isEmpty!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:44:45'!
test02IfPrefixInStackReturnAllThatMatch

	| sentenceFinder  prefix|
	
	sentenceFinder := SentenceFinderByPrefix new.
	prefix := 'Test'.
	
	self assert: sentenceFinder find prefix ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:48:38' prior: 50674618!
test02IfPrefixInStackReturnAllThatMatch

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	"prefixToFind := 'Wint'."
	
	self assert: sentenceFinder find.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:50:42'!
test03EmptyPrefixReturnError

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := ''.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	
	self assert: sentenceFinder find.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:51:07'!
test03PrefixWithBlanksReturnError

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'winter is nice'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	
	self assert: sentenceFinder find.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:51:13'!
test04PrefixWithBlanksReturnError

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'winter is nice'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	
	self assert: sentenceFinder find.! !

!methodRemoval: SentenceFinderByPrefixTest #test03PrefixWithBlanksReturnError stamp: 'camila 9/17/2023 20:51:18'!
test03PrefixWithBlanksReturnError

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'winter is nice'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	
	self assert: sentenceFinder find.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:51:44'!
test05StackOrderIsPreserved

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'winte'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	
	self assert: sentenceFinder find.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:52:00' prior: 50674628!
test02IfPrefixInStackReturnAllThatMatch

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'Wint'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	self assert: sentenceFinder find.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'camila 9/17/2023 20:52:13' prior: 50674601!
test01IfPrefixNotInStackReturnEmpty

	| sentenceFinder  sentenceStack prefixToFind |
	
	sentenceStack := OOStack new.
	sentenceStack push: 'winter is coming'.
	sentenceStack push: 'winning is everything'.
	sentenceStack push: 'Winter is here'.
	
	prefixToFind := 'test'.
	sentenceFinder := SentenceFinderByPrefix with: sentenceStack andPrefix:prefixToFind .
	
	self assert: sentenceFinder find.! !

----SNAPSHOT----(17 September 2023 20:54:49) CuisUniversity-5981.image priorSource: 10970193!

----STARTUP---- (18 September 2023 16:59:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #StateVacio stamp: 'camila 9/18/2023 17:04:10'!
StackState subclass: #StateVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StateConCosas stamp: 'camila 9/18/2023 17:04:10'!
StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackState stamp: 'camila 9/18/2023 17:04:10'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'camila 9/18/2023 17:04:10'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'StringStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'camila 9/18/2023 17:04:10'!
Object subclass: #OOStack
	instanceVariableNames: 'stack state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'camila 9/18/2023 17:04:11'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'camila 9/18/2023 17:04:11'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Stack-Exercise.st----!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Stack-Exercise-Nuestro.st----!

!classRemoval: #StateVacio stamp: 'camila 9/18/2023 17:09:21'!
StackState subclass: #StateVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StateConCosas stamp: 'camila 9/18/2023 17:09:21'!
StackState subclass: #StateConCosas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackState stamp: 'camila 9/18/2023 17:09:21'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'camila 9/18/2023 17:09:21'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'StringStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackWithElement stamp: 'camila 9/18/2023 17:09:21'!
OOStackElement subclass: #OOStackWithElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackEmptyElement stamp: 'camila 9/18/2023 17:09:22'!
OOStackElement subclass: #OOStackEmptyElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackElement stamp: 'camila 9/18/2023 17:09:22'!
Object subclass: #OOStackElement
	instanceVariableNames: 'previous element size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'camila 9/18/2023 17:09:22'!
Object subclass: #OOStack
	instanceVariableNames: 'stack state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'camila 9/18/2023 17:09:22'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'camila 9/18/2023 17:09:22'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/Stack-Exercise-Nuestro.st----!

Object subclass: #OOStack
	instanceVariableNames: 'elements state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'camila 9/18/2023 17:20:24'!
Object subclass: #OOStack
	instanceVariableNames: 'elements state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'camila 9/18/2023 17:20:30' prior: 50675911 overrides: 16920235!
initialize
	elements := OrderedCollection new.
	state := StateVacio new! !
!OOStack methodsFor: 'initialization' stamp: 'camila 9/18/2023 17:20:35' prior: 50675916!
initializeWith: oldStack
	oldStack isEmpty ifTrue:
	 [	state := StateVacio new.
		elements := OrderedCollection new. ].
	
	state := StateConCosas new.
	elements := oldStack.! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/18/2023 17:20:42' prior: 50675929!
isEmpty
	"^state isEmpty ."
	^elements isEmpty! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/18/2023 17:20:46' prior: 50675934 overrides: 16901663!
size
	^elements size! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/18/2023 17:20:49' prior: 50675937!
top
	^state topFromThisStack: elements.
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack last]." 
	 ! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/18/2023 17:20:58' prior: 50675944!
pop
	| topElement |
	topElement := state popFromThisStack: elements.
	
	elements isEmpty ifTrue: [state := StateVacio new.].
	^topElement
	
	"stack isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	stack isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/18/2023 17:21:02' prior: 50675954!
push: aValue
	elements add: aValue.
	state := StateConCosas new.! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/18/2023 17:21:23' prior: 50676097!
top
	^state topFromThisStack: elements.
	"elements isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	elements isEmpty ifFalse: [^stack last]." 
	 ! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/18/2023 17:21:43' prior: 50676105!
pop
	| topElement |
	topElement := state popFromThisStack: elements.
	
	elements isEmpty ifTrue: [state := StateVacio new.].
	^topElement
	
	"elements isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	elements isEmpty ifFalse: [^stack removeLast]. "
	
	
	! !
!OOStack methodsFor: 'observation' stamp: 'camila 9/18/2023 17:22:14' prior: 50676121!
top
	^state topFromThisStack: elements.
	"elements isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	elements isEmpty ifFalse: [^elements last]." 
	 ! !
!OOStack methodsFor: 'actions' stamp: 'camila 9/18/2023 17:22:55' prior: 50676129!
pop
	| topElement |
	topElement := state popFromThisStack: elements.
	
	elements isEmpty ifTrue: [state := StateVacio new.].
	^topElement
	
	"elements isEmpty ifTrue:  [^self signalCantPopEmptyStack].
	elements isEmpty ifFalse: [^elements removeLast]. "
	
	
	! !

----SNAPSHOT----(18 September 2023 20:06:12) CuisUniversity-5981.image priorSource: 10979405!

----SNAPSHOT----(18 September 2023 20:06:23) CuisUniversity-5981.image priorSource: 11024262!

----STARTUP---- (18 September 2023 20:35:52) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2022-1C-Parcial-1.st----!
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 20:58:06' prior: 50676808!
advance: aTimeLapse
	
	| ix cars |
	cars := track cars asOrderedCollection.
	ix := 1.
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 20:59:00' prior: 50677153!
advance: aTimeLapse
	
	| ix cars |
	cars := track cars asOrderedCollection.
	ix := 1.
	
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:01:07' prior: 50677165!
advance: aTimeLapse
	
	| ix cars |
	cars := track cars asOrderedCollection.
	ix := 1.
	cars m. 
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:02:28'!
m:conditionBlock do: advanceCar
	conditionBlock whileTrue: advanceCar! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:03:08' prior: 50677177!
advance: aTimeLapse
	
	| ix cars |
	cars := track cars asOrderedCollection.
	ix := 1.
	self m:[ix <= cars size] do: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:03:42'!
ifAllPass:conditionBlock do: advanceCar
	conditionBlock whileTrue: advanceCar! !

!methodRemoval: GrandPrix #m:do: stamp: 'camila 9/18/2023 21:05:12'!
m:conditionBlock do: advanceCar
	conditionBlock whileTrue: advanceCar!
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:05:31' prior: 50677194!
advance: aTimeLapse
	
	| ix cars |
	cars := track cars asOrderedCollection.
	ix := 1.
	self ifAllPass:[ix <= cars size] do: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/18/2023 21:07:05' prior: 50677219!
advance: aTimeLapse
	
	| cars |
	cars := track cars asOrderedCollection.
	cars collect: [:car | self relocate: car after: aTimeLapse. ]
	
	"cars := track cars asOrderedCollection.
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:07:48'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:07:48'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:11:35' prior: 50677094!
cars

	

	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:15:55' prior: 50677339!
cars

	| allCars|
	allCars := Set new.
	sectors do:[ | sector |sector | allCars addAll: sector cars.]
	^allCars.
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:16:27' prior: 50677348!
cars

	| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars.]
	^allCars.
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:16:30' prior: 50677360!
cars

	| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars.]
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:17:05'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:17:05'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:17:05'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:17:05'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:17:05'!
PASSED!

----SNAPSHOT----(18 September 2023 21:18:08) CuisUniversity-5981.image priorSource: 11024357!
!Track methodsFor: 'testing' stamp: 'camila 9/18/2023 21:19:52' prior: 50677110!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	
	
	"| inc ix sector |
	inc := false.
	ix := 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc"
	! !
!Track methodsFor: 'testing' stamp: 'camila 9/18/2023 21:21:28' prior: 50677478!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	sectors detect: [:sectorCar | sectorCar = aCar] ifNone: [^false.].
	
	"| inc ix sector |
	inc := false.
	ix := 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:21:44'!
FAILURE!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:21:44'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:21:44'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:21:44'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:21:44'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:21:44'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:21:44'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:22:09' prior: 50677372!
cars

	"| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars.]
	^allCars."
	
	| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:22:15'!
FAILURE!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:22:15'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:22:15'!
FAILURE!
!Track methodsFor: 'testing' stamp: 'camila 9/18/2023 21:23:26' prior: 50677494!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	sectors detect: [:sector | sector includes: aCar] ifNone: [^false.].
	
	"| inc ix sector |
	inc := false.
	ix := 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:23:31'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:23:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:23:31'!
ERROR!
!Track methodsFor: 'testing' stamp: 'camila 9/18/2023 21:26:54' prior: 50677710!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	sectors detect: [:sector | sector includes: aCar] ifNone: [^false.].
	^true.
	
	"| inc ix sector |
	inc := false.
	ix := 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:27:00'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:27:00'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:32:01' prior: 50677102!
length

	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."
! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:32:33' prior: 50677933!
length
	

	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."

! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:33:04' prior: 50677942!
length
	
	^sectors inject: 0 into: [:sum :element | sum + element].
	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."

! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:49:28' prior: 50677951!
length
	
	^sectors sum: [:sector | sector length ] ifEmpty:[0 * kilometer].
	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."

! !
!Track methodsFor: 'accessing' stamp: 'camila 9/18/2023 21:56:49' prior: 50677603!
cars

	| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars; yourself]
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/18/2023 21:56:57'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/18/2023 21:56:57'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/18/2023 21:56:57'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/18/2023 21:56:57'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/18/2023 21:56:57'!
PASSED!

----STARTUP---- (19 September 2023 00:06:22) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:11:33' prior: 50677372!
cars

	| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars; yourself.]
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:11:42'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:11:42'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:11:42'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:11:42'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:11:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:11:42'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:12:09' prior: 50678080!
cars

	| allCars|
	allCars := Set new.
	sectors do:[: sector| allCars addAll: sector cars]
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:14:04' prior: 50678183!
cars

	| allCars|
	allCars := Set new.
	"sectors do:[: sector| allCars addAll: sector cars]"
	allCars inject: OrderedCollection new into: [:cars :sector | allCars addAll: sector cars. cars].
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:15:03' prior: 50678195!
cars

	| allCars|
	sectors inject: OrderedCollection new into: [:cars :sector | allCars addAll: sector cars. cars].
	^allCars.
	
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:15:13'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:15:13'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:15:13'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:15:13'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:15:13'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:15:13'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:15:38' prior: 50678210!
cars

	"| allCars|
	sectors inject: OrderedCollection new into: [:cars :sector | allCars addAll: sector cars. cars].
	^allCars."
	
	| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars.
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:15:46'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:15:46'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:16:16' prior: 50677102!
length

	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."
! !
!Track methodsFor: 'accessing' stamp: 'camila 9/19/2023 00:17:13' prior: 50678418!
length


	^sectors sum:[:sector | sector length]  ifEmpty: [ 0 * kilometer] .
	"| acc ix |

	acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:18:25'!
PASSED!

----SNAPSHOT----(19 September 2023 00:18:31) CuisUniversity-5981.image priorSource: 11066370!
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:26:58' prior: 50677044!
positionOf: aCar

	| accumulatedLength |
	accumulatedLength := 0 * kilometer.

	sectors do: [:sector  | 
			(sector includes: aCar) ifTrue: [^ accumulatedLength + (sector positionOf: aCar).] .
			accumulatedLength + sector length ].


	

	"| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:27:10'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:27:10'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:27:10'!
FAILURE!
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:28:05' prior: 50678533!
positionOf: aCar

	| accumulatedLength |
	accumulatedLength := 0 * kilometer.

	sectors do: [:sector  | 
			(sector includes: aCar) ifTrue: [^ accumulatedLength + (sector positionOf: aCar).] .
			accumulatedLength := accumulatedLength + sector length ].


	

	"| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:28:13'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:28:13'!
PASSED!
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:28:45' prior: 50678649!
positionOf: aCar

	| accumulatedLength |
	accumulatedLength := 0 * kilometer.

	sectors do: [:sector  | 
			(sector includes: aCar) ifTrue: [^ accumulatedLength + (sector positionOf: aCar).] .
			accumulatedLength := accumulatedLength + sector length ].

	"| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."! !
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:34:47' prior: 50677057!
put: aCar at: aPosition

	| distanceToCar |
	
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].

	self remove: aCar.
	distanceToCar := 0 * kilometer.
	
	sectors do: [:sector | aPosition > distanceToCar + sector length ifFalse: [ sector put: aCar at: aPosition - distanceToCar].
			distanceToCar = distanceToCar + sector length.].

	"[aPosition > (acc +  sector length)] whileTrue: [
		acc := acc + sector length.
		ix := ix + 1.
		sector := sectors at: ix.
	].

	sector put: aCar at: aPosition - acc."
	

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:34:55'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:34:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:34:55'!
PASSED!
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:36:46' prior: 50678782!
put: aCar at: aPosition

	| distanceToCar |
	
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].

	self remove: aCar.
	distanceToCar := 0 * kilometer.
	
	sectors do: [:sector | aPosition <= (distanceToCar + sector length) ifTrue: [ ^sector put: aCar at: aPosition - distanceToCar].
			distanceToCar := distanceToCar + sector length.].



"sectors do: [ :sector | 
		aPosition <= (accumulator +  sector length) ifTrue: [ ^sector put: aCar at: aPosition - accumulator].
		accumulator := accumulator + sector length.
	]."
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:36:56'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:36:56'!
PASSED!
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:38:47' prior: 50677085!
sectorOf: aCar ifNone: aBlock

	sectors detect:[:sector | sector includes:aCar]  ifNone: aBlock.

	" | ix |
	
	ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].

	^ aBlock value."! !
!Track methodsFor: 'car position' stamp: 'camila 9/19/2023 00:38:58' prior: 50679006!
sectorOf: aCar ifNone: aBlock

	^sectors detect:[:sector | sector includes:aCar]  ifNone: aBlock.

	" | ix |
	
	ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].

	^ aBlock value."! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:39:04'!
PASSED!

----SNAPSHOT----(19 September 2023 00:40:24) CuisUniversity-5981.image priorSource: 11100118!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:42:51'!
m: turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	turboSequenceClosure value
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:47:19'!
p:speed a: turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:48:31'!
assert:speed after:turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:49:57' prior: 50676532!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self assertSpeedShouldBe: 120 * kilometer / hour 
		after: [ :turboAvailableCar | turboAvailableCar activateTurbo ].
	
	"self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed."! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:50:09'!
assertSpeedShouldBe:speed after:turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.! !

!methodRemoval: FormulaOneTest #assert:after: stamp: 'camila 9/19/2023 00:50:16'!
assert:speed after:turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.!

!methodRemoval: FormulaOneTest #m: stamp: 'camila 9/19/2023 00:50:21'!
m: turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	turboSequenceClosure value
	!

!methodRemoval: FormulaOneTest #p:a: stamp: 'camila 9/19/2023 00:50:25'!
p:speed a: turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:50:59' prior: 50679190!
assertSpeedShouldBe:speed after:turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	turboSequenceClosure.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.! !

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:51:15'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:51:15'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 00:52:01' prior: 50679263!
assertSpeedShouldBe:speed after:turboSequenceClosure

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	turboSequenceClosure value.
	
	self assert: schumacher isTurboActivated.
	self assert: speed equals: schumacher speed.! !

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:52:11'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:52:11'!
ERROR!
!FormulaOneTest methodsFor: 'tests' stamp: 'HAW 5/2/2022 14:48:08' prior: 50679179!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 00:53:07'!
PASSED!

Sector subclass: #SectorTurboAllowed
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #SectorTurboAllowed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #SectorTurboAllowed category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:54:37'!
Sector subclass: #SectorTurboAllowed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #SectorTurboDenied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #SectorTurboDenied category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:55:22'!
Sector subclass: #SectorTurboDenied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!SectorTurboAllowed methodsFor: 'turbo' stamp: 'camila 9/19/2023 00:56:04' overrides: 50676917!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !
!SectorTurboDenied methodsFor: 'turbo' stamp: 'camila 9/19/2023 00:56:04' overrides: 50676917!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !
!Sector methodsFor: 'turbo' stamp: 'camila 9/19/2023 00:56:04' prior: 50676917!
activateTurboTo: aCarToActivateTurboTo

	self subclassResponsibility! !
!SectorTurboDenied methodsFor: 'turbo' stamp: 'camila 9/19/2023 00:56:39' prior: 50679477 overrides: 50679494!
activateTurboTo: aCarToActivateTurboTo

	^self error: Sector turboNotAllowedErrorDescription.
	
! !
!SectorTurboAllowed methodsFor: 'turbo' stamp: 'camila 9/19/2023 00:56:51' prior: 50679459 overrides: 50679494!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	
	positionOfCarAhead := self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !

Object subclass: #TurboState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboState category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:58:47'!
Object subclass: #TurboState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboState subclass: #TurboActive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboActive category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:59:37'!
TurboState subclass: #TurboActive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboState subclass: #TurboInactive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboInactive category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:59:44'!
TurboState subclass: #TurboInactive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Object subclass: #TurboState
	instanceVariableNames: 'fromThisCar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboState category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 00:59:54'!
Object subclass: #TurboState
	instanceVariableNames: 'fromThisCar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 01:01:09'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations turbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'initialization' stamp: 'camila 9/19/2023 01:01:06' prior: 50676674!
initializeDrivenBy: aDriver 
	
	driver := aDriver.
	turbo := TurboInactive new.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	
	
	"driver := aDriver.
	turboActivated := false.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0."
	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'percentage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #NameOfSubclass category: 'ISW1-2022-1C-Parcial-1' stamp: 'camila 9/19/2023 01:01:55'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'percentage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NameOfSubclass stamp: 'camila 9/19/2023 01:02:06'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'percentage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:03:27' prior: 50676718!
activateTurbo

	turbo activate.
	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ]."
	
	currentSector activateTurboTo: self.
! !
!TurboState methodsFor: 'no messages' stamp: 'camila 9/19/2023 01:03:38'!
turbo
	self subclassResponsibility .! !
!TurboState methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:03:50'!
activate
	self subclassResponsibility .! !

!methodRemoval: TurboState #turbo stamp: 'camila 9/19/2023 01:03:58'!
turbo
	self subclassResponsibility .!
!TurboActive methodsFor: 'no messages' stamp: 'camila 9/19/2023 01:05:21'!
turbo
	fromThisCar signalTurboAlreadyActive.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:05:47'!
signalTurboAlreadyActive
	^self error: self turboAlreadyActivatedErrorDescription.
	
	
! !
!TurboInactive methodsFor: 'no messages' stamp: 'camila 9/19/2023 01:07:09' overrides: 50679625!
activate! !

----SNAPSHOT----(19 September 2023 01:08:43) CuisUniversity-5981.image priorSource: 11119048!
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:10:35' prior: 50679613!
activateTurbo

	turbo activate.
	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ]."

! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:11:22' prior: 50679643 overrides: 50679625!
activate
	fromThisCar allowedToActivateTurbo! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:11:33'!
allowedToActivateTurbo
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:11:57' prior: 50679662!
allowedToActivateTurbo
	currentSector activateTurboTo: self.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:12:15' prior: 50676725!
deactivateTurbo
	turbo deactivate
	"turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false"! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:12:51'!
deactivate
! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:13:24' prior: 50679679!
deactivate
	fromThisCar signalTurboAlreadyDeactivated! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:13:48' overrides: 50679625!
activate
	fromThisCar signalTurboAlreadyActive.! !

!methodRemoval: TurboActive #turbo stamp: 'camila 9/19/2023 01:13:48'!
turbo
	fromThisCar signalTurboAlreadyActive.!
!FormulaOneCar methodsFor: 'signals' stamp: 'camila 9/19/2023 01:14:18'!
signalTurboAlreadyDeactivated
	^self error: self turboAlreadydeActivatedErrorDescription .
	
	
! !
!TurboState methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:14:28'!
deactivate
	self subclassResponsibility .! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:14:48' overrides: 50679702!
deactivate
	fromThisCar deactivateTurbo.! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:15:17' prior: 50679707 overrides: 50679702!
deactivate
	fromThisCar deactivateTurboStatus.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:15:54'!
deactivateTurboStatus
	turbo := TurboInactive new! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:16:09'!
allowedToDeactivateTurbo
	turbo := TurboInactive new! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:16:21' prior: 50679713 overrides: 50679702!
deactivate
	fromThisCar allowedToDeactivateTurbo.! !

!methodRemoval: FormulaOneCar #deactivateTurboStatus stamp: 'camila 9/19/2023 01:16:57'!
deactivateTurboStatus
	turbo := TurboInactive new!
!FormulaOneCar methodsFor: 'initialization' stamp: 'camila 9/19/2023 01:17:40' prior: 50679582!
initializeDrivenBy: aDriver 
	
	driver := aDriver.
	turbo := TurboInactive new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	
	
	"driver := aDriver.
	turboActivated := false.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0."
	! !
!FormulaOneCar methodsFor: 'moving' stamp: 'camila 9/19/2023 01:19:10' prior: 50676696!
speed

	^turbo totalActivations + speed.
	"turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed"! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:20:49'!
isActive
	^true.! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:20:58'!
isInactive
	^false.! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:21:08'!
isActive
	^false.! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:21:17'!
isInactive
	^true.! !
!FormulaOneCar methodsFor: 'testing' stamp: 'camila 9/19/2023 01:21:31' prior: 50676737!
isTurboActivated
	
	^turbo isActive! !
!FormulaOneCar methodsFor: 'testing' stamp: 'camila 9/19/2023 01:21:35' prior: 50679776!
isTurboActivated
	^turbo isActive! !
!FormulaOneCar methodsFor: 'moving' stamp: 'camila 9/19/2023 01:24:47' prior: 50679749!
speed

	turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
	turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
	turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].

	^speed! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'camila 9/19/2023 01:25:57' prior: 50676746!
activateTurboInSectorWithTurbo
	turbo activate .  ! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'camila 9/19/2023 01:26:05' prior: 50679666!
allowedToActivateTurbo
	currentSector activateTurboTo: self.
	turboActivations := turboActivations + 1! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 01:28:02'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'camila 9/19/2023 01:28:02'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'camila 9/19/2023 01:28:02'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'camila 9/19/2023 01:28:02'!
ERROR!
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 01:28:49' prior: 50679650!
activateTurbo
	
	turbo activate.
	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ]."

! !

----SNAPSHOT----(19 September 2023 01:31:44) CuisUniversity-5981.image priorSource: 11135851!

----STARTUP---- (19 September 2023 22:17:03) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Sector class methodsFor: 'instance creation' stamp: 'camila 9/19/2023 22:19:40'!
withLengthOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ self new initializeOf: aLength ! !
!SectorTurboAllowed class methodsFor: 'instance creation' stamp: 'camila 9/19/2023 22:20:00' overrides: 50679909!
withLengthOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ self new initializeOf: aLength ! !
!SectorTurboDenied class methodsFor: 'instance creation' stamp: 'camila 9/19/2023 22:20:00' overrides: 50679909!
withLengthOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ self new initializeOf: aLength ! !
!Sector class methodsFor: 'instance creation' stamp: 'camila 9/19/2023 22:20:00' prior: 50679909!
withLengthOf: aLength

	self subclassResponsibility! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:20:45' prior: 50676181!
test01SectorLengthMustBePositive

	self 
		should: [ SectorTurboAllowed withLengthOf: 0 * kilometer.]
		raise: Error
		withMessageText: Sector lengthMustBePositiveErrorDescription! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'camila 9/19/2023 22:20:49'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 22:22:37'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:22:45' prior: 50676189!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector := SectorTurboAllowed withLengthOf: 10 * kilometer.
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'camila 9/19/2023 22:22:50'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:23:18' prior: 50676206!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector := SectorTurboDenied withLengthOf: 10*kilometer.
	car := FormulaOneCar drivenBy: #Schumacher.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!TurboActive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 01:13:48' prior: 50679688 overrides: 50679625!
activate
	fromThisCar signalTurboAlreadyActive.! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:27:51' prior: 50679658 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:29:04'!
inTurboSector
	
	"^sector isTurboSector."
	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ]."

! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:29:21' prior: 50680006!
inTurboSector
	
	^currentSector isTurboSector.
	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ]."

! !
!SectorTurboAllowed methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:29:33'!
isTurboSector
	^true.! !
!SectorTurboDenied methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:29:41'!
isTurboSector
	^false.! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:31:13' prior: 50680001 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:32:38' prior: 50680029 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [Sector error turboNotAllowedErrorDescription]
	! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:33:02' prior: 50680036 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [Sector error: Sector turboNotAllowedErrorDescription]
	! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:33:10' prior: 50680046 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [Sector error: Sector turboNotAllowedErrorDescription].
	! !

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:33:19'!
FAILURE!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:33:19'!
FAILURE!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:33:57'!
FAILURE!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:34:26'!
FAILURE!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'camila 9/19/2023 22:37:02' prior: 50679798!
allowedToActivateTurbo
	currentSector activateTurboTo: self.
	turbo := TurboActive  new.
	turboActivations := turboActivations + 1! !

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:37:13'!
FAILURE!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:37:13'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:40:39' prior: 50676221!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := SectorTurboAllowed withLengthOf: 20 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:42:11' prior: 50680056 overrides: 50679625!
activate
	| fromThisCard |
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [^Sector error: Sector turboNotAllowedErrorDescription].
	
	fromThisCar isCarAhead ifTrue:[fromThisCar allowedToActivateTurbo].
	fromThisCard isCarAhead ifFalse:[^Sector error: Sector turboNotAllowedErrorDescription]
	! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:42:22' prior: 50680118 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [^Sector error: Sector turboNotAllowedErrorDescription].
	
	fromThisCar isCarAhead ifTrue:[fromThisCar allowedToActivateTurbo].
	fromThisCar isCarAhead ifFalse:[^Sector error: Sector turboNotAllowedErrorDescription]
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:42:45'!
isCarAhead
	
	^grandPrix isCarAheadOfMe: self.
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:43:02'!
isCarAheadOf: carToCheck! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:43:11' prior: 50680146!
isCarAhead
	
	^grandPrix isCarAheadOf: self.
! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:43:38' prior: 50680150!
isCarAheadOf: carToCheck! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:45:09' prior: 50680159!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:45:16' prior: 50680163!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:47:30' prior: 50680171!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCar].
	
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:47:48' prior: 50680179!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars select:[:car | self locationOf: car < positionOfCar].
	
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:49:13' prior: 50680189!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCar] ifNone:[^false.] 
	
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:49:25' prior: 50680199!
isCarAheadOf: carToCheck
	| cars positionOfCar |
	positionOfCar :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCar] ifNone:[^false.] 
	^true.
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:49:39' prior: 50680209!
isCarAheadOf: carToCheck
	| cars positionOfCarToCheck |
	positionOfCarToCheck :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCarToCheck] ifNone:[^false.] 
	^true.
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'camila 9/19/2023 22:49:54'!
isAnyCarAheadOf: carToCheck
	| cars positionOfCarToCheck |
	
	positionOfCarToCheck :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCarToCheck] ifNone:[^false.] 
	^true.
	! !
!TurboInactive methodsFor: 'as yet unclassified' stamp: 'camila 9/19/2023 22:50:15' prior: 50680133 overrides: 50679625!
activate
	fromThisCar inTurboSector ifTrue:  [fromThisCar allowedToActivateTurbo].
	fromThisCar inTurboSector ifFalse: [^Sector error: Sector turboNotAllowedErrorDescription].
	
	fromThisCar isAnyCarAhead ifTrue:[fromThisCar allowedToActivateTurbo].
	fromThisCar isAnyCarAhead ifFalse:[^Sector error: Sector turboNotAllowedErrorDescription]
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'camila 9/19/2023 22:50:32'!
isAnyCarAhead
	
	^grandPrix isAnyCarAheadOf: self.
! !

!methodRemoval: FormulaOneCar #isCarAhead stamp: 'camila 9/19/2023 22:50:39'!
isCarAhead
	
	^grandPrix isCarAheadOf: self.
!

!methodRemoval: GrandPrix #isCarAheadOf: stamp: 'camila 9/19/2023 22:50:46'!
isCarAheadOf: carToCheck
	| cars positionOfCarToCheck |
	positionOfCarToCheck :=  self locationOf: carToCheck .
	cars := track cars asOrderedCollection.
	
	cars detect:[:car | self locationOf: car < positionOfCarToCheck] ifNone:[^false.] 
	^true.
	!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:51:03'!
FAILURE!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'camila 9/19/2023 22:51:03'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:52:54' prior: 50676292!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := OrderedCollection 
		with: (SectorTurboAllowed withLengthOf: 10 * kilometer)
		with: (SectorTurboDenied withLengthOf: 20 * kilometer).
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'camila 9/19/2023 22:52:59'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:53:37' prior: 50676304!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors := OrderedCollection 
		with: (SectorTurboAllowed withLengthOf: 10 * kilometer)
		with: (SectorTurboDenied withLengthOf: 20 * kilometer).
	
	track := Track withSectors: sectors.
	outside := track length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'camila 9/19/2023 22:54:37' prior: 50676324!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors := OrderedCollection 
		with: (SectorTurboAllowed withLengthOf: 10 * kilometer)
		with: (SectorTurboDenied withLengthOf: 20 * kilometer).
		
	positionInSector2 := 5 * kilometer.
	positionInTrack := sectors first length + positionInSector2.
	
	track := Track withSectors: sectors.
	car := FormulaOneCar drivenBy: #Schumacher.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !

----STARTUP---- (20 September 2023 18:42:12) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2022-2C-1erParcial.st----!

!classRemoval: #TurboInactive stamp: 'camila 9/20/2023 18:42:50'!
TurboState subclass: #TurboInactive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActive stamp: 'camila 9/20/2023 18:42:50'!
TurboState subclass: #TurboActive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboState stamp: 'camila 9/20/2023 18:42:50'!
Object subclass: #TurboState
	instanceVariableNames: 'fromThisCar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'camila 9/20/2023 18:42:50'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #SectorTurboDenied stamp: 'camila 9/20/2023 18:42:51'!
Sector subclass: #SectorTurboDenied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #SectorTurboAllowed stamp: 'camila 9/20/2023 18:42:51'!
Sector subclass: #SectorTurboAllowed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'camila 9/20/2023 18:42:51'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'camila 9/20/2023 18:42:51'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'camila 9/20/2023 18:42:51'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations turbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'camila 9/20/2023 18:42:51'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 18:51:21' prior: 50680704!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	
	pirates do: [ :pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 18:51:27'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 18:51:27'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 18:51:21' prior: 50681023!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	
	pirates do: [ :pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 18:51:21' prior: 50681082!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	
	pirates do: [ :pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 18:51:21' prior: 50681114!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	
	pirates do: [ :pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 18:59:45'!
move: pirate to: aPosition in: terrain
	
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^true. 
			].
			terrain = #Diggable ifTrue: [ ^true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 18:59:53'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 18:59:53'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:01:13' prior: 50681146!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	
	pirates do: [ :pirate |
		acc := acc & (self move: pirate to: aPosition  in: terrain).		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:01:15'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:01:15'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:01:20' prior: 50681228!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	pirates do: [ :pirate |
		acc := acc & (self move: pirate to: aPosition  in: terrain).		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:02:39' prior: 50681267!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := pirates inject: true into: [  :canMove :pirate |
		canMove & (self move: pirate to: aPosition  in: terrain).		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:02:40'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:02:40'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:03:30' prior: 50681279!
moveTo: aPosition

	| everyoneCanMove terrain |
	
	terrain := island terrainAt: aPosition.
	
	everyoneCanMove := pirates inject: true into: [  :canMove :pirate |
		canMove & (self move: pirate to: aPosition  in: terrain).		
	].

	"nos movemos si todos pueden moverse"
	everyoneCanMove ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:05:51' prior: 50681318!
moveTo: aPosition

	| everyoneCanMove terrain |
	
	terrain := island terrainAt: aPosition.
	
	everyoneCanMove := pirates inject: true into: [  :canMove :pirate |
		canMove & (self move: pirate to: aPosition  in: terrain).		
	].

	"nos movemos si todos pueden moverse"
	everyoneCanMove  ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:06:54' prior: 50681178!
move: pirate to: aPosition in: terrain
	
	^pirate moveTo: aPosition in: terrain at: island.
		"(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^true. 
			].
			terrain = #Diggable ifTrue: [ ^true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		]."
		
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:06:56'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:07:52'!
ERROR!
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:08:07'!
moveTo: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:08:17'!
ERROR!
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:09:16' prior: 50681400!
moveTo: aPosition in: terrain at: anIsland 
	 
	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ self drawDirectionTo: aPosition.
				^true. 
			].
	terrain = #Diggable ifTrue: [ ^true ].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:09:19'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:09:21'!
ERROR!
!Filibustero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:09:28'!
moveTo: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !
!Filibustero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:10:00' prior: 50681448!
moveTo: aPosition in: terrain at: anIsland 
	
			terrain = #Tree ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:10:05'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:10:07'!
ERROR!
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:10:13'!
moveTo: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:10:28' prior: 50681493!
moveTo: aPosition in: terrain at: anIsland 
	terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].! !
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:10:34' prior: 50681498!
moveTo: aPosition in: terrain at: anIsland 
	terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ].! !
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:11:07' prior: 50681409!
moveTo: aPosition in: terrain at: anIsland 
	 
	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^true.].
	terrain = #Diggable ifTrue: [ ^true ].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:11:12'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:11:14'!
PASSED!

Object subclass: #Terrain

	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Terrain category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:14:26'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Empty category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:14:52'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Diggable category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:14:56'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Object subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Tree category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:15:07'!
Object subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Tree category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:15:12'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:17:07' prior: 50681506!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMove: self to:aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ]."! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:17:44'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:17:48'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:19:11' prior: 50680836!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^Tree new ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^Diggable new ].
		ix := ix + 1.
	].

	^Empty new.
	
! !
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:20:37' prior: 50681514!
moveTo: aPosition in: terrain at: anIsland 
	 ^terrain canMove: self to:aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^true.].
	terrain = #Diggable ifTrue: [ ^true ]."! !
!Filibustero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:20:49' prior: 50681454!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMove: self to:aPosition at:anIsland .
			"terrain = #Tree ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ]."! !
!Terrain methodsFor: 'no messages' stamp: 'camila 9/20/2023 19:21:13'!
canMove: aPirate  to: aPosition at: anIsland! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:21:19' overrides: 50681710!
canMove: aPirate  to: aPosition at: anIsland! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:21:19' overrides: 50681710!
canMove: aPirate  to: aPosition at: anIsland! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:21:19' overrides: 50681710!
canMove: aPirate  to: aPosition at: anIsland! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:21:19' prior: 50681710!
canMove: aPirate to: aPosition at: anIsland

	self subclassResponsibility! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:21:32'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:21:36'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:22:21'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:22:25'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:24:21'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:24:51' prior: 50681332!
moveTo: aPosition

	| everyoneCanMove terrain |
	
	terrain := island terrainAt: aPosition.
	
	everyoneCanMove := pirates inject: true into: [  :canMove :pirate |
		canMove & self move: pirate to: aPosition  in: terrain.		
	].

	"nos movemos si todos pueden moverse"
	everyoneCanMove  ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:24:58'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:25:26'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:25:37'!
ERROR!
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:28:35'!
canMoveCorsarioTo: aPosition at: anIsland! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:28:46'!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility! !

!methodRemoval: Terrain #canMove:to:at: stamp: 'camila 9/20/2023 19:28:55'!
canMove: aPirate to: aPosition at: anIsland

	self subclassResponsibility!
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:06'!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:16'!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:25' overrides: 50681866!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:25' overrides: 50681866!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:25' overrides: 50681866!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:25' prior: 50681866!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:34' overrides: 50681851!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:34' overrides: 50681851!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:34' prior: 50681847 overrides: 50681851!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:34' prior: 50681851!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:44' overrides: 50681861!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:44' overrides: 50681861!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:44' overrides: 50681861!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:29:44' prior: 50681861!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !

!methodRemoval: Diggable #canMove:to:at: stamp: 'camila 9/20/2023 19:29:52'!
canMove: aPirate  to: aPosition at: anIsland!

!methodRemoval: Tree #canMove:to:at: stamp: 'camila 9/20/2023 19:29:58'!
canMove: aPirate  to: aPosition at: anIsland!
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:30:17' prior: 50681634!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMoveBucaneroTo: aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ]."! !
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:30:35' prior: 50681688!
moveTo: aPosition in: terrain at: anIsland 
	 ^terrain canMoveCorsarioTo: aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^true.].
	terrain = #Diggable ifTrue: [ ^true ]."! !
!Filibustero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:30:51' prior: 50681699!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMoveFilibusteroTo: aPosition at:anIsland .
			"terrain = #Tree ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ]."! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:30:53'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:31:00'!
ERROR!
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:31:34' prior: 50681884 overrides: 50681890!
canMoveBucaneroTo: aPosition at: anIsland

	^ false ! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:31:51' prior: 50681908 overrides: 50681914!
canMoveCorsarioTo: aPosition at: anIsland

	^ false ! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:32:11' prior: 50681932 overrides: 50681938!
canMoveFilibusteroTo: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:33:11' prior: 50681926 overrides: 50681938!
canMoveFilibusteroTo: aPosition at: anIsland

	^true.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:33:19' prior: 50681920 overrides: 50681938!
canMoveFilibusteroTo: aPosition at: anIsland

		^true.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:34:08' prior: 50681896 overrides: 50681914!
canMoveCorsarioTo: aPosition at: anIsland

	"self drawDirectionTo: aPosition.
		^true."! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:34:34' prior: 50681872 overrides: 50681890!
canMoveBucaneroTo: aPosition at: anIsland

^ true! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:34:58' prior: 50681878 overrides: 50681890!
canMoveBucaneroTo: aPosition at: anIsland

	^true.! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:35:31' prior: 50681902 overrides: 50681914!
canMoveCorsarioTo: aPosition at: anIsland

	^true.! !

!methodRemoval: Empty #canMove:to:at: stamp: 'camila 9/20/2023 19:35:43'!
canMove: aPirate  to: aPosition at: anIsland!
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:13'!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:13' overrides: 50682072!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	^true.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:13' overrides: 50682072!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

		^true.! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:13' overrides: 50682072!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:13' prior: 50681972!
moveTo: aPosition in: terrain at: anIsland 
	^terrain Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at:anIsland .
			"terrain = #Tree ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ]."! !

!methodRemoval: Terrain #canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:37:13'!
canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility!

!methodRemoval: Diggable #canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:37:13'!
canMoveFilibusteroTo: aPosition at: anIsland

	^true.!

!methodRemoval: Empty #canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:37:13'!
canMoveFilibusteroTo: aPosition at: anIsland

		^true.!

!methodRemoval: Tree #canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:37:13'!
canMoveFilibusteroTo: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false!
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:37:35'!
canMoveFilisbutero: aFilibustero to: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false! !

!methodRemoval: Tree #Filisbutero:canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:38:14'!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false!
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:38:22'!
canMoveCorsario: aCorsario to: aPosition at: anIsland

	^ false ! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:38:31'!
canMoveBucanero: aBucanero to: aPosition at: anIsland

	^ false ! !

!methodRemoval: Tree #canMoveBucaneroTo:at: stamp: 'camila 9/20/2023 19:38:40'!
canMoveBucaneroTo: aPosition at: anIsland

	^ false !

!methodRemoval: Tree #canMoveCorsarioTo:at: stamp: 'camila 9/20/2023 19:38:54'!
canMoveCorsarioTo: aPosition at: anIsland

	^ false !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:39:16'!
canMoveFilibustero: aFilibustero to: aPosition at: anIsland

		^true.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:39:26'!
canMoveCorsario: aCorsario to: aPosition at: anIsland

	"self drawDirectionTo: aPosition.
		^true."! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:39:36' prior: 50682166!
canMoveCorsario: aCorsario to: aPosition at: anIsland

	aCorsario drawDirectionTo: aPosition.
	^true.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:39:45'!
canMoveBucanero:aBucanero to: aPosition at: anIsland

^ true! !

!methodRemoval: Empty #Filisbutero:canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:39:50'!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

		^true.!

!methodRemoval: Empty #canMoveCorsarioTo:at: stamp: 'camila 9/20/2023 19:39:54'!
canMoveCorsarioTo: aPosition at: anIsland

	"self drawDirectionTo: aPosition.
		^true."!

!methodRemoval: Empty #canMoveBucaneroTo:at: stamp: 'camila 9/20/2023 19:39:56'!
canMoveBucaneroTo: aPosition at: anIsland

^ true!
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:40:22'!
 canMoveFilibustero: aFilibustero to: aPosition at: anIsland

	^true.! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:40:29'!
canMoveCorsario: aCorsario to: aPosition at: anIsland

	^true.! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:40:41'!
canMoveBucanero: aBucanero to: aPosition at: anIsland

	^true.! !

!methodRemoval: Diggable #Filisbutero:canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:40:44'!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	^true.!

!methodRemoval: Diggable #canMoveBucaneroTo:at: stamp: 'camila 9/20/2023 19:40:47'!
canMoveBucaneroTo: aPosition at: anIsland

	^true.!

!methodRemoval: Diggable #canMoveCorsarioTo:at: stamp: 'camila 9/20/2023 19:40:50'!
canMoveCorsarioTo: aPosition at: anIsland

	^true.!
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:41:10'!
canMoveFilibustero: aFilibustero to: aPosition at: anIsland

	self subclassResponsibility! !

!methodRemoval: Terrain #Filisbutero:canMoveFilibusteroTo:at: stamp: 'camila 9/20/2023 19:41:13'!
Filisbutero: aFilibustero canMoveFilibusteroTo: aPosition at: anIsland

	self subclassResponsibility!
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:41:19'!
canMoveBucanero: aBucanero to: aPosition at: anIsland

	self subclassResponsibility! !

!methodRemoval: Terrain #canMoveBucaneroTo:at: stamp: 'camila 9/20/2023 19:41:23'!
canMoveBucaneroTo: aPosition at: anIsland

	self subclassResponsibility!
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:41:30'!
canMoveCorsario: aCorsario to: aPosition at: anIsland

	self subclassResponsibility! !

!methodRemoval: Terrain #canMoveCorsarioTo:at: stamp: 'camila 9/20/2023 19:41:32'!
canMoveCorsarioTo: aPosition at: anIsland

	self subclassResponsibility!
!Bucanero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:41:42' prior: 50681951!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMoveBucanero: self to: aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ]."! !
!Corsario methodsFor: 'movement' stamp: 'camila 9/20/2023 19:41:50' prior: 50681961!
moveTo: aPosition in: terrain at: anIsland 
	 ^terrain canMoveCorsario: self to: aPosition at:anIsland .
	"terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^true.].
	terrain = #Diggable ifTrue: [ ^true ]."! !
!Filibustero methodsFor: 'movement' stamp: 'camila 9/20/2023 19:42:08' prior: 50682098!
moveTo: aPosition in: terrain at: anIsland 
	^terrain canMoveFilibustero: self to: aPosition at:anIsland .
			"terrain = #Tree ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ]."! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:42:15'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:42:15'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:42:15'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:42:15'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:42:15'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:42:15'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:42:15'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:42:15'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:42:20'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:47:52'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:47:52'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:47:52'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:47:52'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:47:52'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:47:52'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:47:52'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:47:52'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:48:02'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:48:22'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:48:40'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:48:50'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:49:37' prior: 50681798!
moveTo: aPosition

	| everyoneCanMove terrain |
	
	terrain := island terrainAt: aPosition.
	
	everyoneCanMove := pirates inject: true into: [  :canMove :pirate |
		canMove & (self move: pirate to: aPosition  in: terrain).
	].

	"nos movemos si todos pueden moverse"
	everyoneCanMove  ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:49:42'!
ERROR!
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:50:14' overrides: 50682228!
canMoveFilibustero: aFilibustero to: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false! !

!methodRemoval: Tree #canMoveFilisbutero:to:at: stamp: 'camila 9/20/2023 19:50:14'!
canMoveFilisbutero: aFilibustero to: aPosition at: anIsland

	anIsland clearTerrainAt: aPosition.
				^ false!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:50:30'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:50:30'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:50:30'!
PASSED!

----SNAPSHOT----(20 September 2023 19:50:38) CuisUniversity-5981.image priorSource: 11144059!
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:52:25' overrides: 16901772!
= anObject
	^ anObject = #Diggable! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:52:38' overrides: 16901772!
= anObject
	^ anObject = #Emtpy! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:52:41' prior: 50682429 overrides: 16901772!
= anObject
	^ anObject = #Empty! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:52:50' overrides: 16901772!
= anObject
	^ anObject = #Tree! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:52:55'!
PASSED!

Pirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:53:27'!
Pirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:53:34'!
Pirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 19:53:39'!
Pirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:55:23' prior: 50682364!
moveTo: aPosition

	| everyoneCanMove terrain |
	
	terrain := island terrainAt: aPosition.
	
	everyoneCanMove := pirates inject: true into: [  :canMove :pirate |
		canMove & (pirate moveTo: aPosition in: terrain at: island).
	].

	"nos movemos si todos pueden moverse"
	everyoneCanMove  ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:55:24'!
PASSED!

!methodRemoval: Crew #move:to:in: stamp: 'camila 9/20/2023 19:55:28'!
move: pirate to: aPosition in: terrain
	
	^pirate moveTo: aPosition in: terrain at: island.
		"(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^true. 
			].
			terrain = #Diggable ifTrue: [ ^true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		]."
		
	
	!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:56:56' prior: 50680668!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [ :pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ island receiveTreasureAt: aPosition ].
		].
		
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:56:58'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:56:58'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:58:19' prior: 50682571!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [ :pirate |
		pirate buryTreasureAt: aPosition in: terrain at: island.
		"(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ island receiveTreasureAt: aPosition ].
		]."
		
	].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:58:57' prior: 50682625!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [ :pirate | pirate buryTreasureAt: aPosition in: terrain at: island.	
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 19:58:58'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 19:58:58'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 19:58:58'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 19:58:58'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:58:58'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 19:58:58'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 19:58:58'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 19:58:58'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:59:02'!
ERROR!
!Corsario methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:59:12'!
buryTreasureAt: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 19:59:37' prior: 50682692!
buryTreasureAt: aPosition in: terrain at: anIsland 
	 
			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [ 				self drawTreasureMarkAt: aPosition ].! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:59:39'!
ERROR!
!Filibustero methodsFor: '*DenotativeObject' stamp: 'camila 9/20/2023 19:59:45'!
buryTreasureAt: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !
!Filibustero methodsFor: '*DenotativeObject' stamp: 'camila 9/20/2023 19:59:57' prior: 50682711!
buryTreasureAt: aPosition in: terrain at: anIsland 
	

			terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [].
		! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 19:59:59'!
ERROR!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:00:07'!
buryTreasureAt: aPosition in: terrain at: anIsland 
	self shouldBeImplemented.! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:00:26' prior: 50682728!
buryTreasureAt: aPosition in: terrain at: anIsland 

			terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ].
		! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:00:28'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:00:35'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:00:35'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:00:42' prior: 50682654!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [ :pirate | pirate buryTreasureAt: aPosition in: terrain at: island.	].
	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:04:22' prior: 50682734!
buryTreasureAt: aPosition in: terrain at: anIsland 

	^terrain bucanero: self buryTreasureAt: aPosition in: anIsland.
	
			"terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ]."
		! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:04:54'!
bucanero: aBucanero buryTreasureAt: aPosition at: anIsland! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:05'!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland! !

!methodRemoval: Terrain #bucanero:buryTreasureAt:at: stamp: 'camila 9/20/2023 20:05:07'!
bucanero: aBucanero buryTreasureAt: aPosition at: anIsland!
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:12' overrides: 50682806!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:12' overrides: 50682806!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:12' overrides: 50682806!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:12' prior: 50682806!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:29' prior: 50682822 overrides: 50682832!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland
	^ anIsland receiveTreasureAt: aPosition.
		! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:05:54' prior: 50682816 overrides: 50682832!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland
^ aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'.
			
		! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:06:13' prior: 50682827 overrides: 50682832!
bucanero: aBucanero buryTreasureAt: aPosition in: anIsland
^ aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:06:33'!
PASSED!

----SNAPSHOT----(20 September 2023 20:06:36) CuisUniversity-5981.image priorSource: 11224611!
!Corsario methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:06:59' prior: 50682698!
buryTreasureAt: aPosition in: terrain at: anIsland 
	 ^terrain corsario: self buryTreasureAt: aPosition in: anIsland.! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:12'!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:17' overrides: 50682898!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:17' overrides: 50682898!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:17' overrides: 50682898!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:17' prior: 50682898!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:40' prior: 50682910 overrides: 50682922!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland


	^aCorsario drawTreasureMarkAt: aPosition! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:07:51' prior: 50682904 overrides: 50682922!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland
! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:08:06' prior: 50682916 overrides: 50682922!
corsario: aCorsario buryTreasureAt: aPosition in: anIsland! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:08:51' prior: 50682717!
buryTreasureAt: aPosition in: terrain at: anIsland 
	
	^terrain filibustero: self buryTreasureAt: aPosition in: anIsland.

! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:06'!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:18' overrides: 50682955!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:18' overrides: 50682955!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:18' overrides: 50682955!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:18' prior: 50682955!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	self subclassResponsibility! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:27' prior: 50682969 overrides: 50682983!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

		! !
!Empty methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:33' prior: 50682962 overrides: 50682983!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland

	! !
!Tree methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:09:39' prior: 50682976 overrides: 50682983!
filibustero: aFilibustero buryTreasureAt: aPosition in: anIsland
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:09:47'!
PASSED!

----SNAPSHOT----(20 September 2023 20:09:52) CuisUniversity-5981.image priorSource: 11239563!
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:16:22' prior: 50680798!
clearTerrainAt: aPosition

	treesAt remove: aPosition ifAbsent: [].
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:17:06'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:17:06'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:18:59' prior: 50680822!
isEmptyAt: aPosition

	^ (treesAt includes:aPosition) not. ! !
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:19:03' prior: 50683069!
isEmptyAt: aPosition

	^ (treesAt includes:aPosition) not.  ! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:19:03'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:19:03'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:19:25' prior: 50683074!
isEmptyAt: aPosition

	^ (treesAt includes:aPosition) not.   ! !
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:23:10' prior: 50681674!
terrainAt: aPosition

treesAt detect: [:position | aPosition = position] ifFound: [:position | ^Tree new] 
		ifNone: [digsAt  detect: [:position | aPosition = position] ifFound: [:position | ^Diggable new] ifNone: [^Empty new]] 


	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:23:47' prior: 50683111!
terrainAt: aPosition

treesAt detect: [:position | aPosition = position] 
	    ifFound: [:position | ^Tree new] 
	    ifNone: [
			   digsAt  detect: [:position | aPosition = position] 
					ifFound: [:position | ^Diggable new] 
					ifNone: [^Empty new]
			] 


	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:23:48'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:23:48'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:28:25' prior: 50683122!
terrainAt: aPosition
	(treesAt includes: aPosition) ifTrue:[^Tree new].
	(digsAt includes: aPosition ) ifTrue:[^Diggable new].
	^Empty new
			


	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:28:26'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:28:26'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:32:46' prior: 50680895!
lastPosition

	| acc ix |
	
	acc := startPosition.
	ix := 1.
	
	^steps inject: startPosition into: [:lastPosition :step | lastPosition + step ] 
	
	
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:32:51'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:32:51'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:32:51'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:32:52'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:32:52'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:32:52'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:32:52'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:32:52'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:32:58' prior: 50683194!
lastPosition
	
	^steps inject: startPosition into: [:lastPosition :step | lastPosition + step ] 
	
	
	
	! !
!Map methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:33:41' prior: 50683229!
lastPosition 
	
	^steps inject: startPosition into: [:lastPosition :step | lastPosition + step ] 
	
	
	
	! !

!methodRemoval: Map #startPosition stamp: 'camila 9/20/2023 20:33:57'!
startPosition

	^ startPosition
	
	!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:34:28'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:34:28'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:35:17' prior: 50680879!
hasTreasureMark

	^ treasureMarkPosition notNil.
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:35:19'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:35:19'!
PASSED!
!Pirate methodsFor: 'movement' stamp: 'camila 9/20/2023 20:37:42'!
moveTo: aPosition in: terrain at: anIsland

	self subclassResponsibility! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:37:45'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:37:45'!
PASSED!
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:38:14'!
buryTreasureAt: aPosition in: terrain at: anIsland

	self subclassResponsibility! !
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:38:26'!
aCaptainIWasMeantToBe

	self subclassResponsibility! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:38:29'!
PASSED!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:40:37'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:40:37'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:40:37'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Pirate category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:40:37'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:41:24' prior: 50683342!
aCaptainIWasMeantToBe

	rank := #Captain! !

!methodRemoval: Bucanero #aCaptainIWasMeantToBe stamp: 'camila 9/20/2023 20:41:33'!
aCaptainIWasMeantToBe

	rank := #Captain!

!methodRemoval: Corsario #aCaptainIWasMeantToBe stamp: 'camila 9/20/2023 20:41:40'!
aCaptainIWasMeantToBe

	rank := #Captain!

!methodRemoval: Filibustero #aCaptainIWasMeantToBe stamp: 'camila 9/20/2023 20:41:48'!
aCaptainIWasMeantToBe

	rank := #Captain!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:41:55'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:41:55'!
PASSED!
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:43:12'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	! !

!methodRemoval: Corsario #searchTreasureIn:with: stamp: 'camila 9/20/2023 20:43:12'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Bucanero #searchTreasureIn:with: stamp: 'camila 9/20/2023 20:43:12'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Filibustero #searchTreasureIn:with: stamp: 'camila 9/20/2023 20:43:12'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #PirateRank category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:46:58'!
Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #SimplePirate category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:47:09'!
PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

PirateRank subclass: #Captain 
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Captain category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 20:47:27'!
PirateRank subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:49:01' overrides: 16920235!
initialize

	rank := SimplePirate new! !

!methodRemoval: Bucanero #initialize stamp: 'camila 9/20/2023 20:49:10'!
initialize

	rank := #SimplePirate!

!methodRemoval: Corsario #initialize stamp: 'camila 9/20/2023 20:49:20'!
initialize

	rank := #NoRank!
!Corsario methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:49:25' prior: 50680628!
initializeWith: aMap
	map := aMap! !

!methodRemoval: Filibustero #initialize stamp: 'camila 9/20/2023 20:49:33'!
initialize

	rank := #SimplePirate!
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:49:53' prior: 50683404!
aCaptainIWasMeantToBe

	rank := Captain new
	! !
!Pirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:51:53' prior: 50683447!
searchTreasureIn: island with: aMap

	^ rank searchTreasureFor: self at: island with: aMap.
	! !
!PirateRank methodsFor: 'no messages' stamp: 'camila 9/20/2023 20:52:23'!
searchTreasureFor: aPirate at: anIsland with: aMap
	! !
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:52:31' overrides: 50683552!
searchTreasureFor: aPirate at: anIsland with: aMap
	! !
!Captain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:52:31' overrides: 50683552!
searchTreasureFor: aPirate at: anIsland with: aMap
	! !
!PirateRank methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:52:31' prior: 50683552!
searchTreasureFor: aPirate at: anIsland with: aMap

	self subclassResponsibility! !
!Captain methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:52:44' prior: 50683562 overrides: 50683567!
searchTreasureFor: aPirate at: anIsland with: aMap
	^ true "Aye, Aye!! La implementación está fuera del scope del parcial."! !
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'camila 9/20/2023 20:53:00' prior: 50683557 overrides: 50683567!
searchTreasureFor: aPirate at: anIsland with: aMap
	
	^aPirate error: 'I am a simple pirate!!'! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 20:53:05'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 20:53:05'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:00:50' prior: 50680362!
test01MovingCrewToTreePlaceDoesNotMove

	| island1 crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island1 crewStartsAt: crewPosition.

	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:01:14' prior: 50683615!
test01MovingCrewToTreePlaceDoesNotMove

	| island1 crew1 crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island1 crewStartsAt: crewPosition.

	crew1 := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
	crew1 moveTo: treePosition.
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:01:40' prior: 50683637!
test01MovingCrewToTreePlaceDoesNotMove

	| island1 crew1 crewPosition1 treePosition map |
	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island1 crewStartsAt: crewPosition1.

	crew1 := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
			
	crew1 moveTo: treePosition.
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition1).! !
!CrewTest methodsFor: 'tests' stamp: 'HAW 9/22/2022 16:37:37' prior: 50683659!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island crewStartsAt: crewPosition.

	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:00:50' prior: 50683681!
test01MovingCrewToTreePlaceDoesNotMove

	| island1 crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island1 crewStartsAt: crewPosition.

	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:02:38' prior: 50683703!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island crewStartsAt: crewPosition.

	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !

TestCase subclass: #CrewTest
	instanceVariableNames: 'island1 crew1 crewPosition1 treePosition1 map1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'camila 9/20/2023 21:03:20'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island1 crew1 crewPosition1 treePosition1 map1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:04:13' overrides: 16961394!
setUp

	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	
	map1 := Map of: island1 crewStartsAt: crewPosition1.

	crew1 := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.! !
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:04:32' prior: 50683762 overrides: 16961394!
setUp
	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	
	map1 := Map of: island1 crewStartsAt: crewPosition1.

	crew1 := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 21:04:34'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 21:04:34'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:04:55' prior: 50683725!
test01MovingCrewToTreePlaceDoesNotMove


			
	crew1 moveTo: treePosition1.
	
	self deny: (island1 hasCrewAt: treePosition1).
	self assert: (island1 hasCrewAt: crewPosition1).! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 21:04:56'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 21:04:56'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'camila 9/20/2023 21:05:24' prior: 50680383!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	

	self deny: (island1 isEmptyAt: treePosition1).
				
	crew1 moveTo: treePosition1.

	self assert: (island1 isEmptyAt: treePosition1).
	
	self deny: (island1 hasCrewAt: treePosition1).
	self assert: (island1 hasCrewAt: crewPosition1).! !

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'camila 9/20/2023 21:05:25'!
PASSED!

----SNAPSHOT----(20 September 2023 21:11:28) CuisUniversity-5981.image priorSource: 11244241!

----STARTUP---- (21 September 2023 00:25:28) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2023-1C-Parcial-1.st----!

!classRemoval: #Tree stamp: 'camila 9/21/2023 00:25:52'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Empty stamp: 'camila 9/21/2023 00:25:52'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Diggable stamp: 'camila 9/21/2023 00:25:52'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Terrain stamp: 'camila 9/21/2023 00:25:53'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #SimplePirate stamp: 'camila 9/21/2023 00:25:53'!
PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Captain stamp: 'camila 9/21/2023 00:25:53'!
PirateRank subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #PirateRank stamp: 'camila 9/21/2023 00:25:53'!
Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Filibustero stamp: 'camila 9/21/2023 00:25:53'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Corsario stamp: 'camila 9/21/2023 00:25:53'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Bucanero stamp: 'camila 9/21/2023 00:25:53'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Pirate stamp: 'camila 9/21/2023 00:25:54'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Map stamp: 'camila 9/21/2023 00:25:54'!
Object subclass: #Map
	instanceVariableNames: 'island startPosition steps treasureMarkPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Island stamp: 'camila 9/21/2023 00:25:54'!
Object subclass: #Island
	instanceVariableNames: 'boardSize treesAt digsAt crewAt treasureAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Crew stamp: 'camila 9/21/2023 00:25:54'!
Object subclass: #Crew
	instanceVariableNames: 'island pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #CrewTest stamp: 'camila 9/21/2023 00:25:54'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island1 crew1 crewPosition1 treePosition1 map1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:29:45' prior: 50684436!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	capasDeSueloDebajo do: [ :capa|
		| altura |
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:29:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:29:50'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:31:28' prior: 50684603!
calcularProfundidadDelSuelo
	
	| acc |

	acc := 0.
	
	capasDeSueloDebajo inject: acc into: [ :profundidad :capa|
		acc := profundidad + capa altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:31:31'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:31:32'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:31:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:31:32'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:32:18' prior: 50684691!
calcularProfundidadDelSuelo
	
	| acc |

	acc := 0.
	
	capasDeSueloDebajo inject: acc into: [ :profundidad :capa|
		|altura|
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := profundidad + altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:32:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:32:19'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:32:48' prior: 50684781!
calcularProfundidadDelSuelo
	
	| profundidadTotal |

	profundidadTotal := 0.
	
	capasDeSueloDebajo inject: profundidadTotal into: [ :profundidad :capa|
		|altura|
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadTotal := profundidad +  altura.
	].

	^ profundidadTotal.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:33:59' prior: 50684448!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc  |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa | 
		|  altura |
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:35:10' prior: 50684883!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc  |
	
	valor := self valorInicialDeCapa: tipoDeCapa .
	
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa | 
		|  altura |
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:35:48'!
valorInicialDeCapa: tipoDeCapa
	
	tipoDeCapa = #Arenoso ifTrue: [ ^7 ].
	tipoDeCapa = #Tierra ifTrue: [ ^10 ].
	tipoDeCapa = #Concreto ifTrue: [ ^50].	
	

	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:37:54' prior: 50684900!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc  |
	
	valor := self valorInicialDeCapa: tipoDeCapa .
	
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa | 
		|  altura |
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:37:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:37:56'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:38:27' prior: 50684870!
calcularProfundidadDelSuelo
	
	| profundidadTotal |

	profundidadTotal := 0.
	
	^capasDeSueloDebajo inject: profundidadTotal into: [ :profundidad :capa|
		|altura|
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadTotal := profundidad +  altura.
	].

	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:38:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:38:28'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:40:48' prior: 50684921!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor profundidadParcial  |
	
	valor := self valorInicialDeCapa: tipoDeCapa .
	
	profundidadParcial := 0.
	
	^capasDeSueloDebajo inject: profundidadParcial into: [ :profundidad :capa|
		|altura|
		valor = capa scan ifTrue: [ ^ profundidadParcial ].
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadParcial := profundidad +  altura.
	].
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:40:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:40:49'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:41:47'!
profundidadDeCapa: tipoDeCapa
	
	tipoDeCapa = #Arenoso ifTrue: [ ^7 ].
	tipoDeCapa = #Tierra ifTrue: [ ^10 ].
	tipoDeCapa = #Concreto ifTrue: [ ^50].	
	

	
	 ! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 00:41:47' prior: 50685102!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor profundidadParcial  |
	
	valor := self profundidadDeCapa: tipoDeCapa .
	
	profundidadParcial := 0.
	
	^capasDeSueloDebajo inject: profundidadParcial into: [ :profundidad :capa|
		|altura|
		valor = capa scan ifTrue: [ ^ profundidadParcial ].
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadParcial := profundidad +  altura.
	].
	
	 ! !

!methodRemoval: Perforadora #valorInicialDeCapa: stamp: 'camila 9/21/2023 00:41:47'!
valorInicialDeCapa: tipoDeCapa
	
	tipoDeCapa = #Arenoso ifTrue: [ ^7 ].
	tipoDeCapa = #Tierra ifTrue: [ ^10 ].
	tipoDeCapa = #Concreto ifTrue: [ ^50].	
	

	
	 !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:42:26' prior: 50685205!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor profundidadParcial  |
	
	valor := self profundidadDeCapa: tipoDeCapa .
	
	profundidadParcial := 0.
	
	^capasDeSueloDebajo inject: profundidadParcial into: [ :profundidad :capa|
		|altura|
		valor = capa scan ifTrue: [ ^ profundidadParcial ].
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadParcial := profundidad +  altura.
	].
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:43:22'!
scannearCapa: tipoDeCapa
	
	tipoDeCapa = #Arenoso ifTrue: [ ^7 ].
	tipoDeCapa = #Tierra ifTrue: [ ^10 ].
	tipoDeCapa = #Concreto ifTrue: [ ^50].	
	

	
	 ! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 00:43:22' prior: 50685229!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor profundidadParcial  |
	
	valor := self scannearCapa: tipoDeCapa .
	
	profundidadParcial := 0.
	
	^capasDeSueloDebajo inject: profundidadParcial into: [ :profundidad :capa|
		|altura|
		valor = capa scan ifTrue: [ ^ profundidadParcial ].
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadParcial := profundidad +  altura.
	].
	
	 ! !

!methodRemoval: Perforadora #profundidadDeCapa: stamp: 'camila 9/21/2023 00:43:22'!
profundidadDeCapa: tipoDeCapa
	
	tipoDeCapa = #Arenoso ifTrue: [ ^7 ].
	tipoDeCapa = #Tierra ifTrue: [ ^10 ].
	tipoDeCapa = #Concreto ifTrue: [ ^50].	
	

	
	 !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:44:29' prior: 50684467!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc  |
	
	valor  := self scannearCapa: tipoDeCapa .
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa |
		valor = capa scan ifTrue: [ acc := acc + 1 ].
	].

	^ acc! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:46:10' prior: 50685277!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc  |
	
	valor  := self scannearCapa: tipoDeCapa .
	acc := 0.
	
	capasDeSueloDebajo inject:  acc into: [ :capa |
		valor = capa scan ifTrue: [ acc := acc + 1 ].
	].

	^ acc! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:46:56' prior: 50685292!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc  |
	
	valor  := self scannearCapa: tipoDeCapa .
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa |
		valor = capa scan ifTrue: [ acc := acc + 1 ].
	].

	^ acc! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:47:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:47:01'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:48:33' prior: 50685012!
calcularProfundidadDelSuelo
	
	^capasDeSueloDebajo sum: [ :unaCapaDeSuelo | unaCapaDeSuelo altura ]
	
	"^capasDeSueloDebajo inject: profundidadTotal into: [ :profundidad :capa|
		|altura|
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		profundidadTotal := profundidad +  altura.
	]."

	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:48:34'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:48:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:48:34'!
ERROR!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/21/2023 00:49:43' prior: 50684267!
altura
	altura = nil ifTrue: [ ^0 ]
	^ altura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:49:44'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:49:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:49:44'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:49:44'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:29:45' prior: 50685399!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	capasDeSueloDebajo do: [ :capa|
		| altura |
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:35:10' prior: 50685253!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc  |
	
	valor := self valorInicialDeCapa: tipoDeCapa .
	
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa | 
		|  altura |
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:51:54'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:51:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:51:54'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:51:54'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:51:54'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'camila 9/21/2023 00:52:26' prior: 50685585!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc  |
	
	valor := self scannearCapa: tipoDeCapa .
	
	acc := 0.
	
	capasDeSueloDebajo do: [ :capa | 
		|  altura |
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:52:27'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:52:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:52:27'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:52:27'!
ERROR!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/21/2023 00:52:43' prior: 50685493!
altura
	^ altura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 00:52:45'!
PASSED!

----SNAPSHOT----(21 September 2023 00:52:51) CuisUniversity-5981.image priorSource: 11271971!

Object subclass: #TiposDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TiposDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 00:57:09'!
Object subclass: #TiposDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TiposDeMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 00:57:35'!
TiposDeMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TiposDeMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 00:57:37'!
TiposDeMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TiposDeMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 00:57:41'!
TiposDeMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 00:59:35' prior: 50684344!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta perforadora: self darGolpeEnSueloArenoso.
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!TiposDeMecha methodsFor: 'no messages' stamp: 'camila 9/21/2023 01:00:14'!
perforadora: unaPerforadora darGolpeEnSueloArenoso: test
	
! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:00:36'!
darGolpeEnSueloArenosoCon: unaPerforadora 
	
! !

!methodRemoval: TiposDeMecha #perforadora:darGolpeEnSueloArenoso: stamp: 'camila 9/21/2023 01:00:38'!
perforadora: unaPerforadora darGolpeEnSueloArenoso: test
	
!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:00:53' overrides: 50685940!
darGolpeEnSueloArenosoCon: unaPerforadora 
	
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:00:53' overrides: 50685940!
darGolpeEnSueloArenosoCon: unaPerforadora 
	
! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:00:53' overrides: 50685940!
darGolpeEnSueloArenosoCon: unaPerforadora 
	
! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:00:53' prior: 50685940!
darGolpeEnSueloArenosoCon: unaPerforadora

	self subclassResponsibility! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:01:13' prior: 50685900!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:03:42' prior: 50685960 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
		unaPerforadora mechaRotaPorSueloArenoso. 
		^self error: 'Se rompió' .
	
! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:04:20' prior: 50685950 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora
 	^unaPerforadora pasarAProximaCapa.! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:05:04' prior: 50685955 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
	^unaPerforadora pasarAProximaCapa.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:05:12'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:05:12'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:05:12'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:05:12'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:05:12'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:05:12'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:05:12'!
PASSED!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:05:39' prior: 50686015 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora
	unaPerforadora mechaRotaPorSueloArenoso. 
		^self error: 'Se rompió' .! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:05:45' prior: 50686007 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
		^unaPerforadora pasarAProximaCapa.
	
! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:03:42' prior: 50686114 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
		unaPerforadora mechaRotaPorSueloArenoso. 
		^self error: 'Se rompió' .
	
! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:04:20' prior: 50686106 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora
 	^unaPerforadora pasarAProximaCapa.! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:06:53' prior: 50686121 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
		unaPerforadora conMechaRota. 
		^self error: 'Se rompió' .
	
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:06:59'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:06:59'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:06:59'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:06:59'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:06:59'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:06:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:06:59'!
PASSED!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:07:50' prior: 50686136 overrides: 50685965!
darGolpeEnSueloArenosoCon: unaPerforadora 
		unaPerforadora mechaSeRompe. 
		^self error: 'Se rompió' .
	
! !
!Perforadora methodsFor: 'nil' stamp: 'camila 9/21/2023 01:08:06'!
mechaSeRompe
	mechaPuesta  := #Rota! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:08:18'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:08:18'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:08:18'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:08:18'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:08:18'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:08:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:08:18'!
PASSED!
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 01:09:20' prior: 50684424!
ponerMechaDiamante
	mechaPuesta := Diamante new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 01:09:27' prior: 50684428!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 01:09:33' prior: 50684432!
ponerMechaWidia
	mechaPuesta := Widia new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:09:35'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:09:35'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:09:35'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:09:43'!
ERROR!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:11:32' overrides: 16901772!
= unObjeto
	^unObjeto = #Diamante! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:11:47' overrides: 16901772!
= unObjeto
	^unObjeto = #Soft! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:11:54' overrides: 16901772!
= unObjeto
	^unObjeto = #Widia! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:11:59'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:11:59'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:11:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:12:07'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:12:13'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:12:19'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:12:19'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:12:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:12:29'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:12:29'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:12:36'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:13:31'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:14:38' prior: 50685971!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self ].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:14:47'!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:14:56' overrides: 50686631!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:14:56' overrides: 50686631!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:14:56' overrides: 50686631!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:14:56' prior: 50686631!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:16:09' prior: 50686649 overrides: 50686655!
darGolpeEnSueloTierraCon: unaPerforadora

		unaPerforadora mechaSeRompe.
		^self error: 'Se rompió'
	! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:16:29' prior: 50686637 overrides: 50686655!
darGolpeEnSueloTierraCon: unaPerforadora

	^unaPerforadora pasarAProximaCapa! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:16:54' prior: 50686643 overrides: 50686655!
darGolpeEnSueloTierraCon: unaPerforadora

	^unaPerforadora pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:18:17' prior: 50686601!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self ].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:19:45' prior: 50686681!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self ].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta darGolpeEnSueloConcreto: self con: vecesQueGolpeoCapaActual.].
	
	self error: 'error'! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:20:04'!
darGolpeEnSueloConcretoCon: unaPerforadora 

	self subclassResponsibility! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:20:38' prior: 50686711!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self ].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta darGolpeEnSueloConcreto: self tantasVeces: vecesQueGolpeoCapaActual.].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 01:20:54' prior: 50686734!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self.].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self ].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta darGolpeEnSueloConcreto: self conGolpeadasAnteriores: vecesQueGolpeoCapaActual.].
	
	self error: 'error'! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:21:13'!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !

!methodRemoval: TiposDeMecha #darGolpeEnSueloConcretoCon: stamp: 'camila 9/21/2023 01:21:16'!
darGolpeEnSueloConcretoCon: unaPerforadora 

	self subclassResponsibility!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:21:22' overrides: 50686770!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:21:22' overrides: 50686770!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:21:22' overrides: 50686770!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:21:22' prior: 50686770!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

	self subclassResponsibility! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:23:09'!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada conCapaDebajo: capasDeSueloDebajo

	vecesQueFueGolpeada even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
	^vecesQueFueGolpeada! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 01:26:11' prior: 50686797 overrides: 50686804!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

			vecesQueFueGolpeada even ifTrue: [ (unaPerforadora capasDeSueloDebajo) first bajaUnDecimoDeResistencia].
			(unaPerforadora capasDeSueloDebajo) first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
			^vecesQueFueGolpeada! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 01:26:48'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 01:26:48'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 01:26:48'!
PASSED!

----SNAPSHOT----(21 September 2023 01:27:13) CuisUniversity-5981.image priorSource: 11334321!

----STARTUP---- (21 September 2023 17:34:12) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 17:34:43'!
darGolpeEnSueloConcreto: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

			vecesQueFueGolpeada even ifTrue: [ (unaPerforadora capasDeSueloDebajo) first bajaUnDecimoDeResistencia].
			(unaPerforadora capasDeSueloDebajo) first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
			^vecesQueFueGolpeada! !

!methodRemoval: Diamante #darGolpeEnSueloConcretoCon:conGolpeadasAnteriores: stamp: 'camila 9/21/2023 17:34:47'!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

			vecesQueFueGolpeada even ifTrue: [ (unaPerforadora capasDeSueloDebajo) first bajaUnDecimoDeResistencia].
			(unaPerforadora capasDeSueloDebajo) first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
			^vecesQueFueGolpeada!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 17:35:17'!
darGolpeEnSueloConcreto: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 17:35:22'!
darGolpeEnSueloConcreto: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada


	self subclassResponsibility! !
!TiposDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 17:35:34'!
darGolpeEnSueloConcreto: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

	self subclassResponsibility! !

!methodRemoval: TiposDeMecha #darGolpeEnSueloConcretoCon:conGolpeadasAnteriores: stamp: 'camila 9/21/2023 17:35:36'!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada

	self subclassResponsibility!

!methodRemoval: TiposDeMecha #darGolpeEnSueloConcretoCon:conGolpeadasAnteriores:conCapaDebajo: stamp: 'camila 9/21/2023 17:35:40'!
darGolpeEnSueloConcretoCon: unaPerforadora conGolpeadasAnteriores: vecesQueFueGolpeada conCapaDebajo: capasDeSueloDebajo

	vecesQueFueGolpeada even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
	^vecesQueFueGolpeada!

----STARTUP---- (21 September 2023 22:55:59) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #Widia stamp: 'camila 9/21/2023 22:56:47'!
TiposDeMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/21/2023 22:56:47'!
TiposDeMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/21/2023 22:56:47'!
TiposDeMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TiposDeMecha stamp: 'camila 9/21/2023 22:56:47'!
Object subclass: #TiposDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/21/2023 22:56:47'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/21/2023 22:56:48'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/21/2023 22:56:48'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of /home/camila/Downloads/ISW1-2023-1C-Parcial-1 (1).st----!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:57:42'!
darGolpeEnSueloArenosoConMechaSoft

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:57:42' prior: 50687480!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 22:58:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 22:58:01'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:28'!
darGolpeEnSueloArenosoConMechaWidia

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:28' prior: 50687645!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:43' prior: 50687768!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 22:58:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 22:58:43'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:59:04'!
darGolpeEnSueloArenosoConMechaDiamante

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:59:04' prior: 50687810!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 22:59:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 22:59:14'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:00:41'!
darGolpeEnSueloTierraConMechaSoft
! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:01:36' prior: 50687935!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:01:39'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:01:39'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:01:51' prior: 50688058!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:01:52'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:01:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:01:52'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:02:06' prior: 50688178!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			^vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:02:07'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:02:07'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:02:28' prior: 50688303!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:02:29'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:02:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:02:29'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:17'!
darGolpeEnSueloTierraConMechaDiamante

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:17' prior: 50688423!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:03:22'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:03:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:03:22'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:28' prior: 50688552!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			^vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:03:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:03:29'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:06' prior: 50688678!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:08:07'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:08:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:08:07'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:15' prior: 50688799!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			^vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ].
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:08:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:08:16'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:40'!
darGolpeEnSueloTierraConMechaWidia

	^ vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:40' prior: 50688925!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ 
			^self darGolpeEnSueloTierraConMechaWidia.
			 ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:51' prior: 50689052!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:22'!
darGolpeEnSueloConcretoConMechaSoft

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:22' prior: 50689094!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:26' prior: 50689141!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:09:27'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:09:27'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:46' prior: 50689182!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ 
			^vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:09:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:09:47'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:05'!
darGolpeEnSueloConcretoConMechaWidia

	^ vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:05' prior: 50689301!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ 
			^self darGolpeEnSueloConcretoConMechaWidia.
			].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:13' prior: 50689427!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:47' prior: 50689467!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:10:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:10:47'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:11:50'!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:11:50' prior: 50689507!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:11:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:11:53'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:12:02' prior: 50689634!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:12:02'!
PASSED!

----SNAPSHOT----(21 September 2023 23:12:12) CuisUniversity-5981.image priorSource: 11368484!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:12:26' prior: 50689747!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloArenosoConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloArenosoConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ self darGolpeEnSueloArenosoConMechaDiamante ].
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:12:27'!
PASSED!

Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:12:39'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:12:51'!
TipoDeMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:12:54'!
TipoDeMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:12:56'!
TipoDeMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:13:37' prior: 50689863!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self  darGolpeEnSueloTierraConMechaSoft ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloTierraConMechaWidia ].
		mechaPuesta = #Diamante ifTrue: [ ^self darGolpeEnSueloTierraConMechaDiamante ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:13:44'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:13:44'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:13:44'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:13:44'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:13:44'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:13:44'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:13:47'!
ERROR!
!TipoDeMecha methodsFor: 'no messages' stamp: 'camila 9/21/2023 23:14:38'!
darGolpeEnSueloArenosoCon: unaPerforadora
! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:43'!
darGolpeEnSueloTierraCon: unaPerforadora
! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:47'!
darGolpeEnSueloConcretoCon: unaPerforadora
! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57' overrides: 50690133!
darGolpeEnSueloArenosoCon: unaPerforadora
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57' overrides: 50690133!
darGolpeEnSueloArenosoCon: unaPerforadora
! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57' overrides: 50690133!
darGolpeEnSueloArenosoCon: unaPerforadora
! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57' prior: 50690133!
darGolpeEnSueloArenosoCon: unaPerforadora

	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04' overrides: 50690142!
darGolpeEnSueloConcretoCon: unaPerforadora
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04' overrides: 50690142!
darGolpeEnSueloConcretoCon: unaPerforadora
! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04' overrides: 50690142!
darGolpeEnSueloConcretoCon: unaPerforadora
! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04' prior: 50690142!
darGolpeEnSueloConcretoCon: unaPerforadora

	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07' overrides: 50690138!
darGolpeEnSueloTierraCon: unaPerforadora
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07' overrides: 50690138!
darGolpeEnSueloTierraCon: unaPerforadora
! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07' overrides: 50690138!
darGolpeEnSueloTierraCon: unaPerforadora
! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07' prior: 50690138!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:40' prior: 50690147 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora

		unaPerforadora darGolpeEnSueloArenosoConMechaDiamante! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:16:05' prior: 50690157 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora
unaPerforadora darGolpeEnSueloArenosoConMechaSoft! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:16:25' prior: 50690152 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora

		unaPerforadora darGolpeEnSueloArenosoConMechaWidia! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:16:46' prior: 50690023!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta darGolpeEnSueloArenosoCon: self
		].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:17:04' prior: 50690189 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
unaPerforadora darGolpeEnSueloTierraConMechaDiamante ! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:17:31' prior: 50690199 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
unaPerforadora  darGolpeEnSueloTierraConMechaSoft 
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:17:52' prior: 50690194 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
unaPerforadora darGolpeEnSueloTierraConMechaWidia 
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:18:02'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:18:02'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:18:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:18:02'!
PASSED!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:18' prior: 50690210 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaDiamante! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:25' prior: 50690254 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaDiamante ! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:37' prior: 50690217 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloArenosoConMechaSoft! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:45' prior: 50690261 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora  darGolpeEnSueloTierraConMechaSoft 
! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:54' prior: 50690224 overrides: 50690162!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:19:00' prior: 50690268 overrides: 50690204!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaWidia 
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:19:15'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:19:15'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:19:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:19:15'!
PASSED!
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:32' prior: 50687560!
ponerMechaDiamante
	mechaPuesta := Diamante new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:38' prior: 50687564!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:43' prior: 50687568!
ponerMechaWidia
	mechaPuesta := Widia new! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:19:50'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:19:50'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:19:50'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:19:50'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:19:50'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:19:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:19:50'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:20:22' prior: 50690230!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		^mechaPuesta darGolpeEnSueloArenosoCon: self
		].
	
	self sobreSueloTierra ifTrue: [
		^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self darGolpeEnSueloConcretoConMechaSoft  ].
		mechaPuesta = #Widia ifTrue: [ ^self darGolpeEnSueloConcretoConMechaWidia.].
		mechaPuesta = #Diamante ifTrue: [ 
			self darGolpeEnSueloConcretoConMechaDiamante.
			^vecesQueGolpeoCapaActual ]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:20:51'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:20:51'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:20:51'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:20:51'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:20:53'!
FAILURE!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:21:09' prior: 50687085!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:21:15'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:21:15'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:21:15'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:21:15'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:21:18'!
FAILURE!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:22:01' prior: 50690565!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		^mechaPuesta darGolpeEnSueloArenosoCon: self
		].
	
	self sobreSueloTierra ifTrue: [
		^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [
		^mechaPuesta darGolpeEnSueloConcretoCon: self
		].
	! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:05' prior: 50690168 overrides: 50690183!
darGolpeEnSueloConcretoCon: unaPerforadora

			unaPerforadora darGolpeEnSueloConcretoConMechaDiamante.
			"^vecesQueGolpeoCapaActual"! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:25' prior: 50690178 overrides: 50690183!
darGolpeEnSueloConcretoCon: unaPerforadora

	^unaPerforadora darGolpeEnSueloConcretoConMechaSoft  ! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:50' prior: 50690173 overrides: 50690183!
darGolpeEnSueloConcretoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloConcretoConMechaWidia! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:24:04' prior: 50690787 overrides: 50690183!
darGolpeEnSueloConcretoCon: unaPerforadora

			^unaPerforadora darGolpeEnSueloConcretoConMechaDiamante.
			"^vecesQueGolpeoCapaActual"! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:26' prior: 50689624!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]
	^vecesQueGolpeoCapaActual! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:24:28'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:24:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:24:28'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:49' prior: 50690817!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]
	"^vecesQueGolpeoCapaActual"! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:24:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:24:50'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:55' prior: 50690911!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:25:15' prior: 50690770!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:25:24' prior: 50691010!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	"vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1."
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:25:25'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:25:25'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:25:25'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:25:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:25:25'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:25:32' prior: 50691025!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:27:34' prior: 50691119!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].
	
	mechaPuesta darGolpe
	
	"vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !

TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:27:54'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:28:03'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:28:10'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:28:16'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/21/2023 23:28:19'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:28:37' prior: 50691134!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].
	
	mechaPuesta darGolpeCon: self.
	
	"vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:21'!
SignalNoSePuedePerforar

	^ self error: 'No puede perforar'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:21' prior: 50691209!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self SignalNoSePuedePerforar].
	
	mechaPuesta darGolpeCon: self.
	
	"vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:39' prior: 50691230!
darGolpeDeTaladro
		
	
	mechaPuesta darGolpeCon: self.
	
	"vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!SinMecha methodsFor: 'no messages' stamp: 'camila 9/21/2023 23:29:59'!
darGolpeCon: unaPerforadora
	unaPerforadora SignalNoSePuedePerforar! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:06'!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:16' prior: 50691247!
darGolpeDeTaladro
		
	
	mechaPuesta darGolpeCon: self.
	! !
!ConMecha methodsFor: 'no messages' stamp: 'camila 9/21/2023 23:31:36'!
darGolpeCon: unaPerforadora
	unaPerforadora darGolpeConMechaPuesta! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:31:47'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:31:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:31:47'!
FAILURE!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:32:12' prior: 50687229!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:32:17'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:32:17'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:32:17'!
ERROR!
!Perforadora methodsFor: 'initialization' stamp: 'camila 9/21/2023 23:32:47' prior: 50687520!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/21/2023 23:32:49'!
PASSED!

----SNAPSHOT----(21 September 2023 23:32:55) CuisUniversity-5981.image priorSource: 11462668!

----SNAPSHOT----(21 September 2023 23:33:15) CuisUniversity-5981.image priorSource: 11517010!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:39:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:39:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:39:35'!
PASSED!
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 00:40:07'!
darGolpeCon: unaPerforadora

	self subclassResponsibility! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 00:40:48' prior: 50691280!
darGolpeDeTaladro
	mechaPuesta darGolpeCon: self.
	! !

Object subclass: #TipoDeSuelo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TipoDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:42:04'!
Object subclass: #TipoDeSuelo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:42:17'!
TipoDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:42:21'!
TipoDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:42:33'!
TipoDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Rota category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:43:21'!
Object subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

TipoDeMecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Rota category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:43:29'!
TipoDeMecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 00:43:38' prior: 50687533!
conMechaRota

	^mechaPuesta = Rota new! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:43:39'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:43:39'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:43:39'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:43:39'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:43:39'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 00:44:04' prior: 50687929!
darGolpeEnSueloArenosoConMechaDiamante

	mechaPuesta := Rota new.
	self error: 'Se rompió'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:44:05'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:44:05'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:44:05'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:44:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:44:05'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 00:44:21' prior: 50689135!
darGolpeEnSueloConcretoConMechaSoft

	mechaPuesta := Rota new.
	 self error: 'Se rompió'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:44:23'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:44:23'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:44:23'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:44:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:44:23'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 00:44:32' prior: 50689420!
darGolpeEnSueloConcretoConMechaWidia

	^ vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ]! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:44:35'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:44:35'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:44:35'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:44:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:44:35'!
PASSED!
!Rota methodsFor: 'no messages' stamp: 'camila 9/22/2023 00:45:02' overrides: 16901772!
= anObject
	^anObject = #Rota! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:45:06'!
PASSED!

----SNAPSHOT----(22 September 2023 00:45:11) CuisUniversity-5981.image priorSource: 11517105!
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 00:46:31' prior: 50687541!
sinMecha

	^mechaPuesta = SinMecha new! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:46:32'!
PASSED!

!classRemoval: #Arenoso stamp: 'camila 9/22/2023 00:52:46'!
TipoDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:52:56'!
PASSED!

!classRemoval: #Concreto stamp: 'camila 9/22/2023 00:53:08'!
TipoDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'camila 9/22/2023 00:53:08'!
TipoDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeSuelo stamp: 'camila 9/22/2023 00:53:08'!
Object subclass: #TipoDeSuelo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:53:11'!
PASSED!

CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SueloTierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:53:37'!
CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #SueloArena
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SueloArena category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:53:43'!
CapaDeSuelo subclass: #SueloArena
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #SueloConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SueloConcreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 00:53:49'!
CapaDeSuelo subclass: #SueloConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:08' overrides: 50687371!
esArenoso
	^tipo = #Arenoso! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:08' overrides: 50687371!
esArenoso
	^tipo = #Arenoso! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:08' overrides: 50687371!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:08' prior: 50687371!
esArenoso

	self subclassResponsibility! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:20' overrides: 50687374!
esConcreto
	^tipo = #Concreto! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:20' overrides: 50687374!
esConcreto
	^tipo = #Concreto! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:20' overrides: 50687374!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:20' prior: 50687374!
esConcreto

	self subclassResponsibility! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:24' overrides: 50687378!
esTierra
	^tipo = #Tierra! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:24' overrides: 50687378!
esTierra
	^tipo = #Tierra! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:24' overrides: 50687378!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:24' prior: 50687378!
esTierra

	self subclassResponsibility! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:34' prior: 50692454 overrides: 50692462!
esArenoso
	^true! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:41' prior: 50692471 overrides: 50692479!
esConcreto
	^false! !
!SueloArena methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:48' prior: 50692488 overrides: 50692496!
esTierra
	^false! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:54:57' prior: 50692458 overrides: 50692462!
esArenoso
	^false! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:55:03' prior: 50692475 overrides: 50692479!
esConcreto
	^true! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:55:11' prior: 50692492 overrides: 50692496!
esTierra
	^false! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:55:19' prior: 50692450 overrides: 50692462!
esArenoso
	^false! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:55:24' prior: 50692467 overrides: 50692479!
esConcreto
	^false! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:55:32' prior: 50692484 overrides: 50692496!
esTierra
	^true! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:55:36'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:55:36'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:55:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:55:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:55:36'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:55:36'!
ERROR!
!SueloArena methodsFor: 'nil' stamp: 'camila 9/22/2023 00:56:02' overrides: 50687382!
= unObjeto
	^unObjeto = #Arenoso! !
!SueloConcreto methodsFor: 'nil' stamp: 'camila 9/22/2023 00:56:17' overrides: 50687382!
= unObjeto
	^unObjeto = #Concreto! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 00:56:27' overrides: 50687382!
= unObjeto
	^unObjeto = #Tierra! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:56:30'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:56:30'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:56:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:56:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:56:30'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:56:30'!
ERROR!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 00:57:08' prior: 50687355!
initializeArenoso
	
	tipo := SueloArena new.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 00:57:16' prior: 50687360!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 00:57:28' prior: 50687367!
initializeTierra
	
	tipo := SueloTierra new.
	altura := nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:57:29'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:57:29'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:57:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:57:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:57:29'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:57:29'!
ERROR!
!Perforadora methodsFor: 'cambiar capa' stamp: 'camila 9/22/2023 00:58:39' prior: 50687473!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: SueloArena new;
			yourself! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 00:58:40'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 00:58:40'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 00:58:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 00:58:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 00:58:40'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 00:58:43'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:00:26' prior: 50687055!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena new.
			SueloTierra new.
			SueloConcreto conResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!SueloConcreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:01:10' overrides: 50692709!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'camila 9/22/2023 01:01:23'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:01:57' prior: 50692890!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena new.
			SueloTierra new.
			SueloConcreto with: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!SueloConcreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:02:20'!
initializeWith: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:02:59' prior: 50692921!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena new.
			SueloTierra new.
			SueloConcreto with: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: SueloTierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:03:04'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:03:04'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:53' prior: 50692943!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 01:05:09' prior: 50687382 overrides: 16901772!
= unaCapaDeSuelo
	self subclassResponsibility 
	"^(unaCapaDeSuelo isKindOf: self class) and: [ tipo = unaCapaDeSuelo tipo and: [resistencia = unaCapaDeSuelo resistencia]]"! !
!SueloArena methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:05:24' prior: 50692614 overrides: 50692983!
= unObjeto
	^unObjeto = #Arenoso and: resistencia = unObjeto resistencia! !
!SueloConcreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:05:48' prior: 50692618 overrides: 50692983!
= unObjeto
	^unObjeto = #Concreto and: resistencia = unObjeto resistencia! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 01:05:55' prior: 50692622 overrides: 50692983!
= unObjeto
	^unObjeto = #Tierra and: resistencia = unObjeto resistencia! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 01:05:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 01:05:59'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:06:06'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:06:15'!
ERROR!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 01:06:44'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 01:06:46'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 01:06:46'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 01:06:46'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 01:06:46'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:06:50'!
ERROR!

----SNAPSHOT----(22 September 2023 01:07:22) CuisUniversity-5981.image priorSource: 11535677!
!SueloArena methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:08:01' overrides: 50692704!
initializeArenoso
	
	tipo := SueloArena new.
	altura := nil.! !
!SueloConcreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 01:08:14' prior: 50692906 overrides: 50693097!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := SueloConcreto new.
	altura := nil.! !
!SueloTierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 01:08:28' overrides: 50692717!
initializeTierra
	
	tipo := SueloTierra new.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 01:08:41' prior: 50692704!
initializeArenoso
	 self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 01:08:46' prior: 50693097!
initializeConcretoConResistencia: resistenciaInicial 

	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'camila 9/22/2023 01:08:49' prior: 50692717!
initializeTierra
	
	self subclassResponsibility ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 01:08:50'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 01:08:51'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 01:08:51'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 01:08:51'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 01:08:51'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 01:08:51'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:08:53'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:09:42' prior: 50692966!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena arenoso.
			SueloTierra tierra.
			SueloConcreto concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:09:46'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:09:46'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:10:14' prior: 50693307!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena arenoso.
			SueloTierra tierra.
			SueloConcreto concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: SueloTierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:10:19'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:10:19'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 01:12:56' prior: 50693332!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			SueloArena arenoso.
			SueloTierra tierra.
			SueloConcreto concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: SueloTierra tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:13:14'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:13:14'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:13:40'!
ERROR!

!methodRemoval: SueloArena #= stamp: 'camila 9/22/2023 01:14:22'!
= unObjeto
	^unObjeto = #Arenoso and: resistencia = unObjeto resistencia!
!SueloConcreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:14:34' prior: 50693000 overrides: 50692983!
= unObjeto
	^resistencia = unObjeto resistencia! !

!methodRemoval: SueloTierra #= stamp: 'camila 9/22/2023 01:14:43'!
= unObjeto
	^unObjeto = #Tierra and: resistencia = unObjeto resistencia!
!SueloConcreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 01:15:17' prior: 50693390 overrides: 50692983!
= unObjeto
	^unObjeto isKindOf: self and: resistencia = unObjeto resistencia! !

!methodRemoval: SueloConcreto #= stamp: 'camila 9/22/2023 01:15:26'!
= unObjeto
	^unObjeto isKindOf: self and: resistencia = unObjeto resistencia!

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 01:15:35'!
= unaCapaDeSuelo
	self subclassResponsibility 
	"^(unaCapaDeSuelo isKindOf: self class) and: [ tipo = unaCapaDeSuelo tipo and: [resistencia = unaCapaDeSuelo resistencia]]"!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 01:15:40'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 01:15:52'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:15:59'!
FAILURE!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 01:15:59'!
FAILURE!

----SNAPSHOT----(22 September 2023 01:16:56) CuisUniversity-5981.image priorSource: 11569120!

----STARTUP---- (22 September 2023 17:14:27) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:14:57' prior: 50687431!
arenoso

	^SueloArena new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:03' prior: 50687435!
concretoConResistencia: resistencia 

	^SueloConcreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:11' prior: 50687441!
tierra

	^SueloTierra new initializeTierra! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:15:12'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:15:12'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:15:23'!
FAILURE!

!classRemoval: #SinMecha stamp: 'camila 9/22/2023 17:16:19'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'camila 9/22/2023 17:16:19'!
TipoDeMecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'camila 9/22/2023 17:16:19'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/22/2023 17:16:20'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/22/2023 17:16:20'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #ConMecha stamp: 'camila 9/22/2023 17:16:20'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeMecha stamp: 'camila 9/22/2023 17:16:20'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/22/2023 17:16:20'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloTierra stamp: 'camila 9/22/2023 17:16:20'!
CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloConcreto stamp: 'camila 9/22/2023 17:16:21'!
CapaDeSuelo subclass: #SueloConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloArena stamp: 'camila 9/22/2023 17:16:21'!
CapaDeSuelo subclass: #SueloArena
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/22/2023 17:16:21'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/22/2023 17:16:21'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:16:52'!
PASSED!

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:17:47'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:17:52'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:17:56'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:03' prior: 50694036!
arenoso

	^Arenoso new initializeArenoso! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:18:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:18:04'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:10' prior: 50694040!
concretoConResistencia: resistencia 

	^Concreto new initializeConcretoConResistencia: resistencia ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:18:12'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:18:12'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:17' prior: 50694046!
tierra

	^Tierra new initializeTierra! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:18:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:18:18'!
PASSED!
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:19:10' prior: 50694184!
sinMecha

	^mechaPuesta = SinMecha new! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:19:11'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:20:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:20:16'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:22:12' prior: 50694091!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	"self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!CapaDeSuelo methodsFor: 'nil' stamp: 'camila 9/22/2023 17:23:34'!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50694981!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50694981!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50694981!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50694981!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora

	self subclassResponsibility! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:20' prior: 50694987 overrides: 50695006!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloArenosoCon: unaPerforadora.
	
	! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:45' prior: 50695000 overrides: 50695006!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloConcretoCon: unaPerforadora 
	! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:25:05' prior: 50694993 overrides: 50695006!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloTierraCon: unaPerforadora ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:25:05'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:25:07'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:25:07'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:27:02' prior: 50694966!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50693976!
esArenoso
	^tipo = #Arenoso! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50693976!
esArenoso
	^tipo = #Arenoso! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50693976!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50693976!
esArenoso

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50693979!
esConcreto
	^tipo = #Concreto! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50693979!
esConcreto
	^tipo = #Concreto! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50693979!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50693979!
esConcreto

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50693983!
esTierra
	^tipo = #Tierra! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50693983!
esTierra
	^tipo = #Tierra! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50693983!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50693983!
esTierra

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:28' prior: 50695200 overrides: 50695212!
esArenoso
	^true! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:39' prior: 50695216 overrides: 50695228!
esConcreto
	^false! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:44' prior: 50695232 overrides: 50695244!
esTierra
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:52' prior: 50695208 overrides: 50695212!
esArenoso
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:59' prior: 50695224 overrides: 50695228!
esConcreto
	^true! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:04' prior: 50695240 overrides: 50695244!
esTierra
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:12' prior: 50695204 overrides: 50695212!
esArenoso
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:17' prior: 50695220 overrides: 50695228!
esConcreto
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:22' prior: 50695236 overrides: 50695244!
esTierra
	^true! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:29:39'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:29:39'!
PASSED!
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:46' overrides: 50693960!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'camila 9/22/2023 17:30:46'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.!
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:55' overrides: 50693965!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'camila 9/22/2023 17:30:55'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.!
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:31:02' overrides: 50693972!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'camila 9/22/2023 17:31:02'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:31:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:31:19'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:32:13' prior: 50693987 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:33:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:33:15'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:20' prior: 50695476 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:33:23'!
PASSED!

!methodRemoval: CapaDeSuelo #tipo stamp: 'camila 9/22/2023 17:33:40'!
tipo

	^tipo!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:55' prior: 50693995 overrides: 16901788!
hash

	^resistencia hash! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:33:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:33:56'!
PASSED!
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:16' prior: 50695363!
initializeArenoso
	
	altura := nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:34:17'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:34:17'!
PASSED!
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:23' prior: 50695373!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:31' prior: 50695388!
initializeTierra
	
	altura := nil.! !

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:35:03'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:35:07'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:35:07'!
PASSED!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:35:58' overrides: 50693999!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:35:58'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:36:28' overrides: 50695561!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 17:36:28'!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] !
!Concreto methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:36:52' overrides: 50694011!
resistencia

	^ resistencia.! !

!methodRemoval: CapaDeSuelo #resistencia stamp: 'camila 9/22/2023 17:36:52'!
resistencia

	^ resistencia.!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:37:05' overrides: 50695649!
hash

	^resistencia hash! !

!methodRemoval: CapaDeSuelo #hash stamp: 'camila 9/22/2023 17:37:05'!
hash

	^resistencia hash!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:37:24' overrides: 50694004!
sinResistencia
	^resistencia = 0! !

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'camila 9/22/2023 17:37:24'!
sinResistencia
	^resistencia = 0!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:08' overrides: 16901772!
= anObject
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:15' overrides: 50695961!
= anObject
	self subclassResponsibility ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 17:38:15'!
= anObject
	self subclassResponsibility !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:28' overrides: 16901772!
= unObjecto
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:39:04' prior: 50695966 overrides: 50695974!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:39:13' overrides: 50695974!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:39:25'!
PASSED!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:42:16'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:42:20'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:42:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:42:22'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11'!
SueloArenosoDeAltura2

	^ CapaDeSuelo arenoso setAltura: 2! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693862!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693850!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693888!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693917!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693932!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693902!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50693875!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:50:20'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:50:20'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:46' prior: 50696202!
 test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:50:58'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 17:51:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 17:51:01'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27'!
SueloTierraDeAltura40

	^ CapaDeSuelo tierra setAltura: 40! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696175!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696189!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696356!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696216!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696231!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696246!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50696261!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 17:51:29'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 17:51:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 17:51:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 17:51:29'!
PASSED!

----STARTUP---- (22 September 2023 17:52:56) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:14:57' prior: 50687431!
arenoso

	^SueloArena new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:03' prior: 50687435!
concretoConResistencia: resistencia 

	^SueloConcreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:11' prior: 50687441!
tierra

	^SueloTierra new initializeTierra! !

!classRemoval: #SinMecha stamp: 'camila 9/22/2023 17:53:00'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'camila 9/22/2023 17:53:00'!
TipoDeMecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'camila 9/22/2023 17:53:00'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/22/2023 17:53:00'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/22/2023 17:53:00'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #ConMecha stamp: 'camila 9/22/2023 17:53:00'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeMecha stamp: 'camila 9/22/2023 17:53:01'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/22/2023 17:53:02'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloTierra stamp: 'camila 9/22/2023 17:53:02'!
CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloConcreto stamp: 'camila 9/22/2023 17:53:02'!
CapaDeSuelo subclass: #SueloConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloArena stamp: 'camila 9/22/2023 17:53:02'!
CapaDeSuelo subclass: #SueloArena
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/22/2023 17:53:02'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/22/2023 17:53:03'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:53'!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:58'!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:21:09'!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:05'!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:09'!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:02:45'!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:03:00'!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:43'!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:48'!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 4/27/2023 21:54:59'!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'HAW 5/3/2023 22:34:18'!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:32:12'!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 16:46:32'!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:24'!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:37'!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:48'!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:17'!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:45'!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:11:10'!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:54'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'ARM 5/8/2023 13:10:22'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:42'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:13:01'!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:15:50'!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:14:55'!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ tipo = unaCapaDeSuelo tipo and: [resistencia = unaCapaDeSuelo resistencia]]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901788!
hash

	^tipo hash + resistencia hash! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
sinResistencia
	^resistencia = 0! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'FRT 5/5/2023 16:48:52'!
altura

	^ altura.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 5/8/2023 13:10:35'!
resistencia

	^ resistencia.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:18:41'!
tipo

	^tipo! !
!CapaDeSuelo methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:31:36'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !
!CapaDeSuelo methodsFor: 'setters' stamp: 'FRT 5/5/2023 16:07:55'!
setAltura: unaAltura

	altura := unaAltura! !

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo class
	instanceVariableNames: ''!

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo class
	instanceVariableNames: ''!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:02:32'!
arenoso

	^self new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 5/5/2023 18:01:35'!
concretoConResistencia: resistencia 

	^self new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:03:15'!
tierra

	^self new initializeTierra! !

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 5/1/2023 20:07:29'!
pasarAProximaCapa
	vecesQueGolpeoCapaActual := 0.
	capasDeSueloDebajo := capasDeSueloDebajo allButFirst.
	capasDeSueloDebajo ifEmpty: [^self]. 
	(capasDeSueloDebajo first isKindOf: CapaDeSuelo) ifFalse:[
			container addAll: capasDeSueloDebajo.
		]! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 4/27/2023 20:46:30'!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: CapaDeSuelo arenoso;
			yourself! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:21'!
SignalNoSePuedePerforar

	^ self error: 'No puede perforar'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:06'!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:16'!
darGolpeDeTaladro
		
	
	mechaPuesta darGolpeCon: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:59:04'!
darGolpeEnSueloArenosoConMechaDiamante

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:57:42'!
darGolpeEnSueloArenosoConMechaSoft

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:28'!
darGolpeEnSueloArenosoConMechaWidia

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:55'!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:22'!
darGolpeEnSueloConcretoConMechaSoft

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:05'!
darGolpeEnSueloConcretoConMechaWidia

	^ vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:17'!
darGolpeEnSueloTierraConMechaDiamante

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:00:41'!
darGolpeEnSueloTierraConMechaSoft
! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:40'!
darGolpeEnSueloTierraConMechaWidia

	^ vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ]! !
!Perforadora methodsFor: 'initialization' stamp: 'camila 9/21/2023 23:32:47'!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:17:21'!
capaDeSueloInmediata
	^capasDeSueloDebajo first! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:20:54'!
conMechaRota

	^mechaPuesta = #Rota! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:12:20'!
elementsInContainer
	^container asArray! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:54:43'!
sinMecha

	^mechaPuesta = #SinMecha! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:17'!
sobreSueloArenoso
	^capasDeSueloDebajo first esArenoso! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:16:14'!
sobreSueloConcreto
	^capasDeSueloDebajo first esConcreto! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:58'!
sobreSueloTierra
	^capasDeSueloDebajo first esTierra! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:32'!
ponerMechaDiamante
	mechaPuesta := Diamante new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:38'!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:43'!
ponerMechaWidia
	mechaPuesta := Widia new! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:47:46'!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:16:25'!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:17:32'!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc! !

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Perforadora class
	instanceVariableNames: ''!

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Perforadora class
	instanceVariableNames: ''!
!Perforadora class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:07:05'!
sobreSuelo: capasDeSueloAExcavar 

	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57'!
darGolpeEnSueloArenosoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04'!
darGolpeEnSueloConcretoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07'!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!ConMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:31:36'!
darGolpeCon: unaPerforadora
	unaPerforadora darGolpeConMechaPuesta! !

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:18' overrides: 50697366!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaDiamante! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:24:04' overrides: 50697371!
darGolpeEnSueloConcretoCon: unaPerforadora

			^unaPerforadora darGolpeEnSueloConcretoConMechaDiamante.
			"^vecesQueGolpeoCapaActual"! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:25' overrides: 50697376!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaDiamante ! !

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:37' overrides: 50697366!
darGolpeEnSueloArenosoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloArenosoConMechaSoft! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:25' overrides: 50697371!
darGolpeEnSueloConcretoCon: unaPerforadora

	^unaPerforadora darGolpeEnSueloConcretoConMechaSoft  ! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:45' overrides: 50697376!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora  darGolpeEnSueloTierraConMechaSoft 
! !

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:54' overrides: 50697366!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:50' overrides: 50697371!
darGolpeEnSueloConcretoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloConcretoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:19:00' overrides: 50697376!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaWidia 
! !

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:29:59'!
darGolpeCon: unaPerforadora
	unaPerforadora SignalNoSePuedePerforar! !

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:03'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:03' prior: 50697101!
arenoso

	^Arenoso new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:10' prior: 50697105!
concretoConResistencia: resistencia 

	^Concreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:17' prior: 50697111!
tierra

	^Tierra new initializeTierra! !
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:19:10' prior: 50697252!
sinMecha

	^mechaPuesta = SinMecha new! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:22:12' prior: 50697159!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	"self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!CapaDeSuelo methodsFor: 'nil' stamp: 'camila 9/22/2023 17:23:34'!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50697610!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50697610!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50697610!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50697610!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora

	self subclassResponsibility! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:20' prior: 50697616 overrides: 50697635!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloArenosoCon: unaPerforadora.
	
	! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:45' prior: 50697629 overrides: 50697635!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloConcretoCon: unaPerforadora 
	! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:25:05' prior: 50697622 overrides: 50697635!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloTierraCon: unaPerforadora ! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:27:02' prior: 50697595!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50697040!
esArenoso
	^tipo = #Arenoso! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50697040!
esArenoso
	^tipo = #Arenoso! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50697040!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50697040!
esArenoso

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50697043!
esConcreto
	^tipo = #Concreto! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50697043!
esConcreto
	^tipo = #Concreto! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50697043!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50697043!
esConcreto

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50697047!
esTierra
	^tipo = #Tierra! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50697047!
esTierra
	^tipo = #Tierra! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50697047!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50697047!
esTierra

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:28' prior: 50697673 overrides: 50697685!
esArenoso
	^true! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:39' prior: 50697689 overrides: 50697701!
esConcreto
	^false! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:44' prior: 50697705 overrides: 50697717!
esTierra
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:52' prior: 50697681 overrides: 50697685!
esArenoso
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:59' prior: 50697697 overrides: 50697701!
esConcreto
	^true! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:04' prior: 50697713 overrides: 50697717!
esTierra
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:12' prior: 50697677 overrides: 50697685!
esArenoso
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:17' prior: 50697693 overrides: 50697701!
esConcreto
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:22' prior: 50697709 overrides: 50697717!
esTierra
	^true! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:46' overrides: 50697024!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'camila 9/22/2023 17:53:03'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.!
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:55' overrides: 50697029!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'camila 9/22/2023 17:53:03'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.!
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:31:02' overrides: 50697036!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'camila 9/22/2023 17:53:03'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:32:13' prior: 50697051 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:20' prior: 50697793 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #tipo stamp: 'camila 9/22/2023 17:53:04'!
tipo

	^tipo!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:55' prior: 50697059 overrides: 16901788!
hash

	^resistencia hash! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:16' prior: 50697758!
initializeArenoso
	
	altura := nil.! !
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:23' prior: 50697768!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:31' prior: 50697783!
initializeTierra
	
	altura := nil.! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:35:58' overrides: 50697063!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 17:53:04'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:36:28' overrides: 50697800!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 17:53:04'!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] !
!Concreto methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:36:52' overrides: 50697075!
resistencia

	^ resistencia.! !

!methodRemoval: CapaDeSuelo #resistencia stamp: 'camila 9/22/2023 17:53:04'!
resistencia

	^ resistencia.!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:37:05' overrides: 50697810!
hash

	^resistencia hash! !

!methodRemoval: CapaDeSuelo #hash stamp: 'camila 9/22/2023 17:53:04'!
hash

	^resistencia hash!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:37:24' overrides: 50697068!
sinResistencia
	^resistencia = 0! !

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'camila 9/22/2023 17:53:04'!
sinResistencia
	^resistencia = 0!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:08' overrides: 16901772!
= anObject
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:15' overrides: 50697892!
= anObject
	self subclassResponsibility ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 17:53:04'!
= anObject
	self subclassResponsibility !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:28' overrides: 16901772!
= unObjecto
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:39:04' prior: 50697897 overrides: 50697905!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:39:13' overrides: 50697905!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 17:53:04'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11'!
SueloArenosoDeAltura2

	^ CapaDeSuelo arenoso setAltura: 2! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696922!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696910!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696948!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696977!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696992!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696962!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50696935!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:46' prior: 50697983!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27'!
SueloTierraDeAltura40

	^ CapaDeSuelo tierra setAltura: 40! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50697956!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50697970!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50698056!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50697997!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50698012!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50698027!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50698042!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:59:56' prior: 50697573!
arenoso

	^Arenoso conAlturaDe: 0! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:01:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:01:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:01:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:01:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:01:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:01:05'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:01:08'!
ERROR!
!CapaDeSuelo class methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 18:01:27'!
conAlturaDe: aRenameMe1 
	self shouldBeImplemented.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:02:51' prior: 50698260!
conAlturaDe: unaAltura
	^Arenoso new initializeArenosoConAltura: unaAltura ! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:03:11'!
initializeArenosoConAltura: unaAltura
	
	altura := unaAltura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:03:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:03:13'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:03:56' prior: 50697585!
tierra

	^Tierra conAlturaDe: 0! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:03:57'!
FAILURE!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:03:57'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:03:57'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:03:57'!
FAILURE!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:03:57'!
FAILURE!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:03:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:03:57'!
FAILURE!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:03:57'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:04:07' prior: 50698265!
conAlturaDe: unaAltura
	^self new initializeArenosoConAltura: unaAltura ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:04:08'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:04:08'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:04:08'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:04:08'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:04:08'!
ERROR!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:06:32' prior: 50698437!
conAlturaDe: unaAltura
	^self new initializeConAltura: unaAltura ! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:06:54'!
initializeConAltura: unaAltura
	
	altura := unaAltura.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:07:01'!
initializeConAltura: unaAltura
	
	altura := unaAltura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:07:02'!
PASSED!

----STARTUP---- (22 September 2023 18:08:28) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:14:57' prior: 50687431!
arenoso

	^SueloArena new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:03' prior: 50687435!
concretoConResistencia: resistencia 

	^SueloConcreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:11' prior: 50687441!
tierra

	^SueloTierra new initializeTierra! !

!classRemoval: #SinMecha stamp: 'camila 9/22/2023 18:08:30'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'camila 9/22/2023 18:08:31'!
TipoDeMecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'camila 9/22/2023 18:08:31'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/22/2023 18:08:31'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/22/2023 18:08:31'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #ConMecha stamp: 'camila 9/22/2023 18:08:31'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeMecha stamp: 'camila 9/22/2023 18:08:31'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/22/2023 18:08:31'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloTierra stamp: 'camila 9/22/2023 18:08:32'!
CapaDeSuelo subclass: #SueloTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloConcreto stamp: 'camila 9/22/2023 18:08:32'!
CapaDeSuelo subclass: #SueloConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SueloArena stamp: 'camila 9/22/2023 18:08:32'!
CapaDeSuelo subclass: #SueloArena
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/22/2023 18:08:32'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/22/2023 18:08:32'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:32'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:32'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:53'!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:58'!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:21:09'!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:05'!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:09'!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:02:45'!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:03:00'!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:43'!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:48'!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 4/27/2023 21:54:59'!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'HAW 5/3/2023 22:34:18'!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:32:12'!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 16:46:32'!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:24'!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:37'!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:48'!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:17'!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:45'!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:11:10'!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:54'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'ARM 5/8/2023 13:10:22'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:42'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:13:01'!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:15:50'!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:14:55'!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ tipo = unaCapaDeSuelo tipo and: [resistencia = unaCapaDeSuelo resistencia]]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901788!
hash

	^tipo hash + resistencia hash! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
sinResistencia
	^resistencia = 0! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'FRT 5/5/2023 16:48:52'!
altura

	^ altura.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 5/8/2023 13:10:35'!
resistencia

	^ resistencia.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:18:41'!
tipo

	^tipo! !
!CapaDeSuelo methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:31:36'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !
!CapaDeSuelo methodsFor: 'setters' stamp: 'FRT 5/5/2023 16:07:55'!
setAltura: unaAltura

	altura := unaAltura! !

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo class
	instanceVariableNames: ''!

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo class
	instanceVariableNames: ''!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:02:32'!
arenoso

	^self new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 5/5/2023 18:01:35'!
concretoConResistencia: resistencia 

	^self new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:03:15'!
tierra

	^self new initializeTierra! !

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 5/1/2023 20:07:29'!
pasarAProximaCapa
	vecesQueGolpeoCapaActual := 0.
	capasDeSueloDebajo := capasDeSueloDebajo allButFirst.
	capasDeSueloDebajo ifEmpty: [^self]. 
	(capasDeSueloDebajo first isKindOf: CapaDeSuelo) ifFalse:[
			container addAll: capasDeSueloDebajo.
		]! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 4/27/2023 20:46:30'!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: CapaDeSuelo arenoso;
			yourself! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:21'!
SignalNoSePuedePerforar

	^ self error: 'No puede perforar'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:06'!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:16'!
darGolpeDeTaladro
		
	
	mechaPuesta darGolpeCon: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:59:04'!
darGolpeEnSueloArenosoConMechaDiamante

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:57:42'!
darGolpeEnSueloArenosoConMechaSoft

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:28'!
darGolpeEnSueloArenosoConMechaWidia

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:55'!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:22'!
darGolpeEnSueloConcretoConMechaSoft

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:05'!
darGolpeEnSueloConcretoConMechaWidia

	^ vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:17'!
darGolpeEnSueloTierraConMechaDiamante

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:00:41'!
darGolpeEnSueloTierraConMechaSoft
! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:40'!
darGolpeEnSueloTierraConMechaWidia

	^ vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ]! !
!Perforadora methodsFor: 'initialization' stamp: 'camila 9/21/2023 23:32:47'!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:17:21'!
capaDeSueloInmediata
	^capasDeSueloDebajo first! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:20:54'!
conMechaRota

	^mechaPuesta = #Rota! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:12:20'!
elementsInContainer
	^container asArray! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:54:43'!
sinMecha

	^mechaPuesta = #SinMecha! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:17'!
sobreSueloArenoso
	^capasDeSueloDebajo first esArenoso! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:16:14'!
sobreSueloConcreto
	^capasDeSueloDebajo first esConcreto! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:58'!
sobreSueloTierra
	^capasDeSueloDebajo first esTierra! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:32'!
ponerMechaDiamante
	mechaPuesta := Diamante new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:38'!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:43'!
ponerMechaWidia
	mechaPuesta := Widia new! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:47:46'!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:16:25'!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:17:32'!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc! !

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Perforadora class
	instanceVariableNames: ''!

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Perforadora class
	instanceVariableNames: ''!
!Perforadora class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:07:05'!
sobreSuelo: capasDeSueloAExcavar 

	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57'!
darGolpeEnSueloArenosoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04'!
darGolpeEnSueloConcretoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07'!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!ConMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:31:36'!
darGolpeCon: unaPerforadora
	unaPerforadora darGolpeConMechaPuesta! !

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:18' overrides: 50699310!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaDiamante! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:24:04' overrides: 50699315!
darGolpeEnSueloConcretoCon: unaPerforadora

			^unaPerforadora darGolpeEnSueloConcretoConMechaDiamante.
			"^vecesQueGolpeoCapaActual"! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:25' overrides: 50699320!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaDiamante ! !

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:37' overrides: 50699310!
darGolpeEnSueloArenosoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloArenosoConMechaSoft! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:25' overrides: 50699315!
darGolpeEnSueloConcretoCon: unaPerforadora

	^unaPerforadora darGolpeEnSueloConcretoConMechaSoft  ! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:45' overrides: 50699320!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora  darGolpeEnSueloTierraConMechaSoft 
! !

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:54' overrides: 50699310!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:50' overrides: 50699315!
darGolpeEnSueloConcretoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloConcretoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:19:00' overrides: 50699320!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaWidia 
! !

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:29:59'!
darGolpeCon: unaPerforadora
	unaPerforadora SignalNoSePuedePerforar! !

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:33'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:03' prior: 50699045!
arenoso

	^Arenoso new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:10' prior: 50699049!
concretoConResistencia: resistencia 

	^Concreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:17' prior: 50699055!
tierra

	^Tierra new initializeTierra! !
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:19:10' prior: 50699196!
sinMecha

	^mechaPuesta = SinMecha new! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:22:12' prior: 50699103!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	"self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!CapaDeSuelo methodsFor: 'nil' stamp: 'camila 9/22/2023 17:23:34'!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50699554!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50699554!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' overrides: 50699554!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50699554!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora

	self subclassResponsibility! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:20' prior: 50699560 overrides: 50699579!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloArenosoCon: unaPerforadora.
	
	! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:45' prior: 50699573 overrides: 50699579!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloConcretoCon: unaPerforadora 
	! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:25:05' prior: 50699566 overrides: 50699579!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloTierraCon: unaPerforadora ! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:27:02' prior: 50699539!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50698984!
esArenoso
	^tipo = #Arenoso! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50698984!
esArenoso
	^tipo = #Arenoso! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' overrides: 50698984!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50698984!
esArenoso

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50698987!
esConcreto
	^tipo = #Concreto! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50698987!
esConcreto
	^tipo = #Concreto! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' overrides: 50698987!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50698987!
esConcreto

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50698991!
esTierra
	^tipo = #Tierra! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50698991!
esTierra
	^tipo = #Tierra! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' overrides: 50698991!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50698991!
esTierra

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:28' prior: 50699617 overrides: 50699629!
esArenoso
	^true! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:39' prior: 50699633 overrides: 50699645!
esConcreto
	^false! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:44' prior: 50699649 overrides: 50699661!
esTierra
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:52' prior: 50699625 overrides: 50699629!
esArenoso
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:59' prior: 50699641 overrides: 50699645!
esConcreto
	^true! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:04' prior: 50699657 overrides: 50699661!
esTierra
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:12' prior: 50699621 overrides: 50699629!
esArenoso
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:17' prior: 50699637 overrides: 50699645!
esConcreto
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:22' prior: 50699653 overrides: 50699661!
esTierra
	^true! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:46' overrides: 50698968!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'camila 9/22/2023 18:08:33'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.!
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:55' overrides: 50698973!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'camila 9/22/2023 18:08:33'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.!
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:31:02' overrides: 50698980!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'camila 9/22/2023 18:08:33'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:32:13' prior: 50698995 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:20' prior: 50699737 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #tipo stamp: 'camila 9/22/2023 18:08:33'!
tipo

	^tipo!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:55' prior: 50699003 overrides: 16901788!
hash

	^resistencia hash! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:16' prior: 50699702!
initializeArenoso
	
	altura := nil.! !
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:23' prior: 50699712!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:31' prior: 50699727!
initializeTierra
	
	altura := nil.! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:35:58' overrides: 50699007!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:08:34'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:36:28' overrides: 50699744!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 18:08:34'!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] !
!Concreto methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:36:52' overrides: 50699019!
resistencia

	^ resistencia.! !

!methodRemoval: CapaDeSuelo #resistencia stamp: 'camila 9/22/2023 18:08:34'!
resistencia

	^ resistencia.!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:37:05' overrides: 50699754!
hash

	^resistencia hash! !

!methodRemoval: CapaDeSuelo #hash stamp: 'camila 9/22/2023 18:08:34'!
hash

	^resistencia hash!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:37:24' overrides: 50699012!
sinResistencia
	^resistencia = 0! !

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'camila 9/22/2023 18:08:34'!
sinResistencia
	^resistencia = 0!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:08' overrides: 16901772!
= anObject
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:15' overrides: 50699836!
= anObject
	self subclassResponsibility ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 18:08:34'!
= anObject
	self subclassResponsibility !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:28' overrides: 16901772!
= unObjecto
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:39:04' prior: 50699841 overrides: 50699849!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:39:13' overrides: 50699849!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:34'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11'!
SueloArenosoDeAltura2

	^ CapaDeSuelo arenoso setAltura: 2! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698866!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698854!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698892!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698921!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698936!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698906!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50698879!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:46' prior: 50699927!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27'!
SueloTierraDeAltura40

	^ CapaDeSuelo tierra setAltura: 40! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699900!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699914!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50700000!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699941!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699956!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699971!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50699986!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:14:57' prior: 50699517!
arenoso

	^SueloArena new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:03' prior: 50699522!
concretoConResistencia: resistencia 

	^SueloConcreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:15:11' prior: 50699529!
tierra

	^SueloTierra new initializeTierra! !

!classRemoval: #SinMecha stamp: 'camila 9/22/2023 18:08:34'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'camila 9/22/2023 18:08:34'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/22/2023 18:08:34'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/22/2023 18:08:34'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #ConMecha stamp: 'camila 9/22/2023 18:08:34'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeMecha stamp: 'camila 9/22/2023 18:08:35'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/22/2023 18:08:35'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/22/2023 18:08:35'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/22/2023 18:08:35'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:35'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:35'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:53'!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:58:58'!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:21:09'!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:05'!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:09'!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:02:45'!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 18:03:00'!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:43'!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/8/2023 13:10:48'!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 4/27/2023 21:54:59'!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'HAW 5/3/2023 22:34:18'!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/21/2023 23:32:12'!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 16:46:32'!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:24'!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:37'!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:08:48'!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:17'!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:10:45'!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'FRT 5/5/2023 17:11:10'!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:54'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'ARM 5/8/2023 13:10:22'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'FRT 5/5/2023 16:08:42'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:13:01'!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:15:50'!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'ARM 4/27/2023 20:14:55'!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ tipo = unaCapaDeSuelo tipo and: [resistencia = unaCapaDeSuelo resistencia]]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'ARM 5/8/2023 13:10:22' overrides: 16901788!
hash

	^tipo hash + resistencia hash! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !
!CapaDeSuelo methodsFor: 'bajar resistencia' stamp: 'ARM 5/8/2023 13:10:22'!
sinResistencia
	^resistencia = 0! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'FRT 5/5/2023 16:48:52'!
altura

	^ altura.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 5/8/2023 13:10:35'!
resistencia

	^ resistencia.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:18:41'!
tipo

	^tipo! !
!CapaDeSuelo methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:31:36'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !
!CapaDeSuelo methodsFor: 'setters' stamp: 'FRT 5/5/2023 16:07:55'!
setAltura: unaAltura

	altura := unaAltura! !

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo class
	instanceVariableNames: ''!

!classDefinition: 'CapaDeSuelo class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo class
	instanceVariableNames: ''!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:02:32'!
arenoso

	^self new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 5/5/2023 18:01:35'!
concretoConResistencia: resistencia 

	^self new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:03:15'!
tierra

	^self new initializeTierra! !

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 5/1/2023 20:07:29'!
pasarAProximaCapa
	vecesQueGolpeoCapaActual := 0.
	capasDeSueloDebajo := capasDeSueloDebajo allButFirst.
	capasDeSueloDebajo ifEmpty: [^self]. 
	(capasDeSueloDebajo first isKindOf: CapaDeSuelo) ifFalse:[
			container addAll: capasDeSueloDebajo.
		]! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'ARM 4/27/2023 20:46:30'!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: CapaDeSuelo arenoso;
			yourself! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:29:21'!
SignalNoSePuedePerforar

	^ self error: 'No puede perforar'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:06'!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self].
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:31:16'!
darGolpeDeTaladro
		
	
	mechaPuesta darGolpeCon: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:59:04'!
darGolpeEnSueloArenosoConMechaDiamante

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:57:42'!
darGolpeEnSueloArenosoConMechaSoft

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 22:58:28'!
darGolpeEnSueloArenosoConMechaWidia

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:24:55'!
darGolpeEnSueloConcretoConMechaDiamante

	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ self transformarCapaEnArenoso]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:09:22'!
darGolpeEnSueloConcretoConMechaSoft

	mechaPuesta := #Rota. self error: 'Se rompió'! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:10:05'!
darGolpeEnSueloConcretoConMechaWidia

	^ vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ]! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:03:17'!
darGolpeEnSueloTierraConMechaDiamante

	^ self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:00:41'!
darGolpeEnSueloTierraConMechaSoft
! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/21/2023 23:08:40'!
darGolpeEnSueloTierraConMechaWidia

	^ vecesQueGolpeoCapaActual = 2 ifTrue: [ self transformarCapaEnArenoso ]! !
!Perforadora methodsFor: 'initialization' stamp: 'camila 9/21/2023 23:32:47'!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 20:17:21'!
capaDeSueloInmediata
	^capasDeSueloDebajo first! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:20:54'!
conMechaRota

	^mechaPuesta = #Rota! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:12:20'!
elementsInContainer
	^container asArray! !
!Perforadora methodsFor: 'accessing' stamp: 'ARM 4/27/2023 21:54:43'!
sinMecha

	^mechaPuesta = #SinMecha! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:17'!
sobreSueloArenoso
	^capasDeSueloDebajo first esArenoso! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:16:14'!
sobreSueloConcreto
	^capasDeSueloDebajo first esConcreto! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'ARM 4/27/2023 20:13:58'!
sobreSueloTierra
	^capasDeSueloDebajo first esTierra! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:32'!
ponerMechaDiamante
	mechaPuesta := Diamante new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:38'!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'camila 9/21/2023 23:19:43'!
ponerMechaWidia
	mechaPuesta := Widia new! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:47:46'!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:16:25'!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 17:17:32'!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc! !

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Perforadora class
	instanceVariableNames: ''!

!classDefinition: 'Perforadora class' category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Perforadora class
	instanceVariableNames: ''!
!Perforadora class methodsFor: 'instance creation' stamp: 'ARM 4/27/2023 20:07:05'!
sobreSuelo: capasDeSueloAExcavar 

	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TipoDeMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:14:57'!
darGolpeEnSueloArenosoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:04'!
darGolpeEnSueloConcretoCon: unaPerforadora

	self subclassResponsibility! !
!TipoDeMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:15:07'!
darGolpeEnSueloTierraCon: unaPerforadora

	self subclassResponsibility! !

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #ConMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!ConMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:31:36'!
darGolpeCon: unaPerforadora
	unaPerforadora darGolpeConMechaPuesta! !

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:18' overrides: 50700858!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaDiamante! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:24:04' overrides: 50700863!
darGolpeEnSueloConcretoCon: unaPerforadora

			^unaPerforadora darGolpeEnSueloConcretoConMechaDiamante.
			"^vecesQueGolpeoCapaActual"! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:25' overrides: 50700868!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaDiamante ! !

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:37' overrides: 50700858!
darGolpeEnSueloArenosoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloArenosoConMechaSoft! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:25' overrides: 50700863!
darGolpeEnSueloConcretoCon: unaPerforadora

	^unaPerforadora darGolpeEnSueloConcretoConMechaSoft  ! !
!Soft methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:45' overrides: 50700868!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora  darGolpeEnSueloTierraConMechaSoft 
! !

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:18:54' overrides: 50700858!
darGolpeEnSueloArenosoCon: unaPerforadora

		^unaPerforadora darGolpeEnSueloArenosoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:23:50' overrides: 50700863!
darGolpeEnSueloConcretoCon: unaPerforadora
^unaPerforadora darGolpeEnSueloConcretoConMechaWidia! !
!Widia methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:19:00' overrides: 50700868!
darGolpeEnSueloTierraCon: unaPerforadora
^unaPerforadora darGolpeEnSueloTierraConMechaWidia 
! !

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'camila 9/21/2023 23:29:59'!
darGolpeCon: unaPerforadora
	unaPerforadora SignalNoSePuedePerforar! !

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:03' prior: 50700593!
arenoso

	^Arenoso new initializeArenoso! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:10' prior: 50700597!
concretoConResistencia: resistencia 

	^Concreto new initializeConcretoConResistencia: resistencia ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:18:17' prior: 50700603!
tierra

	^Tierra new initializeTierra! !
!Perforadora methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:19:10' prior: 50700744!
sinMecha

	^mechaPuesta = SinMecha new! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:22:12' prior: 50700651!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	"self sobreSueloArenoso ifTrue: [^mechaPuesta darGolpeEnSueloArenosoCon: self].
	
	self sobreSueloTierra ifTrue: [^mechaPuesta darGolpeEnSueloTierraCon: self].
	
	self sobreSueloConcreto ifTrue: [^mechaPuesta darGolpeEnSueloConcretoCon: self]."
	! !
!CapaDeSuelo methodsFor: 'nil' stamp: 'camila 9/22/2023 17:23:34'!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50699586 overrides: 50701102!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50699602 overrides: 50701102!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50699594 overrides: 50701102!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:23:42' prior: 50701102!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora

	self subclassResponsibility! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:20' prior: 50701109 overrides: 50701129!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloArenosoCon: unaPerforadora.
	
	! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:24:45' prior: 50701123 overrides: 50701129!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloConcretoCon: unaPerforadora 
	! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:25:05' prior: 50701116 overrides: 50701129!
darGolpeDesde: unaPerforadora con: mechaPuestaDePerforadora
	^mechaPuestaDePerforadora darGolpeEnSueloTierraCon: unaPerforadora ! !
!Perforadora methodsFor: 'excavation' stamp: 'camila 9/22/2023 17:27:02' prior: 50701087!
darGolpeConMechaPuesta
	
	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^capasDeSueloDebajo first darGolpeDesde: self con: mechaPuesta.
	
	! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50699666 overrides: 50700532!
esArenoso
	^tipo = #Arenoso! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50699690 overrides: 50700532!
esArenoso
	^tipo = #Arenoso! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50699678 overrides: 50700532!
esArenoso
	^tipo = #Arenoso! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:27:59' prior: 50700532!
esArenoso

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50699670 overrides: 50700535!
esConcreto
	^tipo = #Concreto! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50699694 overrides: 50700535!
esConcreto
	^tipo = #Concreto! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50699682 overrides: 50700535!
esConcreto
	^tipo = #Concreto! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:06' prior: 50700535!
esConcreto

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50699674 overrides: 50700539!
esTierra
	^tipo = #Tierra! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50699698 overrides: 50700539!
esTierra
	^tipo = #Tierra! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50699686 overrides: 50700539!
esTierra
	^tipo = #Tierra! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:19' prior: 50700539!
esTierra

	self subclassResponsibility! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:28' prior: 50701167 overrides: 50701181!
esArenoso
	^true! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:39' prior: 50701186 overrides: 50701200!
esConcreto
	^false! !
!Arenoso methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:44' prior: 50701205 overrides: 50701218!
esTierra
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:52' prior: 50701177 overrides: 50701181!
esArenoso
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:28:59' prior: 50701196 overrides: 50701200!
esConcreto
	^true! !
!Concreto methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:04' prior: 50701214 overrides: 50701218!
esTierra
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:12' prior: 50701172 overrides: 50701181!
esArenoso
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:17' prior: 50701191 overrides: 50701200!
esConcreto
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'camila 9/22/2023 17:29:22' prior: 50701209 overrides: 50701218!
esTierra
	^true! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:46' prior: 50699758 overrides: 50700516!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'camila 9/22/2023 18:08:36'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := nil.!
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:30:55' prior: 50699763 overrides: 50700521!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'camila 9/22/2023 18:08:36'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.!
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:31:02' prior: 50699770 overrides: 50700528!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.! !

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'camila 9/22/2023 18:08:36'!
initializeTierra
	
	tipo := #Tierra.
	altura := nil.!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:32:13' prior: 50700543 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:20' prior: 50701295 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #tipo stamp: 'camila 9/22/2023 18:08:36'!
tipo

	^tipo!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:33:55' prior: 50700551 overrides: 16901788!
hash

	^resistencia hash! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:16' prior: 50701260!
initializeArenoso
	
	altura := nil.! !
!Concreto methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:23' prior: 50701270!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 17:34:31' prior: 50701285!
initializeTierra
	
	altura := nil.! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:36'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:35:58' prior: 50699791 overrides: 50700555!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:08:36'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:36:28' prior: 50699801 overrides: 50701302!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 18:08:36'!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia] !
!Concreto methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:36:52' prior: 50699813 overrides: 50700567!
resistencia

	^ resistencia.! !

!methodRemoval: CapaDeSuelo #resistencia stamp: 'camila 9/22/2023 18:08:36'!
resistencia

	^ resistencia.!
!Concreto methodsFor: 'comparing' stamp: 'camila 9/22/2023 17:37:05' prior: 50699821 overrides: 50701312!
hash

	^resistencia hash! !

!methodRemoval: CapaDeSuelo #hash stamp: 'camila 9/22/2023 18:08:36'!
hash

	^resistencia hash!
!Concreto methodsFor: 'bajar resistencia' stamp: 'camila 9/22/2023 17:37:24' prior: 50699828 overrides: 50700560!
sinResistencia
	^resistencia = 0! !

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'camila 9/22/2023 18:08:36'!
sinResistencia
	^resistencia = 0!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:08' overrides: 16901772!
= anObject
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:15' prior: 50699854 overrides: 50701397!
= anObject
	self subclassResponsibility ! !

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 18:08:36'!
= anObject
	self subclassResponsibility !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:38:28' overrides: 16901772!
= unObjecto
	self subclassResponsibility ! !
!Arenoso methodsFor: 'accessing' stamp: 'camila 9/22/2023 17:39:04' prior: 50701402 overrides: 50701410!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 17:39:13' prior: 50699859 overrides: 50701410!
= unaCapaDeSuelo
	^unaCapaDeSuelo isKindOf: self class! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:37'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:37'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:37'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:08:37'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11'!
SueloArenosoDeAltura2

	^ CapaDeSuelo arenoso setAltura: 2! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700414!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700402!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700440!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700469!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700484!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700454!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:11' prior: 50700427!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:50:46' prior: 50701489!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27'!
SueloTierraDeAltura40

	^ CapaDeSuelo tierra setAltura: 40! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701462!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701476!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701562!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701503!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701518!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701533!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 17:51:27' prior: 50701548!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self SueloArenosoDeAltura2. self SueloTierraDeAltura40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 17:59:56' prior: 50701065!
arenoso

	^Arenoso conAlturaDe: 0! !
!CapaDeSuelo class methodsFor: 'as yet unclassified' stamp: 'camila 9/22/2023 18:01:27'!
conAlturaDe: aRenameMe1 
	self shouldBeImplemented.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:02:51' prior: 50701684!
conAlturaDe: unaAltura
	^Arenoso new initializeArenosoConAltura: unaAltura ! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:03:11'!
initializeArenosoConAltura: unaAltura
	
	altura := unaAltura.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:03:56' prior: 50701077!
tierra

	^Tierra conAlturaDe: 0! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:04:07' prior: 50701689!
conAlturaDe: unaAltura
	^self new initializeArenosoConAltura: unaAltura ! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'camila 9/22/2023 18:06:32' prior: 50701705!
conAlturaDe: unaAltura
	^self new initializeConAltura: unaAltura ! !
!Arenoso methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:06:54'!
initializeConAltura: unaAltura
	
	altura := unaAltura.! !
!Tierra methodsFor: 'initialization' stamp: 'camila 9/22/2023 18:07:01'!
initializeConAltura: unaAltura
	
	altura := unaAltura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:08:47'!
PASSED!

----SNAPSHOT----(22 September 2023 18:08:51) CuisUniversity-5981.image priorSource: 11577658!
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 18:10:58' prior: 50701457!
SueloArenosoDeAltura2

	^ Arenoso conAlturaDe: 2! !
!TestDePerforación methodsFor: 'test' stamp: 'camila 9/22/2023 18:11:08' prior: 50701575!
SueloTierraDeAltura40

	^ Tierra conAlturaDe: 40! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:11:11'!
PASSED!

!methodRemoval: CapaDeSuelo #setAltura: stamp: 'camila 9/22/2023 18:11:23'!
setAltura: unaAltura

	altura := unaAltura!

!methodRemoval: CapaDeSuelo #= stamp: 'camila 9/22/2023 18:12:02'!
= unObjecto
	self subclassResponsibility !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:12:06'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:12:06'!
PASSED!
!CapaDeSuelo methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:21' prior: 50700574!
scan
	self subclassResponsibility ! !
!Arenoso methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:32' overrides: 50701980!
scan
	self subclassResponsibility ! !
!Tierra methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:32' overrides: 50701980!
scan
	self subclassResponsibility ! !
!Concreto methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:32' overrides: 50701980!
scan
	self subclassResponsibility ! !
!CapaDeSuelo methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:32' prior: 50701980!
scan

	self subclassResponsibility! !
!Arenoso methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:48' prior: 50701984 overrides: 50701996!
scan
	^ 7! !
!Concreto methodsFor: 'scan' stamp: 'camila 9/22/2023 18:12:58' prior: 50701992 overrides: 50701996!
scan
	^ 50.  ! !
!Tierra methodsFor: 'scan' stamp: 'camila 9/22/2023 18:13:11' prior: 50701988 overrides: 50701996!
scan ^ 10! !
!Tierra methodsFor: 'scan' stamp: 'camila 9/22/2023 18:13:12' prior: 50702009 overrides: 50701996!
scan
 ^ 10! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 18:13:15'!
PASSED!

CapaDeSuelo subclass: #CapaConPiedras

	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaConPiedras category: 'ISW1-2023-1C-Parcial-1' stamp: 'camila 9/22/2023 18:15:02'!
CapaDeSuelo subclass: #CapaConPiedras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'camila 9/22/2023 19:29:13'!
PASSED!

----SNAPSHOT----(22 September 2023 19:29:20) CuisUniversity-5981.image priorSource: 11844886!

----STARTUP---- (24 September 2023 00:05:51) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #SinMecha stamp: 'camila 9/24/2023 00:05:57'!
TipoDeMecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'camila 9/24/2023 00:05:57'!
ConMecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'camila 9/24/2023 00:05:57'!
ConMecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'camila 9/24/2023 00:05:57'!
ConMecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #ConMecha stamp: 'camila 9/24/2023 00:05:57'!
TipoDeMecha subclass: #ConMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TipoDeMecha stamp: 'camila 9/24/2023 00:05:58'!
Object subclass: #TipoDeMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Perforadora stamp: 'camila 9/24/2023 00:05:58'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'camila 9/24/2023 00:05:58'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'camila 9/24/2023 00:05:58'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaConPiedras stamp: 'camila 9/24/2023 00:05:58'!
CapaDeSuelo subclass: #CapaConPiedras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'camila 9/24/2023 00:05:58'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'camila 9/24/2023 00:05:59'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'camila 9/24/2023 00:05:59'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:06:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:06:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:06:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:06:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:06:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:06:30'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:10:40' overrides: 16920235!
initialize
	services := OrderedCollection new.
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:11:02' prior: 50702958 overrides: 16920235!
initialize
	services := OrderedCollection new.
	zones := OrderedCollection new.
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:11:35'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:11:51' prior: 50702964 overrides: 16920235!
initialize
	services := OrderedCollection new.
	zones := OrderedCollection new. 
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:11:55' prior: 50702634!
addService: aService 

	services add: aService.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:11:56'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:02' prior: 50702640!
addZone: aZone


	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:03'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:12' prior: 50702675!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:12'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:19' prior: 50702693!
energyProduced
	
	| index total |
	
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:20'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:25' prior: 50702706!
hasResidentialZones

	| index |

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:26'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:34' prior: 50702725!
waterConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:34'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:41' prior: 50702743!
waterProduced
	| index total |
	
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #WaterTower ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:42'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:12:47' prior: 50702755!
zones


	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:12:48'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:16:07' prior: 50703318!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |

		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:16:09'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:18:15' prior: 50704004!
energyConsumption
	

	
	^zones sum: [ :zone |
		
		zone type = #Residential ifTrue: [(5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [( 10 * ep) * zone getNumberOfCells ].	
		
	].

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:18:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:18:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:18:16'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:18:16'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:19:41' prior: 50704122!
energyConsumption
	

	
	^zones 
		sum: [ :zone |	
		zone type = #Residential ifTrue: [(5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [( 10 * ep) * zone getNumberOfCells ].	]
		ifEmpty: [^0* ep]

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:19:42'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:16:07' prior: 50704236!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |

		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:16:07' prior: 50704351!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |

		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:22:20' prior: 50704367!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |

		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:22:23'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:25:20' prior: 50704383!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |
		total := total + zone energyConsumption
		
	].

	^ total.! !

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 00:25:38'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commercial category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 00:25:56'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 00:26:08'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:26:44'!
energyConsumption
	self subclassResponsibility ! !
!Residential methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:26:49' overrides: 50704544!
energyConsumption
	self subclassResponsibility ! !
!Commercial methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:26:49' overrides: 50704544!
energyConsumption
	self subclassResponsibility ! !
!Industrial methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:26:49' overrides: 50704544!
energyConsumption
	self subclassResponsibility ! !
!Zone methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:26:49' prior: 50704544!
energyConsumption

	self subclassResponsibility! !
!Commercial methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:27:55' prior: 50704554 overrides: 50704564!
energyConsumption
	^ (8*ep) * self getNumberOfCells .! !

----SNAPSHOT----(24 September 2023 00:29:39) CuisUniversity-5981.image priorSource: 11857083!

----STARTUP---- (24 September 2023 00:29:54) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Industrial methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:29:59' prior: 50704559 overrides: 50704564!
energyConsumption
	! !
!Industrial methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:30:40' prior: 50704581 overrides: 50704564!
energyConsumption
	^(10 * ep) * self getNumberOfCells
		
	! !
!Residential methodsFor: 'accessing' stamp: 'camila 9/24/2023 00:31:06' prior: 50704549 overrides: 50704564!
energyConsumption
	^(5 * ep) * self getNumberOfCells! !
!Commercial methodsFor: 'nil' stamp: 'camila 9/24/2023 00:31:26' overrides: 16901772!
= anObject
	^anObject = #Commercial! !
!Industrial methodsFor: 'nil' stamp: 'camila 9/24/2023 00:31:40' overrides: 16901772!
= anObject
	^anObject = #Industrial! !
!Residential methodsFor: 'nil' stamp: 'camila 9/24/2023 00:31:49' overrides: 16901772!
= anObject
	^anObject = #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:31:51'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:32:12' prior: 50704501!
energyConsumption
	
	| index total |
	
	
	index := 1.
	total := 0.
	
	zones do: [ :zone |
		total := total + zone energyConsumption
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:32:22' prior: 50704712!
energyConsumption
	
	|  total |
	
	total := 0.
	
	zones do: [ :zone |
		total := total + zone energyConsumption
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:32:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:32:26'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:32:52'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:33:16' prior: 50702297!
residentialZone

	^ Residential new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:33:24' prior: 50702293!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:33:34' prior: 50702289!
commertialZone

	^ Commercial new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:33:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:33:35'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:33:42'!
FAILURE!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:34:30' prior: 50703664!
waterConsumption
	
	| total |

	total := 0.
	
	zones do: [ :zone |
		
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:09' prior: 50705057!
waterConsumption
	
	| total |

	total := 0.
	
	zones do: [ :zone |
		total:= total + zone calculateWaterConsumption
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		.
	].

	^ total.! !
!Zone methodsFor: 'nil' stamp: 'camila 9/24/2023 00:35:19'!
calculateWaterConsumption
	self subclassResponsibility ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:26' overrides: 50705087!
calculateWaterConsumption
	self subclassResponsibility ! !
!Commercial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:26' overrides: 50705087!
calculateWaterConsumption
	self subclassResponsibility ! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:26' overrides: 50705087!
calculateWaterConsumption
	self subclassResponsibility ! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:26' prior: 50705087!
calculateWaterConsumption

	self subclassResponsibility! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:35:36' prior: 50705072!
waterConsumption
	
	| total |

	total := 0.
	
	zones do: [ :zone |
		total:= total + zone calculateWaterConsumption
		
	].

	^ total.! !
!Commercial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:36:08' prior: 50705099 overrides: 50705110!
calculateWaterConsumption
	
		^(2 * wp) * self getNumberOfCells.
		
		! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:36:29' prior: 50705105 overrides: 50705110!
calculateWaterConsumption
	^(10 * wp) * self getNumberOfCells
		! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:37:19' prior: 50705093 overrides: 50705110!
calculateWaterConsumption
	^(9 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:37:29'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:37:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:37:36'!
FAILURE!
!Commercial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:40:07' prior: 50704597 overrides: 16901772!
= anObject
	^anObject type = #Commercial! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:40:14' prior: 50704601 overrides: 16901772!
= anObject
	^anObject type  = #Industrial! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:40:19' prior: 50704605 overrides: 16901772!
= anObject
	^anObject type  = #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:40:20'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:40:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:40:35'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:41:02'!
FAILURE!
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:42:02' prior: 50705260 overrides: 16901772!
= anObject
	^anObject type  = #Residential! !
!Commercial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:42:17' prior: 50705248 overrides: 16901772!
= anObject
	^anObject type = #Commertial! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:42:29' prior: 50705254 overrides: 16901772!
= anObject
	^anObject type  = #Industrial! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:42:30'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:42:30'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:43:40' prior: 50703186!
addZone: aZone


	aZone  = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone  = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone  = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:43:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:43:42'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:43:42'!
ERROR!
!Commercial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:43:51' prior: 50705383 overrides: 16901772!
= anObject
	^anObject  = #Commertial! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:43:56' prior: 50705389 overrides: 16901772!
= anObject
	^anObject   = #Industrial! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:44:01' prior: 50705377 overrides: 16901772!
= anObject
	^anObject   = #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:44:02'!
PASSED!

----STARTUP---- (24 September 2023 00:44:25) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #Residential stamp: 'camila 9/24/2023 00:45:59'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'camila 9/24/2023 00:45:59'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commercial stamp: 'camila 9/24/2023 00:45:59'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'camila 9/24/2023 00:45:59'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'camila 9/24/2023 00:46:00'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'camila 9/24/2023 00:46:00'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'camila 9/24/2023 00:46:00'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:46:27'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:00' overrides: 16920235!
initialize
	zones := OrderedCollection new.
	services := OrderedCollection new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:47:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:47:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:47:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:47:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:47:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:47:02'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:08' prior: 50704982!
addService: aService 

	
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:15' prior: 50704988!
addZone: aZone

	

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:23' prior: 50705023!
energyConsumption
	
	| index total |
	
	
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:29' prior: 50705041!
energyProduced
	
	| index total |
	
	
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:34' prior: 50705054!
hasResidentialZones

	| index |
	

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:44' prior: 50705073!
waterConsumption
	
	| index total |
	
	
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:49' prior: 50705091!
waterProduced
	| index total |
	

	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #WaterTower ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:47:54' prior: 50705103!
zones



	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:47:55'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:48:36' prior: 50705448!
energyConsumption
	
	^zones sum: [:zone | zone energyConsumption]! !
!Zone methodsFor: 'nil' stamp: 'camila 9/24/2023 00:49:01'!
energyConsumption! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:50:31' prior: 50705629!
energyConsumption
	 type = #Residential ifTrue: [(5 * ep) * self getNumberOfCells ].	
	 type = #Commertial ifTrue: [ (8 * ep) * self getNumberOfCells ].	
	 type = #Industrial ifTrue: [ (10 * ep) * self getNumberOfCells ].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:50:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:50:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:50:32'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:50:32'!
ERROR!
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:50:50' prior: 50705633!
energyConsumption
	 type = #Residential ifTrue: [^(5 * ep) * self getNumberOfCells ].	
	 type = #Commertial ifTrue: [ ^(8 * ep) * self getNumberOfCells ].	
	 type = #Industrial ifTrue: [ ^(10 * ep) * self getNumberOfCells ].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:50:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:50:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:50:51'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:50:51'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:51:20' prior: 50705624!
energyConsumption
	
	^zones sum: [:zone | zone energyConsumption]
			ifEmpty: [^0 * ep ]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:51:21'!
PASSED!

----SNAPSHOT----(24 September 2023 00:51:27) CuisUniversity-5981.image priorSource: 11933528!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:51:46' prior: 50705858!
energyConsumption
	
	^zones 
		sum: [:zone | zone energyConsumption]
		ifEmpty: [^0 * ep ]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:51:48'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:52:47' prior: 50705466!
energyProduced
	
	^services sum: [ :service |
		service type = #SolarPlant ifTrue: [500 * ep].	
	].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:52:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:52:48'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:52:48'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:53:34' prior: 50706079!
energyProduced
	
	^services sum: [ :service | service energyPoints
	].! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:53:39' prior: 50706188!
energyProduced
	
	^services sum: [ :service | service energyPoints].! !
!Service methodsFor: 'nil' stamp: 'camila 9/24/2023 00:54:04'!
energyPoints
	
		^type = #SolarPlant ifTrue: [500 * ep] ifFalse: [0 * ep].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:54:05'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:54:05'!
PASSED!
!Service methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:54:21' prior: 50706199!
energyPoints
	
		type = #SolarPlant ifTrue: [^500 * ep] ifFalse: [^0 * ep].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:54:21'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:54:21'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:55:21' prior: 50706194!
energyProduced
	
	^services sum: [ :service | service energyPoints]
		ifEmpty: [^0 * ep ].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:55:22'!
PASSED!

----SNAPSHOT----(24 September 2023 00:55:28) CuisUniversity-5981.image priorSource: 11978089!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:55:37' prior: 50706415!
energyProduced
	
	^services 
		sum: [ :service | service energyPoints]
		ifEmpty: [^0 * ep ].! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:55:46' prior: 50706527!
energyProduced
	
	^services 
		 sum: [ :service | service energyPoints]
		ifEmpty: [^0 * ep ].! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:56:50' prior: 50705478!
hasResidentialZones

	^ zones count: [: zone | zone type]! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:57:14' prior: 50706539!
hasResidentialZones

	^ zones count: [: zone | zone isResidential]! !
!Zone methodsFor: 'nil' stamp: 'camila 9/24/2023 00:57:43'!
isResidential
	type = #Residential ifTrue: [^true].
	^false.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:57:49'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:57:49'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 00:58:55' prior: 50706544!
hasResidentialZones

	^ zones anySatisfy: [: zone | zone isResidential] ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 00:58:56'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:00:03' prior: 50706657!
hasResidentialZones

	^ zones anySatisfy: [: zone | zone isResidential]  ! !

!methodRemoval: City #setName: stamp: 'camila 9/24/2023 01:01:24'!
setName: aName

	name _ aName.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:01:28'!
PASSED!

Object subclass: #City
	instanceVariableNames: 'zones  services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 01:01:43'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:01:48'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:02:19' prior: 50705488!
waterConsumption
	
	^zones 
		sum: [:zone | zone waterConsumption]
		ifEmpty: [^0 * ep ]! !
!Zone methodsFor: 'nil' stamp: 'camila 9/24/2023 01:02:29'!
waterConsumption
! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:03:51' prior: 50706996!
waterConsumption
	type = #Residential ifTrue: [ ^(9 * wp) * self getNumberOfCells ].	
	type = #Commertial ifTrue: [ ^(2 * wp) * self getNumberOfCells ].	
	type = #Industrial ifTrue: [ ^(10 * wp) * self getNumberOfCells ].	
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:03:58' prior: 50706991!
waterConsumption
	
	^zones 
		sum: [:zone | zone waterConsumption]
		ifEmpty: [^0 * wp ]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:04:05'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:04:59' prior: 50705506!
waterProduced
	^services 
		 sum: [ :service | service waterPoints]
		ifEmpty: [^0 * wp ].! !
!Service methodsFor: 'nil' stamp: 'camila 9/24/2023 01:05:35'!
waterPoints
	^type = #WaterTower ifTrue: [ 200 * wp].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:05:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:05:36'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:05:36'!
ERROR!
!Service methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:05:47' prior: 50707124!
waterPoints
	type = #WaterTower ifTrue: [ ^200 * wp].	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:05:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:05:48'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:05:48'!
ERROR!
!Service methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:06:04' prior: 50707231!
waterPoints
	type = #WaterTower ifTrue: [ ^200 * wp] ifFalse: [^0 * wp] ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:06:06'!
PASSED!

----SNAPSHOT----(24 September 2023 01:08:46) CuisUniversity-5981.image priorSource: 11995915!
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:10:00'!
waterPlant
	^self waterProduced: 200 * wp energyProduced : 0 * ep! !
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:10:40'!
solarPlant
	^self waterProduced: 0 * wp energyProduced : 500  * ep! !
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:10:48'!
waterTower
	^self waterProduced: 200 * wp energyProduced : 0 * ep! !

!methodRemoval: Service class #waterPlant stamp: 'camila 9/24/2023 01:10:55'!
waterPlant
	^self waterProduced: 200 * wp energyProduced : 0 * ep!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:11:07'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:11:15'!
PASSED!
!Service methodsFor: 'initialization' stamp: 'camila 9/24/2023 01:13:26'!
initializeWaterProduced: aWaterProduced energyProduced: anEnergyProduced

	! !

Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 01:13:52'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service methodsFor: 'initialization' stamp: 'camila 9/24/2023 01:14:22' prior: 50707643!
initializeWaterProduced: aWaterProduced energyProduced: anEnergyProduced

	waterProduced := aWaterProduced .
	energyProduced  := anEnergyProduced ! !
!Service methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:15:29' prior: 50706307!
energyPoints
	
		 ^energyProduced ! !
!Service methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:15:37' prior: 50707338!
waterPoints
	^waterProduced ! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:16:14' prior: 50704649!
solarPlant

	^ Service  solarPlant! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:16:35' prior: 50704945!
waterTower

	^ Service waterTower! !
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:17:31'!
waterProduced: aWaterPoints energyProduced: anEnergyPoints 
	
	^self new initializeWaterProduced: aWaterPoints energyProduced: anEnergyPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:17:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:17:51'!
ERROR!
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:19:24' prior: 50707454!
solarPlant

	^self waterProduced:0 * wp energyProduced: 500 * ep! !
!Service class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 01:19:42' prior: 50707459!
waterTower
	^self waterProduced: 200 * wp energyProduced: 0 * ep
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:19:45'!
PASSED!

----SNAPSHOT----(24 September 2023 01:19:51) CuisUniversity-5981.image priorSource: 12025433!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 01:22:38'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 01:22:42'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 01:22:46'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:22:49'!
PASSED!

----SNAPSHOT----(24 September 2023 01:22:54) CuisUniversity-5981.image priorSource: 12040338!
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:08' overrides: 50705745!
energyConsumption
	 type = #Residential ifTrue: [^(5 * ep) * self getNumberOfCells ].	
	 type = #Commertial ifTrue: [ ^(8 * ep) * self getNumberOfCells ].	
	 type = #Industrial ifTrue: [ ^(10 * ep) * self getNumberOfCells ].	! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:08' overrides: 50705745!
energyConsumption
	 type = #Residential ifTrue: [^(5 * ep) * self getNumberOfCells ].	
	 type = #Commertial ifTrue: [ ^(8 * ep) * self getNumberOfCells ].	
	 type = #Industrial ifTrue: [ ^(10 * ep) * self getNumberOfCells ].	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:08' overrides: 50705745!
energyConsumption
	 type = #Residential ifTrue: [^(5 * ep) * self getNumberOfCells ].	
	 type = #Commertial ifTrue: [ ^(8 * ep) * self getNumberOfCells ].	
	 type = #Industrial ifTrue: [ ^(10 * ep) * self getNumberOfCells ].	! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:08' prior: 50705745!
energyConsumption

	self subclassResponsibility! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:20' prior: 50708078 overrides: 50708089!
energyConsumption
^(8 * ep) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:23:22'!
PASSED!
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:23:52' prior: 50708067 overrides: 50708089!
energyConsumption
^(10 * ep) * self getNumberOfCells! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:24:07' prior: 50708056 overrides: 50708089!
energyConsumption
^(5 * ep) * self getNumberOfCells ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:24:37' overrides: 16901772!
= anObject
	^ anObject type = #Commertial! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:24:47' overrides: 16901772!
= anObject
	^ anObject type = #Industrial! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:24:55' overrides: 16901772!
= anObject
	^ anObject type = #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:24:56'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:25:16' prior: 50704637!
commertialZone

	^ Commertial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:25:24' prior: 50704641!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:25:31' prior: 50704645!
residentialZone

	^ Residential new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:25:35'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:25:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:25:35'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:27:02'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:27:58'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:27:58'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:27:58'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:28:02'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:28:57' prior: 50705068!
waterAvailable
	
	^ (self waterProduced) - (self waterConsumption).! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:29:01'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:29:26'!
ERROR!
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:29:55' overrides: 50707000!
waterConsumption
	type = #Residential ifTrue: [ ^(9 * wp) * self getNumberOfCells ].	
	type = #Commertial ifTrue: [ ^(2 * wp) * self getNumberOfCells ].	
	type = #Industrial ifTrue: [ ^(10 * wp) * self getNumberOfCells ].	
! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:29:55' overrides: 50707000!
waterConsumption
	type = #Residential ifTrue: [ ^(9 * wp) * self getNumberOfCells ].	
	type = #Commertial ifTrue: [ ^(2 * wp) * self getNumberOfCells ].	
	type = #Industrial ifTrue: [ ^(10 * wp) * self getNumberOfCells ].	
! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:29:55' overrides: 50707000!
waterConsumption
	type = #Residential ifTrue: [ ^(9 * wp) * self getNumberOfCells ].	
	type = #Commertial ifTrue: [ ^(2 * wp) * self getNumberOfCells ].	
	type = #Industrial ifTrue: [ ^(10 * wp) * self getNumberOfCells ].	
! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:29:55' prior: 50707000!
waterConsumption

	self subclassResponsibility! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:30:07' prior: 50708594 overrides: 50708604!
waterConsumption
^(2 * wp) * self getNumberOfCells ! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:30:19' prior: 50708583 overrides: 50708604!
waterConsumption
	 ^(10 * wp) * self getNumberOfCells
! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:30:29' prior: 50708572 overrides: 50708604!
waterConsumption
^(9 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:30:33'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:30:33'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:31:10'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:31:10'!
PASSED!

----SNAPSHOT----(24 September 2023 01:33:26) CuisUniversity-5981.image priorSource: 12044854!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:02'!
canAddResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:02' prior: 50705419!
addZone: aZone

	

	aZone type = #Residential ifTrue: [
		self canAddResidentialZone.
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:32'!
canAddCommertialZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:32' prior: 50708845!
addZone: aZone

	

	aZone type = #Residential ifTrue: [
		self canAddResidentialZone.
	].

	aZone type = #Commertial ifTrue: [
		self canAddCommertialZone.
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:51'!
canAddIndustrialZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:39:51' prior: 50708882!
addZone: aZone

	

	aZone type = #Residential ifTrue: [
		self canAddResidentialZone.
	].

	aZone type = #Commertial ifTrue: [
		self canAddCommertialZone.
	].

	aZone type = #Industrial ifTrue: [
		self canAddIndustrialZone.
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:40:22' prior: 50708908!
addZone: aZone

	self canAdd: aZone.

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:40:35'!
canAdd: aZone

	aZone type = #Residential ifTrue: [
		self canAddResidentialZone.
	].

	aZone type = #Commertial ifTrue: [
		self canAddCommertialZone.
	].

	aZone type = #Industrial ifTrue: [
		self canAddIndustrialZone.
	].! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:41:18' prior: 50708924!
canAdd: aZone

	aZone canThisCityAdd
	! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:41:32'!
canThisCityAdd: aCity
	self subclassResponsibility ! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:42:23' prior: 50708939!
canThisCityAdd:aCity
	self subclassResponsibility ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:42:36' overrides: 50708944!
canThisCityAdd:aCity
	self subclassResponsibility ! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:42:36' overrides: 50708944!
canThisCityAdd:aCity
	self subclassResponsibility ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:42:36' overrides: 50708944!
canThisCityAdd:aCity
	self subclassResponsibility ! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:42:36' prior: 50708944!
canThisCityAdd: aCity

	self subclassResponsibility! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:43:02' prior: 50708959 overrides: 50708964!
canThisCityAdd:aCity
		aCity canAddCommertialZone.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:43:41' prior: 50708954 overrides: 50708964!
canThisCityAdd:aCity
		aCity canAddIndustrialZone.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:44:01' prior: 50708949 overrides: 50708964!
canThisCityAdd:aCity

	aCity canAddResidentialZone.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:44:10' prior: 50708935!
canAdd: aZone

	aZone canThisCityAdd: self
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:37'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:44:37'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:44:37'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:44:48'!
PASSED!
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:45:01' prior: 50708970 overrides: 50708964!
canThisCityAdd:aCity
		^aCity canAddCommertialZone.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:45:07' prior: 50708976 overrides: 50708964!
canThisCityAdd:aCity
		^aCity canAddIndustrialZone.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:45:12' prior: 50708982 overrides: 50708964!
canThisCityAdd:aCity

	^aCity canAddResidentialZone.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:45:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:45:21'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:47:04'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:48:32' prior: 50708869!
canAddCommertialZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]
		^true! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:48:41' prior: 50708898!
canAddIndustrialZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
		^true! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:48:47' prior: 50708835!
canAddResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
		^true! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 01:50:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 01:50:11'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 01:50:11'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 01:51:03'!
ERROR!

----SNAPSHOT----(24 September 2023 01:51:17) CuisUniversity-5981.image priorSource: 12069785!

----STARTUP---- (24 September 2023 17:02:43) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:06:15' prior: 50708919!
addZone: aZone

	aZone canThisCityAdd: self

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:06:17' prior: 50709471!
addZone: aZone

	aZone canThisCityAdd: self.

	zones add: aZone.
! !

!methodRemoval: City #canAdd: stamp: 'camila 9/24/2023 17:06:21'!
canAdd: aZone

	aZone canThisCityAdd: self
	!
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:09:32' prior: 50709197 overrides: 50708964!
canThisCityAdd:aCity
	aCity canAddCommertialZone.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:09:38' prior: 50709203 overrides: 50708964!
canThisCityAdd:aCity
	aCity canAddIndustrialZone.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:09:46' prior: 50709209 overrides: 50708964!
canThisCityAdd:aCity

	aCity canAddResidentialZone.! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:10:33' prior: 50709325!
canAddCommertialZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:10:39' prior: 50709338!
canAddIndustrialZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:10:45' prior: 50709348!
canAddResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:10:56'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:14:27'!
assertCanAddZone: aZone

	self energyAvailable < aZone energyConsumption ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aZone waterConsumption ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:15:16'!
canAddCommertialZone: aZone

	self energyAvailable < aZone energyProduced ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aZone waterProduced ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:16:01' prior: 50709648!
canAddCommertialZone: aZone

	self assertCanAddZone: aZone.
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]
	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:16:20'!
canAddIndustrialZone: aZone

	self assertCanAddZone: aZone	! !
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:16:32'!
canAddResidentialZone: aZone

	self assertCanAddZone: aZone	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:17:04' prior: 50709486 overrides: 50708964!
canThisCityAdd:aCity
	aCity canAddCommertialZone: self.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:17:11' prior: 50709492 overrides: 50708964!
canThisCityAdd:aCity
	aCity canAddIndustrialZone: self.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:17:17' prior: 50709498 overrides: 50708964!
canThisCityAdd:aCity

	aCity canAddResidentialZone: self.! !

!methodRemoval: City #canAddCommertialZone stamp: 'camila 9/24/2023 17:17:35'!
canAddCommertialZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]
	!

!methodRemoval: City #canAddIndustrialZone stamp: 'camila 9/24/2023 17:17:42'!
canAddIndustrialZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
	!

!methodRemoval: City #canAddResidentialZone stamp: 'camila 9/24/2023 17:17:44'!
canAddResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]
	!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:17:55'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:17:55'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:17:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:17:56'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:17:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:18:03'!
ERROR!
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:05' overrides: 50706549!
isResidential
	type = #Residential ifTrue: [^true].
	^false.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:05' overrides: 50706549!
isResidential
	type = #Residential ifTrue: [^true].
	^false.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:05' overrides: 50706549!
isResidential
	type = #Residential ifTrue: [^true].
	^false.! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:05' prior: 50706549!
isResidential

	self subclassResponsibility! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:10' prior: 50709847 overrides: 50709852!
isResidential
	^false.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:15' prior: 50709841 overrides: 50709852!
isResidential
	^false.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:19:20' prior: 50709835 overrides: 50709852!
isResidential
	^false.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:19:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:19:24'!
ERROR!

!methodRemoval: Residential #= stamp: 'camila 9/24/2023 17:20:18'!
= anObject
	^ anObject type = #Residential!

!methodRemoval: Industrial #= stamp: 'camila 9/24/2023 17:20:24'!
= anObject
	^ anObject type = #Industrial!

!methodRemoval: Commertial #= stamp: 'camila 9/24/2023 17:20:31'!
= anObject
	^ anObject type = #Commertial!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:21:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:21:26'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:21:26'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:25:00' prior: 50706765!
hasResidentialZones

		| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone isResidential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:25:02'!
PASSED!

Object subclass: #Zone
	instanceVariableNames: ' numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'camila 9/24/2023 17:25:33'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:25:36'!
PASSED!

!methodRemoval: Zone #type stamp: 'camila 9/24/2023 17:25:42'!
type
	
	^ type!

!methodRemoval: Zone #initializeWithType: stamp: 'camila 9/24/2023 17:25:52'!
initializeWithType: aZoneType 

	type := aZoneType.!

!methodRemoval: Zone class #withType: stamp: 'camila 9/24/2023 17:26:07'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:26:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:26:17'!
ERROR!
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:27:43' prior: 50709852!
isResidential
	self subclassResponsibility ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:28:16' prior: 50709868 overrides: 50710444!
isResidential
	^true.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:28:18'!
PASSED!

----SNAPSHOT----(24 September 2023 17:28:26) CuisUniversity-5981.image priorSource: 12090015!
!City methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 01:00:03' prior: 50710099!
hasResidentialZones

	^ zones anySatisfy: [: zone | zone isResidential]  ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:28:51'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:32:08'!
PASSED!

----SNAPSHOT----(24 September 2023 17:32:12) CuisUniversity-5981.image priorSource: 12124966!
!Zone class methodsFor: 'instance creation' stamp: 'camila 9/24/2023 17:33:25'!
numberOfCells: aNumberOfCells
	
	^self new initializeWithNumberOfCells: aNumberOfCells! !
!Zone methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:33:49'!
initializeWithNumberOfCells: aNumberOfCells
	numberOfCells := aNumberOfCells 
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:34:08'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:35:53'!
PASSED!

!methodRemoval: Service class #withType: stamp: 'camila 9/24/2023 17:36:11'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:36:14'!
PASSED!

!classRenamed: #Commertial as: #CommertialZone stamp: 'camila 9/24/2023 17:41:12'!
Smalltalk renameClassNamed: #Commertial as: #CommertialZone!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:41:12' prior: 50708331!
commertialZone

	^ CommertialZone new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:41:21'!
PASSED!

!classRenamed: #Industrial as: #IndustrialZone stamp: 'camila 9/24/2023 17:41:28'!
Smalltalk renameClassNamed: #Industrial as: #IndustrialZone!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:41:28' prior: 50708336!
industrialZone

	^ IndustrialZone new! !

!classRenamed: #Residential as: #ResidentialZone stamp: 'camila 9/24/2023 17:41:39'!
Smalltalk renameClassNamed: #Residential as: #ResidentialZone!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:41:39' prior: 50708341!
residentialZone

	^ ResidentialZone new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:42:11'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:45:05'!
cityWithSolarAndWaterPlant
	| city |

	city := City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	^city! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:45:41' prior: 50704669!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:45:51'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:05' prior: 50704680!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:09' prior: 50704692!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:14' prior: 50704703!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:25' prior: 50704734!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:31' prior: 50704745!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:35' prior: 50704757!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:40' prior: 50704768!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:56' prior: 50704848!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:15' prior: 50704863!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone|
	
	city := self cityWithSolarAndWaterPlant.

	zone := self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:23' prior: 50704876!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |
	
	city := self cityWithSolarAndWaterPlant.
	
	city addZone: self residentialZone.
	
	zone := self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:30' prior: 50704891!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |
	
	city := self cityWithSolarAndWaterPlant.

	zone := self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:38' prior: 50704904!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |
	
	city := self cityWithSolarAndWaterPlant.

	zone := self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:45' prior: 50704917!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |
	
	city := self cityWithSolarAndWaterPlant.

	city addZone: self residentialZone.
	
	zone := self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:47:52' prior: 50704932!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city  zone|
	
	city := self cityWithSolarAndWaterPlant.
	
	zone := self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:47:56'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:49:50'!
assert: aCityWithServices with: aResidentialBlock hasEnergyPoints: energyPoints
	
	aResidentialBlock value.
	
	self assert: energyPoints equals: aCityWithServices energyAvailable.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:50:01'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:52:02' prior: 50711338!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| cityToTest |
	
	cityToTest  := self cityWithSolarAndWaterPlant.

	self assert: cityToTest  
	with: [ :city | city addZone: self residentialZone ]
	hasEnergyPoints: 500 - 5 * ep.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:52:41' prior: 50711629!
assert: aCityWithServices with: aResidentialBlock hasEnergyPoints: energyPoints
	
	| city |
	aResidentialBlock value: city.
	
	self assert: energyPoints equals: aCityWithServices energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:53:04' prior: 50711741!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable


	self assertCityWith: [ :city | city addZone: self residentialZone ]
	hasEnergyPoints: 500 - 5 * ep.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:53:27'!
assertCitywith: aResidentialBlock hasEnergyPoints: energyPoints
	
	| city |
	
	city  := self cityWithSolarAndWaterPlant.
	aResidentialBlock value: city.
	
	self assert: energyPoints equals: city energyAvailable.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:53:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:53:28'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:54:18' prior: 50711762!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	self assertCitywith: [ :city | city addZone: self residentialZone ] hasEnergyPoints: 500 - 5 * ep.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 17:54:19'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:54:35' prior: 50711887!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	self 
	      assertCitywith: [ :city | city addZone: self residentialZone ] 
	      hasEnergyPoints: 500 - 5 * ep.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 17:54:38'!
PASSED!

----SNAPSHOT----(24 September 2023 17:54:57) CuisUniversity-5981.image priorSource: 12131816!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:23:47' prior: 50711353!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable


	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.
			city addZone: self commertialZone. ] 
	      hasEnergyPoints: 500 - 5 - 8 * ep.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:23:49'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:24:00' prior: 50712018!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable


	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone; addZone: self commertialZone. ] 
	      hasEnergyPoints: 500 - 5 - 8 * ep.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:24:01'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:24:06' prior: 50712135!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable


	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone; 
			addZone: self commertialZone. ] 
	      hasEnergyPoints: 500 - 5 - 8 * ep.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:24:06'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:24:18' prior: 50712252!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable


	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.
			city addZone: self commertialZone. ] 
	      hasEnergyPoints: 500 - 5 - 8 * ep.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:24:19'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:24:56' prior: 50711365!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self industrialZone.
			city addZone: self commertialZone. ] 
	      hasEnergyPoints: 500 - 10 * ep.! !

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:24:57'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:25:04' prior: 50712486!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self industrialZone.] 
	      hasEnergyPoints: 500 - 10 * ep.! !

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:25:05'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:26:05' prior: 50711375!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.
			city addZone: self commertialZone.
			city addZone: self industrialZone.	
			city addZone: self industrialZone.
	] 
	      hasEnergyPoints:  500 - 5 - 8 - (10 * 2) * ep! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:26:11'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:26:30'!
assertCitywith: aResidentialBlock hasWaterPoints: energyPoints
	
	| city |
	
	city  := self cityWithSolarAndWaterPlant.
	aResidentialBlock value: city.
	
	self assert: energyPoints equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:26:47' prior: 50712736!
assertCitywith: aResidentialBlock hasWaterPoints: waterPoints
	
	| city |
	
	city  := self cityWithSolarAndWaterPlant.
	aResidentialBlock value: city.
	
	self assert: waterPoints equals: city waterAvailable .! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:28:15' prior: 50711389!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	
	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.] 
	      hasWaterPoints: 200 - 9 * wp.
.! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:28:16'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:28:23' prior: 50712756!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	
	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.] 
	      hasWaterPoints: 200 - 9 * wp.! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:28:24'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:28:51' prior: 50711399!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.
	city addZone: self commertialZone.] 
	      hasWaterPoints: 200 - 9 - 2 * wp! !

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:28:52'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:29:33' prior: 50711411!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self industrialZone.] 
	      hasWaterPoints: 200 - 10 * wp ! !

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:29:34'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:30:08' prior: 50711421!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	self 
	      assertCitywith: [ :city | 
			city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.] 
	      hasWaterPoints: 200 - 31 * wp ! !

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:30:09'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:32:12' prior: 50711435!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := City new
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:32:15'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:56' prior: 50713340!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:32:58'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:33:53'!
assertCantAdd: aZoneBlock

	| city |

	city := City new.
	
	self 
		should: aZoneBlock
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:34:00'!
assertCityCantAdd: aZoneBlock

	| city |

	city := City new.
	
	self 
		should: aZoneBlock
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !

!methodRemoval: CityTest #assertCantAdd: stamp: 'camila 9/24/2023 20:34:05'!
assertCantAdd: aZoneBlock

	| city |

	city := City new.
	
	self 
		should: aZoneBlock
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:34:55' prior: 50704815!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	self assertCityCantAdd: [:city | city addZone: self commertialZone  ]
	! !

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:34:56'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:35:14' prior: 50713489!
assertCityCantAdd: aZoneBlock

	| city |

	city := City new.
	
	self 
		should: (aZoneBlock value: city)
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
ERROR!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:35:15'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:37:27'!
assertCityCantAdd: aZone to: aCity
	
	self 
		should: (aCity addZone: aZone)
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: aCity zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:38:50' prior: 50713511!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city := City new.

	self assertCityCantAdd: self commertialZone  to: city! !

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:38:52'!
ERROR!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:39:11'!
ERROR!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:39:11'!
ERROR!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:39:29'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:40:07' prior: 50713641!
assertCityCantAdd: aZone to: aCity
	
	self 
		should: [aCity addZone: aZone]
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: aCity zones size ]
		! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:40:08'!
PASSED!

!methodRemoval: CityTest #assertCityCantAdd: stamp: 'camila 9/24/2023 20:40:21'!
assertCityCantAdd: aZoneBlock

	| city |

	city := City new.
	
	self 
		should: (aZoneBlock value: city)
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:40:27'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:40:43' prior: 50704802!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

		| city |

	city := City new.

	self assertCityCantAdd: self residentialZone  to: city! !

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:40:44'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:40:59' prior: 50704828!
test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

		| city |

	city := City new.

	self assertCityCantAdd: self industrialZone  to: city
		! !

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:40:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:41:00'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:41:25' prior: 50713358!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.

	self assertCityCantAdd: self commertialZone  to: city! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:41:26'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:34:55' prior: 50713652!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	self assertCityCantAdd: [:city | city addZone: self commertialZone  ]
	! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:38:50' prior: 50714152!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city := City new.

	self assertCityCantAdd: self commertialZone  to: city! !

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:42:40'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:42:46'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:42:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:42:46'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 17:46:56' prior: 50714139!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:44:01' prior: 50714279!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	self assertCityCantAdd: self commertialZone to: city raiseError: City cannotAddCommertialZoneErrorDescription.  
	
	"self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]"! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:44:32'!
assertCityCantAdd: aZone to: aCity raiseError: cityError
	
	self 
		should: [aCity addZone: aZone]
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cityError.
			self assert: 0 equals: aCity zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:44:46' prior: 50714311!
assertCityCantAdd: aZone to: aCity raiseError: cityError
	
	self 
		should: [aCity addZone: aZone]
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: cityError value.
			self assert: 0 equals: aCity zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'camila 9/24/2023 20:45:01' prior: 50714293!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |
	
	city := self cityWithSolarAndWaterPlant.
	
	self assertCityCantAdd: self commertialZone to: city raiseError: [City cannotAddCommertialZoneErrorDescription.]  
	
	"self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]"! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/24/2023 20:45:03'!
PASSED!

----STARTUP---- (25 September 2023 01:23:52) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'camila 9/25/2023 01:23:56'!
PASSED!

----STARTUP---- (25 September 2023 22:02:25) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #ResidentialZone stamp: 'camila 9/25/2023 22:02:32'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'camila 9/25/2023 22:02:32'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'camila 9/25/2023 22:02:32'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'camila 9/25/2023 22:02:32'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'camila 9/25/2023 22:02:33'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'camila 9/25/2023 22:02:33'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'camila 9/25/2023 22:02:33'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2023-2C-Parcial-1.st----!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'camila 9/25/2023 22:03:29'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'camila 9/25/2023 22:03:30'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'camila 9/25/2023 22:03:30'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'camila 9/25/2023 22:03:30'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'camila 9/25/2023 22:03:30'!
PASSED!

----STARTUP---- (28 September 2023 20:17:18) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


!classRemoval: #ResidentialZone stamp: 'camila 9/28/2023 20:17:28'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'camila 9/28/2023 20:17:28'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'camila 9/28/2023 20:17:28'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'camila 9/28/2023 20:17:29'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'camila 9/28/2023 20:17:29'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'camila 9/28/2023 20:17:29'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'camila 9/28/2023 20:17:29'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /home/camila/Desktop/CUIS/CUIS/TDDBabyStepsGame.st----!

----SNAPSHOT----(28 September 2023 20:19:30) CuisUniversity-5981.image priorSource: 12171647!

----STARTUP---- (2 October 2023 17:09:00) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'camila 10/2/2023 17:52:32'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:52:58'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:53:33'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:53:33'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:54:16'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:54:16'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:54:33'!
factorize
	self shouldBeImplemented.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:54:38'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:56:13' prior: 50718168!
factorize
	^1! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:56:15'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:56:27' prior: 50718176!
factorize
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:56:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:56:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:56:33'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:56:33'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:56:33'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:56:33'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:56:33'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:56:33'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:58:40' prior: 50718183!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag new with: self.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:58:43'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:58:56' prior: 50718225!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: self.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:58:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:58:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:58:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:59:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:11'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:59:11'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:11'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:11'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:59:24' prior: 50718234!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: 2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:59:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:59:31'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:31'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:59:31'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:31'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:31'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:59:31'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:31'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:59:40' prior: 50718276!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: self.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:42'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:59:42'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:42'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:42'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 17:59:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 17:59:45'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:59:45'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 17:59:45'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 17:59:45'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 17:59:45'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 17:59:45'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:02:51' prior: 50718328!
factorize
	self = 1 ifTrue: [^Bag new].
	(self isDivisibleBy: 2) ifFalse: [ ^Bag with: self].
	^Bag with: 2 with: 2.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'camila 10/2/2023 18:02:53'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'camila 10/2/2023 18:02:53'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'camila 10/2/2023 18:02:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:02:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 18:02:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:02:56'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:02:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:02:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:02:56'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:03:21' prior: 50718392!
factorize
	self = 1 ifTrue: [^Bag new].
	(self isDivisibleBy: 3) ifFalse: [ ^Bag with: self].
	^Bag with: 2 with: 2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:03:23'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:04:26' prior: 50718456!
factorize
	self = 1 ifTrue: [^Bag new].
	(self isDivisibleBy: 2) ifTrue: [ ^Bag with: 2 with: 2].
	^Bag with: self.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:04:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 18:04:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:04:29'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:04:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:04:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:04:29'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:59:40' prior: 50718468!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: self.! !
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:06:48' prior: 50718500!
factorize
	| contador primos |
	self = 1 ifTrue: [^Bag new].
	contador := 1.
	primos := Bag new.
	(contador < self) whileTrue: [
		(self isDivisibleBy: contador) ifTrue: [primos add: contador].
		contador := contador + 1.
		]
	^ primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:06:55'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:07:09' prior: 50718505!
factorize
	| contador primos |
	self = 1 ifTrue: [^Bag new].
	contador := 1.
	primos := Bag new.
	(contador < self) whileTrue: [
		(self isDivisibleBy: contador) ifTrue: (primos add: contador).
		contador := contador + 1.
		]
	^ primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:07:11'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:07:40'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:07:46'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:59:40' prior: 50718520!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: self.! !
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 17:59:40' prior: 50718544!
factorize
	self = 1 ifTrue: [^Bag new].
	^ Bag with: self.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:10:33'!
FAILURE!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:15:22' prior: 50718549!
factorize
	| primos |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	(self isDivisibleBy: 2) ifTrue: [^primos add: 2]. 
	^ Bag with: self.! !
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:17:09' prior: 50718559!
factorize
	| primos contador |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	
	contador := 1.
	(contador < self) whileTrue: [ | next |
		(self isDivisibleBy: 2) ifTrue: [^primos add: 2]. 
		next := self / 2.
		primos add: (next factorize).
		]
	^ primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:17:15'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:18:50' prior: 50718567!
factorize
	| primos contador |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	
	contador := 1.
	(self > 1) whileTrue: [ | next |
		(self isDivisibleBy: 2) ifTrue: [^primos add: 2]. 
		next := self / 2.
		primos add: (next factorize).
		]
	^ primos.! !
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:19:00' prior: 50718583!
factorize
	| primos  |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	
	
	(self > 1) whileTrue: [ | next |
		(self isDivisibleBy: 2) ifTrue: [^primos add: 2]. 
		next := self / 2.
		primos add: (next factorize).
		]
	^ primos.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'camila 10/2/2023 18:19:04'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'camila 10/2/2023 18:19:04'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'camila 10/2/2023 18:19:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:19:07'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:32:21' prior: 50718594!
factorize
	| primos  contador numeroQueDivido |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	contador := 2.
	numeroQueDivido := self.
	[contador < numeroQueDivido ]whileTrue: [ 
		(self isDivisibleBy: contador) ifTrue: [primos add: contador. numeroQueDivido := numeroQueDivido/ contador]
		]
	^ primos.! !
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:32:36' prior: 50718642!
factorize
	| primos  contador numeroQueDivido |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	contador := 2.
	numeroQueDivido := self.
	[contador < numeroQueDivido] whileTrue: [ 
		(self isDivisibleBy: contador) 
		ifTrue: [primos add: contador. numeroQueDivido := numeroQueDivido / contador].
		]
	^ primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:32:51'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:32:51'!
ERROR!

----STARTUP---- (2 October 2023 18:34:38) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS/CUIS/ISW1-2022-2C-1erParcial.st----!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:36:38' prior: 50718655!
factorize
	| primos  contador numeroQueDivido |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	contador := 2.
	numeroQueDivido := self.
	[contador < numeroQueDivido] whileTrue: [ 
		(self isDivisibleBy: contador) 
		ifTrue: [primos add: contador. numeroQueDivido := numeroQueDivido / contador].
		
		]
	^primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:36:43'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:36:43'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:36:55' prior: 50718677!
factorize
	| primos  contador numeroQueDivido |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	contador := 2.
	numeroQueDivido := self.
	[contador <= numeroQueDivido] whileTrue: [ 
		(self isDivisibleBy: contador) 
		ifTrue: [primos add: contador. numeroQueDivido := numeroQueDivido / contador].
		
		]
	^primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:37:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:37:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:37:22'!
ERROR!
!SmallInteger methodsFor: 'babySteps' stamp: 'camila 10/2/2023 18:39:07' prior: 50718699!
factorize
	| primos  contador numeroQueDivido |
	self = 1 ifTrue: [^Bag new].
	primos := Bag new.
	contador := 2.
	numeroQueDivido := self.
	[contador <= numeroQueDivido] whileTrue: [ 
		(self isDivisibleBy: contador) 
		ifTrue: [primos add: contador. numeroQueDivido := numeroQueDivido / contador].
		
		].
	^primos.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:39:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'camila 10/2/2023 18:39:15'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'camila 10/2/2023 18:39:18'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'camila 10/2/2023 18:39:18'!
PASSED!

----STARTUP---- (2 October 2023 18:39:36) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


TDDBabyStepsGameAnagrams start
!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'camila 10/2/2023 18:59:21'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 18:59:35'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:00:15'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:00:15'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:00:29'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:00:43' prior: 50718164!
anagrams
	^''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:00:44'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:01:25' prior: 50718168!
anagrams
	^Set with: ''! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'camila 10/2/2023 19:01:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:01:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:01:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:01:34'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:01:34'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:01:34'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:01:34'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:01:34'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:01:34'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:02:13' prior: 50718176!
anagrams
	(self size = 1) ifTrue: [^Set with: ''].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:02:16'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:02:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:02:31'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:02:31'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:02:40' prior: 50718285!
anagrams
	(self size = 0) ifTrue: [^Set with: ''].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:02:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:02:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:02:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:02:50'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:02:50'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:02:50'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:02:50'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:02:50'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:02:50'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:05:21' prior: 50718309!
anagrams
	| anagrams first |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self copyFrom: second  to: first) ! !
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:07:12' prior: 50718366!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self copyFrom: 2  to: 1) ! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:07:34'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:07:34'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:08:39' prior: 50718376!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self  copyFrom: 2  to: 1) .
	^ anagrams.! !
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:10:12' prior: 50718395!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: [self copyFrom:2to:2; copyFrom:1to:1] .
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:10:23'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:10:23'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:10:45' prior: 50718405!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self copyFrom:2to:2), (self copyFrom:1to:1).
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:10:48'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:10:48'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:10:48'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:10:48'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:10:48'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:11:05' prior: 50718425!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self copyFrom:1to:1), (self copyFrom:0to:0).
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:11:06'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:12:10' prior: 50718459!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self copyFrom:2to:2), (self copyFrom:1to:1).
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:12:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:12:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:12:12'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:12:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:12:12'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:12:45' prior: 50718474!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: self second, self first.
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:12:47'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:12:58' prior: 50718508!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self second, self first).
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:13:00'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:14:00' prior: 50718522!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: (self second) , (self first).
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:14:02'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:14:40' prior: 50718536!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: ('b') , ('a').
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:14:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:14:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:14:43'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:14:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:14:43'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:15:10' prior: 50718551!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	anagrams add: self reversed .
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:15:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:15:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:15:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:15:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:15:15'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:15:15'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:15:15'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:15:15'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:15:15'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:15:15'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:15:57' prior: 50718584!
anagrams
	| anagrams |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed .]
	
	^ anagrams.! !

'abc' copyFrom: 1 to:2!

'abc' copyFrom: 1 to:2!

'abc' copyFrom: 2 to:2!

'abc' copyFrom: 2 to:3!

'abc' copyFrom: 3 to:1!

'abc' copyFrom: 1 to:2!

'abc' copyFrom: 1 to:2 , 'd'!

'abc' copyFrom: 1 to:2 + 'd' !

'abc' copyFrom: 1 to:2, 'd' !

['abc' copyFrom: 1 to:2], 'd' !

'abc' copyFrom: 1 to:2!

'abc' copyFrom: 1 to:2, 'd' !

('abc' copyFrom: 1 to:2), 'd' !

('abc' copyFrom: 2 to:1)!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:24:47' prior: 50718673!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed .].
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	
	^ anagrams.! !
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:25:05' prior: 50718695!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed .].
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	anagrams add: firstAnagram reversed.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	anagrams add: secondAnagram reversed.
	
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:25:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:25:13'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:25:13'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:25:13'!
FAILURE!

('abc' copyFrom: 2 to:1), ('abc' copyFrom: 1 to:1)!

('abc' copyFrom: 1 to:1)!

('abc' copyFrom: 2 to:1), ('abc' copyFrom: 1 to:1)!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:26:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:26:47'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:26:47'!
ERROR!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:26:56' prior: 50718712!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [^Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed .].
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	anagrams add: firstAnagram reversed.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	anagrams add: secondAnagram reversed.
	
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:26:58'!
PASSED!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:27:08' prior: 50718768!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [^Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [^anagrams add: self reversed .].
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	anagrams add: firstAnagram reversed.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	anagrams add: secondAnagram reversed.
	
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:27:10'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:27:10'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:27:32' prior: 50718792!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [^Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed . ^anagrams].
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	anagrams add: firstAnagram reversed.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	anagrams add: secondAnagram reversed.
	
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:27:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:27:40'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:27:40'!
FAILURE!
!String methodsFor: 'anagrams' stamp: 'camila 10/2/2023 19:29:15' prior: 50718821!
anagrams
	| anagrams firstAnagram secondAnagram |
	(self size = 0) ifTrue: [^Set with: ''].
	(self size = 1) ifTrue: [^Set with: self].
	
	anagrams := Set new.
	anagrams add: self.
	(self size =2) ifTrue: [anagrams add: self reversed . ^anagrams].
	anagrams add: self reversed.
	
	firstAnagram := (self copyFrom:2 to:3), (self copyFrom:1 to:1).
	anagrams add: firstAnagram.
	anagrams add: firstAnagram reversed.
	
	secondAnagram := (self copyFrom:3 to:3), (self copyFrom:1 to:2).
	anagrams add: secondAnagram.
	anagrams add: secondAnagram reversed.
	
	^ anagrams.! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:29:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:29:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:29:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'camila 10/2/2023 19:29:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'camila 10/2/2023 19:29:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'camila 10/2/2023 19:29:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:26'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:29:26'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:26'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:26'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'camila 10/2/2023 19:29:26'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'camila 10/2/2023 19:29:26'!
FAILURE!

----SNAPSHOT----(2 October 2023 19:29:39) CuisUniversity-5981.image priorSource: 12367417!

----QUIT----(2 October 2023 19:59:44) CuisUniversity-5981.image priorSource: 12394708!

----STARTUP---- (5 October 2023 17:39:54) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #Calendario category: 'Calendario' stamp: 'camila 10/5/2023 17:41:23'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

TestCase subclass: #CalendarioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #CalendarioTest category: 'Calendario' stamp: 'camila 10/5/2023 17:41:47'!
TestCase subclass: #CalendarioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!
!CalendarioTest methodsFor: 'no messages' stamp: 'camila 10/5/2023 17:44:29'!
test01
	|calendario|
	
	calendario = Calendario new
	! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:46:26' prior: 50719017!
test01
	|calendario|
	
	calendario = Calendario new.
	self assert: (calendario esFeriado: Sunday ) .
	! !
!Calendario methodsFor: 'no messages' stamp: 'camila 10/5/2023 17:46:40'!
esFeriado: unDia
	^true! !

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:46:44'!
ERROR!

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:47:04'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:47:35' prior: 50719028!
esFeriado: unDia
	^true.! !

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:47:40'!
ERROR!

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:47:40'!
ERROR!
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:48:19' prior: 50719022!
test01
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Sunday ) .
	! !

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:48:21'!
PASSED!

!testRun: #CalendarioTest #test01 stamp: 'camila 10/5/2023 17:48:21'!
PASSED!
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:48:28'!
test01DomingoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Sunday ) .
	! !

!methodRemoval: CalendarioTest #test01 stamp: 'camila 10/5/2023 17:48:34'!
test01
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Sunday ) .
	!
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:48:48'!
test02SabadoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Sunday ) .
	! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:48:54' prior: 50719070!
test02SabadoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Saturday ) .
	! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:49:43'!
test02LunesEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self deny: (calendario esFeriado: Monday ) .
	! !

!methodRemoval: CalendarioTest #test02SabadoEsFeriado stamp: 'camila 10/5/2023 17:49:45'!
test02SabadoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario esFeriado: Saturday ) .
	!

!testRun: #CalendarioTest #test02LunesEsFeriado stamp: 'camila 10/5/2023 17:49:49'!
FAILURE!

!testRun: #CalendarioTest #test02LunesEsFeriado stamp: 'camila 10/5/2023 17:49:49'!
FAILURE!

Object subclass: #Calendario
	instanceVariableNames: 'diasDeSemanaFeriados'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #Calendario category: 'Calendario' stamp: 'camila 10/5/2023 17:50:24'!
Object subclass: #Calendario
	instanceVariableNames: 'diasDeSemanaFeriados'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!
!Calendario class methodsFor: 'no messages' stamp: 'camila 10/5/2023 17:51:33'!
conDiasDeSemanaFeriado: diasDeSemanaFeriados
^ self new initializeConDiasDeSemanaFeriado: diasDeSemanaFeriados! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:52:08'!
initializeConDiasDeSemanaFeriado: diasDeSemanaFeriado
	 ! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:54:27' prior: 50719057!
test01DomingoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario crearDiaFeriado: Sunday ) .
	! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:54:37'!
crearDiaFeriado: unDia
	! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:54:54' prior: 50719128!
test01DomingoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self assert: (calendario crearDiaDeSemanaFeriado: Sunday ) .
	! !

!methodRemoval: Calendario #crearDiaFeriado: stamp: 'camila 10/5/2023 17:54:58'!
crearDiaFeriado: unDia
	!

!methodRemoval: Calendario #esFeriado: stamp: 'camila 10/5/2023 17:55:00'!
esFeriado: unDia
	^true.!

!methodRemoval: Calendario #initializeConDiasDeSemanaFeriado: stamp: 'camila 10/5/2023 17:55:01'!
initializeConDiasDeSemanaFeriado: diasDeSemanaFeriado
	 !
!Calendario methodsFor: 'no messages' stamp: 'camila 10/5/2023 17:55:17'!
crearDiaDeSemanaFeriado: unDia
	diasDeSemanaFeriados  add: unDia! !

!methodRemoval: Calendario class #conDiasDeSemanaFeriado: stamp: 'camila 10/5/2023 17:55:28'!
conDiasDeSemanaFeriado: diasDeSemanaFeriados
^ self new initializeConDiasDeSemanaFeriado: diasDeSemanaFeriados!
!Calendario methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:56:00' overrides: 16920235!
initialize
	diasDeSemanaFeriados := OrderedCollection new.! !
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:56:37' prior: 50719140!
test01DomingoEsFeriado
	|calendario|
	
	calendario := Calendario new.
	calendario crearDiaDeSemanaFeriado: Sunday.
	self assert: (calendario esFeriado: Sunday ) .
	! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:57:46'!
esFeriado: unDia
	^diasDeSemanaFeriados includes: unDia ! !

!methodRemoval: CalendarioTest #test02LunesEsFeriado stamp: 'camila 10/5/2023 17:57:49'!
test02LunesEsFeriado
	|calendario|
	
	calendario := Calendario new.
	self deny: (calendario esFeriado: Monday ) .
	!

!testRun: #CalendarioTest #test01DomingoEsFeriado stamp: 'camila 10/5/2023 17:57:51'!
PASSED!
!CalendarioTest methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 17:59:03'!
test02FechaEsFeriado
	|calendario|
	
	calendario := Calendario new.
	calendario crearFechaFeriado: November / 3 / 2023.
	self assert: (calendario esFeriado: November / 3 / 2023) .
	! !

----STARTUP---- (5 October 2023 18:49:03) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!


TestCase subclass: #Testxxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #Testxxxx category: 'Calendario' stamp: 'camila 10/5/2023 18:49:35'!
TestCase subclass: #Testxxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!
!Testxxxx methodsFor: 'no messages' stamp: 'camila 10/5/2023 18:51:11'!
test01
	
	| aHolidayDate |
	aHolidayDate := October / 5 / 2023.
	self assert holidayCalendar isHoliday: aHolidayDate! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:51:20' prior: 50719222!
test01
	
	| aHolidayDate holidayCalendar |
	aHolidayDate := October / 5 / 2023.
	self assert: holidayCalendar isHoliday: aHolidayDate! !

Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #HolidayCalendar category: 'Calendario' stamp: 'camila 10/5/2023 18:51:43'!
Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!
!HolidayCalendar methodsFor: 'no messages' stamp: 'camila 10/5/2023 18:52:57'!
isHoliday: aPossibleHoliday
	^true! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:53:01'!
ERROR!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:53:01'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:53:19' prior: 50719229!
test01
	
	| aHolidayDate holidayCalendar |
	aHolidayDate := October / 5 / 2023.
	holidayCalendar := HolidayCalendar new.
	self assert: holidayCalendar isHoliday: aHolidayDate! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:53:31' prior: 50719256!
test01
	
	| aHolidayDate holidayCalendar |
	
	aHolidayDate := October / 5 / 2023.
	holidayCalendar := HolidayCalendar new.
	self assert: (holidayCalendar isHoliday: aHolidayDate).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:53:32'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:53:32'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:55:03' prior: 50719265!
test01
	
	| aHolidayDate holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 5 / 2023.
	
	holidayCalendar addNewHoliday: aHolidayDate.
	
	self assert: (holidayCalendar isHoliday: aHolidayDate).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:55:05'!
ERROR!

!classDefinition: #HolidayCalendar category: 'Calendario' stamp: 'camila 10/5/2023 18:55:30'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'holidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:55:27'!
addNewHoliday: aHoliday
	holidays add: aHoliday ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:55:40'!
ERROR!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:55:40'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:56:02' prior: 50719247!
isHoliday: aPossibleHoliday
	^holidays includes: aPossibleHoliday ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:56:05'!
ERROR!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:56:05'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:56:27' overrides: 16920235!
initialize
	holidays := OrderedCollection new.! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:56:30'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:56:50' prior: 50719279!
test01
	
	| aHolidayDate holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	
	
	self deny: (holidayCalendar isHoliday: aHolidayDate).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:56:50'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:56:50'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:58:00'!
test02
	
	| aHolidayDate holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	
	
	self assert: (holidayCalendar isHoliday: aHolidayDate).! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:58:39' prior: 50719327!
test01
	
	| aHolidayDate holidayCalendar aSecondHolidayDate |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	aSecondHolidayDate := November / 9 / 2021.	
	
	self deny: (holidayCalendar isHoliday: aHolidayDate).! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:59:29' prior: 50719349!
test01
	
	| aHolidayDate holidayCalendar aSecondHolidayDate |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	aSecondHolidayDate := November / 9 / 2021.	
	
	holidayCalendar addNewHoliday: aHolidayDate.
	holidayCalendar addNewHoliday: aSecondHolidayDate .	
	self deny: (holidayCalendar isHoliday: aHolidayDate).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 18:59:30'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 18:59:38' prior: 50719360!
test01
	
	| aHolidayDate holidayCalendar aSecondHolidayDate |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	aSecondHolidayDate := November / 9 / 2021.	
	
	holidayCalendar addNewHoliday: aHolidayDate.
	holidayCalendar addNewHoliday: aSecondHolidayDate .	
	self assert: (holidayCalendar isHoliday: aHolidayDate).! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 19:01:07' prior: 50719340!
test02
	
	| aHolidayDate holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	
	self assert: (holidayCalendar isHoliday: aHolidayDate).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 19:01:10'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 19:01:10'!
FAILURE!

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 19:01:10'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 19:04:48'!
test03
	
	| holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
! !

----SNAPSHOT----(5 October 2023 19:17:32) CuisUniversity-5981.image priorSource: 12394800!

----SNAPSHOT----(5 October 2023 20:11:47) CuisUniversity-5981.image priorSource: 12408364!

TestCase subclass: #Testxxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Testxxxx category: 'MarsRover' stamp: 'camila 10/5/2023 20:15:04'!
TestCase subclass: #Testxxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----SNAPSHOT----(5 October 2023 20:15:22) CuisUniversity-5981.image priorSource: 12408456!

!methodRemoval: Testxxxx #test01 stamp: 'camila 10/5/2023 20:15:31'!
test01
	
	| aHolidayDate holidayCalendar aSecondHolidayDate |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	aSecondHolidayDate := November / 9 / 2021.	
	
	holidayCalendar addNewHoliday: aHolidayDate.
	holidayCalendar addNewHoliday: aSecondHolidayDate .	
	self assert: (holidayCalendar isHoliday: aHolidayDate).!

!methodRemoval: Testxxxx #test02 stamp: 'camila 10/5/2023 20:15:33'!
test02
	
	| aHolidayDate holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aHolidayDate := October / 7 / 2023.
	
	self assert: (holidayCalendar isHoliday: aHolidayDate).!

!methodRemoval: Testxxxx #test03 stamp: 'camila 10/5/2023 20:15:34'!
test03
	
	| holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
!

----SNAPSHOT----(5 October 2023 20:15:38) CuisUniversity-5981.image priorSource: 12408888!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:31:46'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Testxxxx methodsFor: 'no messages' stamp: 'camila 10/5/2023 20:31:41'!
test01
	
	
	| aDirection aPoint marsRovers |
	aPoint:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPoint withDirection: aDirection.
	
	self assert:( marsRovers isInPosition: aPoint pointingTo: aDirection). ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:31:52'!
ERROR!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:31:59'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'camila 10/5/2023 20:32:13'!
at: aPoint withDirection: aDirection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint withDirection: aDirection ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'camila 10/5/2023 20:32:44' prior: 50719481!
at: anInitialPoint withDirection: anInitialDirection 
	
	^self new initializeAt:anInitialPoint  withDirection: anInitialDirection ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:32:50'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:33:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:33:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPoint initialDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialize' stamp: 'camila 10/5/2023 20:33:07'!
initializeAt: anInitialPoint withDirection: anInitialDirection 
	self shouldBeImplemented.
	initialPoint := anInitialPoint.
	initialDirection := anInitialDirection.! !
!MarsRover methodsFor: 'initialize' stamp: 'camila 10/5/2023 20:33:20' prior: 50719515!
initializeAt: anInitialPoint withDirection: anInitialDirection 

	initialPoint := anInitialPoint.
	initialDirection := anInitialDirection.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:33:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'point initialDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:33:40' prior: 50719523!
initializeAt: anInitialPoint withDirection: anInitialDirection 

	point := anInitialPoint.
	initialDirection := anInitialDirection.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:33:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'point currentDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:33:52' prior: 50719538!
initializeAt: anInitialPoint withDirection: anInitialDirection 

	point := anInitialPoint.
	currentDirection := anInitialDirection.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'camila 10/5/2023 20:33:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:33:58' prior: 50719553!
initializeAt: anInitialPoint withDirection: anInitialDirection 

	currentPosition := anInitialPoint.
	currentDirection := anInitialDirection.! !
!MarsRover methodsFor: 'initialize' stamp: 'camila 10/5/2023 20:34:07' prior: 50719568!
initializeAt: anInitialPosition withDirection: anInitialDirection 

	currentPosition := anInitialPosition.
	currentDirection := anInitialDirection.! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:34:08'!
ERROR!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:34:14'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'camila 10/5/2023 20:34:36' prior: 50719491!
at: anInitialPosition withDirection: anInitialDirection 
	
	^self new initializeAt:anInitialPosition  withDirection: anInitialDirection ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:34:49'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:34:56'!
isInPosition: aPoint pointingTo: aDirection 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:35:44' prior: 50719599!
isInPosition: aPoint pointingTo: aDirection 
	^currentPosition = aPoint and: (currentDirection = aDirection ).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:35:45'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:35:45'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:35:49'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:35:49'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:38:01'!
test02
	
	
	| aDirection aPoint marsRovers aStringOfCommands |
	aPoint:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPoint withDirection: aDirection.
	aStringOfCommands := 'f'.
	marsRovers processCommands: aStringOfCommands.
	
	self assert:( marsRovers isInPosition: aPoint pointingTo: aDirection). ! !

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 20:38:13'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:39:38' prior: 50719621!
test02
	
	
	| aDirection aPoint marsRovers aStringOfCommands finalPointAfterCommands |
	aPoint:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPoint withDirection: aDirection.
	aStringOfCommands := 'f'.
	marsRovers processCommands: aStringOfCommands.
	
	finalPointAfterCommands := aPoint + 1@0.
	
	
	self assert:( marsRovers isInPosition: finalPointAfterCommands pointingTo: aDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:39:44' prior: 50719637!
test02
	
	
	| aDirection aPoint marsRovers aStringOfCommands finalPointAfterCommands |
	aPoint:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPoint withDirection: aDirection.
	aStringOfCommands := 'f'.
	marsRovers processCommands: aStringOfCommands.
	
	finalPointAfterCommands := aPoint + 1@0.
	
	self assert:( marsRovers isInPosition: finalPointAfterCommands pointingTo: aDirection). ! !

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 20:39:45'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:39:55'!
processCommands: aStringOfCommands 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:40:19' prior: 50719671!
processCommands: aStringOfCommands 
	! !

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 20:40:29'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:40:51' prior: 50719653!
test02
	
	
	| aDirection aPoint marsRovers aStringOfCommands finalPointAfterCommands |
	aPoint:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPoint withDirection: aDirection.
	aStringOfCommands := 'f'.
	marsRovers processCommands: aStringOfCommands.
	
	finalPointAfterCommands := aPoint + (1@0).
	
	self assert:( marsRovers isInPosition: finalPointAfterCommands pointingTo: aDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:41:14' prior: 50719466!
test01
	
	
	| aDirection aPosition marsRovers |
	aPosition:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPosition withDirection: aDirection.
	
	self assert:( marsRovers isInPosition: aPosition pointingTo: aDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:41:24' prior: 50719700!
test01
	
	
	| aDirection aPosition marsRovers |
	
	aPosition:= 0@0.
	aDirection:= #N.
	
	marsRovers := MarsRover at: aPosition withDirection: aDirection.
	
	self assert:( marsRovers isInPosition: aPosition pointingTo: aDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:41:42' prior: 50719711!
test01
	
	
	| aDirection aPosition marsRover |
	
	aPosition:= 0@0.
	aDirection:= #N.
	
	marsRover := MarsRover at: aPosition withDirection: aDirection.
	
	self assert:( marsRover isInPosition: aPosition pointingTo: aDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:41:51' prior: 50719722!
test01
	
	
	| initialDirection aPosition marsRover |
	
	aPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: aPosition withDirection: initialDirection.
	
	self assert:( marsRover isInPosition: aPosition pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:41:57' prior: 50719733!
test01
	
	
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:43:11' prior: 50719744!
test01
	
	
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:43:14'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/5/2023 20:43:14'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 20:43:14'!
FAILURE!

!testRun: #Testxxxx #test02 stamp: 'camila 10/5/2023 20:43:14'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:43:48' prior: 50719756!
test01
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:45:14' prior: 50719684!
test02
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

----SNAPSHOT----(5 October 2023 20:46:01) CuisUniversity-5981.image priorSource: 12409795!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:49:37' prior: 50719789!
test02
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:50:11' prior: 50719605!
isInPosition: aPosition pointingTo: aDirection 
	^currentPosition = aPosition and: (currentDirection = aDirection ).! !

----SNAPSHOT----(5 October 2023 20:54:15) CuisUniversity-5981.image priorSource: 12420967!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/5/2023 20:55:49' prior: 50719777!
test01
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= 'N'.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !

----STARTUP---- (8 October 2023 20:57:37) as /home/camila/Desktop/CUIS/CUIS/CuisUniversity-5981.image!

!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:02:17'!
test03
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (1@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:02:20'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:02:20'!
FAILURE!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:02:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:04:32' prior: 50719677!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [currentPosition + (0@1)].
	currentPosition - (0@1).! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:04:38' prior: 50719810!
test02
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:04:43' prior: 50719841!
test03
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:04:44'!
FAILURE!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:04:48'!
FAILURE!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:04:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:08:25' prior: 50719866!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [^currentPosition + (0@1)].
	^currentPosition - (0@1).! !

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:08:28'!
FAILURE!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:08:28'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:09:23' prior: 50719918!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [currentPosition := currentPosition + (0@1)].
	currentPosition:= currentPosition - (0@1).! !

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:09:27'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:09:29'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:09:29'!
FAILURE!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:09:29'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:09:29'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:10:05' prior: 50719931!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
	^currentPosition:= currentPosition - (0@1).! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:10:09'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:10:09'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:10:09'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:10:53' prior: 50719893!
test03
	

	| initialDirection initialPosition marsRover aStringOfCommands finalDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	finalDirectionAfterCommands := #O
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finalDirectionAfterCommands). ! !

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:11:04'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:04:43' prior: 50719969!
test03
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:11:53'!
test04
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:11:57'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:12:42' prior: 50719952!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
	aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
	^currentDirection := #O.! !

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:12:47'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:13:14'!
test05
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:13:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:13:52' prior: 50720026!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
	aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
	aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
	^currentDirection  := #E.! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:13:55'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:13:55'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:13:55'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:13:55'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:13:55'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:14:27'!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	marsRover processCommands: aStringOfCommands.
	
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:18:37' prior: 50720083!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError ]. 
	
	! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:19:04' prior: 50720098!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: marsRover ]. 
	
	! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:19:40' prior: 50720115!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: marsRover isInPosition:  initialPosition pointingTo: initialDirection ]. 
	
	! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:19:47' prior: 50720133!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	! !

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:19:56'!
FAILURE!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:19:56'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:21:16' prior: 50720059!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
	aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
	aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
	aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
	
	self error: MarsRover invalidCommandError.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'camila 10/8/2023 21:21:40'!
invalidCommandError
	^'Invalid command input'.! !

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:21:45'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:21:48'!
PASSED!

----SNAPSHOT----(8 October 2023 21:22:20) CuisUniversity-5981.image priorSource: 12421879!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:23:29'!
test07
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'ff'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:23:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:24:55' prior: 50720178!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
		aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
		aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
		aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
		self error: MarsRover invalidCommandError.].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:11' prior: 50720237!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^currentPosition := currentPosition + (0@1)].
		aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
		aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
		aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
		self error: MarsRover invalidCommandError.].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:39'!
moveFoward

	^ currentPosition := currentPosition + (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:39' prior: 50720255!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^currentPosition:= currentPosition - (0@1).].
		aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
		aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
		self error: MarsRover invalidCommandError.].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:48'!
moveBackward

	^ currentPosition:= currentPosition - (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:48' prior: 50720277!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^currentDirection := #O].
		aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
		self error: MarsRover invalidCommandError.].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:58'!
rotateLeft

	^ currentDirection := #O! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:27:58' prior: 50720298!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^currentDirection  := #E].
		self error: MarsRover invalidCommandError.].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:28:06'!
rotateRight

	^ currentDirection  := #E! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:28:06' prior: 50720318!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:28:33' prior: 50720338!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:32:32' prior: 50720353!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	(aStringOfCommands at: 2 = $f) ifTrue: [
		self moveFoward . 
		self processCommands: (aStringOfCommands at: 1 asString). ] 
	
	! !

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:32:59'!
ERROR!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:32:59'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:33:16' prior: 50720369!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: (aStringOfCommands at: 1 asString). ] 
	
	! !

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:33:19'!
ERROR!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:33:19'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:33:37' prior: 50720393!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:33:40'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:33:44'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:34:05'!
test08
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:34:06'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:34:38' prior: 50720454!
test08
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:34:52' prior: 50720417!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:34:56'!
FAILURE!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:34:56'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:35:24' prior: 50720492!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:35:27'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:35:32'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:39:15' prior: 50720520!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:40:47' prior: 50720564!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	aStringOfCommands size = 1 ifTrue: [
		 
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:40:50'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:42:09' prior: 50720588!
processCommands: aStringOfCommands 
	aStringOfCommands do: [:aCommand | 
		self processCommand: aCommand.].
	
	aStringOfCommands ifEmpty: [^self].
	"aStringOfCommands size = 1 ifTrue: [
		 
		aStringOfCommands = 'f' ifTrue: [^self moveFoward].
		aStringOfCommands = 'b' ifTrue: [^self moveBackward.].
		aStringOfCommands = 'l' ifTrue: [^self rotateLeft].
		aStringOfCommands = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.]."
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:42:41'!
processCommand: aCharCommand
		aCharCommand = 'f' ifTrue: [^self moveFoward].
		aCharCommand = 'b' ifTrue: [^self moveBackward.].
		aCharCommand = 'l' ifTrue: [^self rotateLeft].
		aCharCommand = 'r'ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:42:58' prior: 50720656!
processCommand: aCharCommand
		aCharCommand = $f ifTrue: [^self moveFoward].
		aCharCommand = $b ifTrue: [^self moveBackward.].
		aCharCommand = $l ifTrue: [^self rotateLeft].
		aCharCommand = $r ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:43:29' prior: 50720630!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | 
		self processCommand: aCommand.].
	
	((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] 
	
	! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:43:31'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:43:31'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:43:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:43:46' prior: 50720680!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | 
		self processCommand: aCommand.].
	
	"((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] "
	
	! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:43:47'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:44:04'!
processCharCommand: aCharCommand
		aCharCommand = $f ifTrue: [^self moveFoward].
		aCharCommand = $b ifTrue: [^self moveBackward.].
		aCharCommand = $l ifTrue: [^self rotateLeft].
		aCharCommand = $r ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:44:04' prior: 50720715!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | 
		self processCharCommand: aCommand.].
	
	"((aStringOfCommands at: 2) = $f) ifTrue: [
		self moveFoward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] .
	
	((aStringOfCommands at: 2) = $b) ifTrue: [
		self moveBackward . 
		self processCommands: ((aStringOfCommands at: 1) asString). ] "
	
	! !

!methodRemoval: MarsRover #processCommand: stamp: 'camila 10/8/2023 21:44:04'!
processCommand: aCharCommand
		aCharCommand = $f ifTrue: [^self moveFoward].
		aCharCommand = $b ifTrue: [^self moveBackward.].
		aCharCommand = $l ifTrue: [^self rotateLeft].
		aCharCommand = $r ifTrue: [^self rotateRight].
		self error: MarsRover invalidCommandError.!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:44:14'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:44:18' prior: 50720761!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | 
		self processCharCommand: aCommand.].
	
	
	! !

----SNAPSHOT----(8 October 2023 21:44:21) CuisUniversity-5981.image priorSource: 12434032!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:45:41' prior: 50720807!
processCommands: aStringOfCommands 
	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | self processCharCommand: aCommand.].
	
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:45:46' prior: 50720818!
processCommands: aStringOfCommands 

	aStringOfCommands ifEmpty: [^self].
	
	aStringOfCommands do: [:aCommand | self processCharCommand: aCommand.].
	
	
	! !

----SNAPSHOT----(8 October 2023 21:45:48) CuisUniversity-5981.image priorSource: 12453247!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:47:01'!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:47:49' prior: 50720837!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (1@0).
	finalDirection := #O.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:47:52'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:49:35' prior: 50720272!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)]! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:49:42'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:49:46'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:50:38' prior: 50720855!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:50:50'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:50:50'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:51:50' prior: 50720876!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	^currentPosition  = #S ifTrue: [^currentPosition := currentPosition - (0@1)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:51:58' prior: 50720952!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	^currentPosition := currentPosition - (0@1).! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:52:01'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:52:01'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:52:06'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:52:06'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:53:38' prior: 50720313!
rotateLeft
	currentDirection := #N ifTrue: [^ currentDirection := #O].
	^ currentDirection := #S.! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:53:42'!
ERROR!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:53:42'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:54:06' prior: 50720982!
rotateLeft
	currentDirection = #N ifTrue: [^ currentDirection := #O].
	^ currentDirection := #S.! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:54:11'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:54:21'!
PASSED!

----SNAPSHOT----(8 October 2023 21:54:23) CuisUniversity-5981.image priorSource: 12453853!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:54:53' prior: 50720928!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:54:56'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:55:55' prior: 50720963!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	currentPosition = #S ifTrue: [^currentPosition := currentPosition - (0@1).].
	^currentPosition := currentPosition + (1@0).! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:55:59'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:55:59'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:57:26' prior: 50720993!
rotateLeft
	currentDirection = #N ifTrue: [^ currentDirection := #O].
	currentDirection = #S ifTrue: [^currentDirection := #E].
	^currentDirection := #N.! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:57:40' prior: 50721025!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := #N.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:50:38' prior: 50721071!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:58:27'!
test10
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:58:43' prior: 50721063!
rotateLeft
	currentDirection = #N ifTrue: [^ currentDirection := #O].
	currentDirection = #O ifTrue: [^currentDirection := #S].
	^currentDirection := #E.! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 21:58:46'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:58:46'!
FAILURE!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 21:58:46'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:58:59' prior: 50721108!
test10
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:59:01'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 21:59:01'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:04:25'!
FAILURE!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:04:25'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:07:54' prior: 50721046!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	currentPosition = #S ifTrue: [^currentPosition := currentPosition - (0@1).].
	currentPosition = #E ifTrue: [^currentPosition := currentPosition + (1@0).]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:08:16' prior: 50721186!
moveFoward
	currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	currentDirection = #S ifTrue: [^currentPosition := currentPosition - (0@1).].
	currentDirection = #E ifTrue: [^currentPosition := currentPosition + (1@0).]! !

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:08:56'!
PASSED!

----SNAPSHOT----(8 October 2023 22:09:02) CuisUniversity-5981.image priorSource: 12459869!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:09:48'!
test11
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := #N.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:09:52'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:10:28' prior: 50721127!
rotateLeft
	currentDirection = #N ifTrue: [^ currentDirection := #O].
	currentDirection = #O ifTrue: [^currentDirection := #S].
	currentDirection = #S ifTrue: [^currentDirection := #E.].
	^currentDirection := #N.! !

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:10:39'!
PASSED!

!testRun: #Testxxxx #test01 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test02 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test03 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test04 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test05 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test06 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test07 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test08 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:10:43'!
PASSED!

----SNAPSHOT----(8 October 2023 22:10:45) CuisUniversity-5981.image priorSource: 12466719!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:11:06'!
test01InitializeMarsRover
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test01 stamp: 'camila 10/8/2023 22:11:19'!
test01
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). !

!testRun: #Testxxxx #test01InitializeMarsRover stamp: 'camila 10/8/2023 22:11:20'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:11:53'!
test01NewMarsRoverIsInValidPosition
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test01InitializeMarsRover stamp: 'camila 10/8/2023 22:11:54'!
test01InitializeMarsRover
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:13:15'!
test02MoveForwardIncrementsAxisY
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test02 stamp: 'camila 10/8/2023 22:13:15'!
test02
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:13:35'!
test03MoveBackwardDecrementsAxisY
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test03 stamp: 'camila 10/8/2023 22:13:35'!
test03
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:13:59'!
test04RotateLeftChangesDirectionToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!methodRemoval: Testxxxx #test04 stamp: 'camila 10/8/2023 22:13:59'!
test04
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:14:38'!
test05RotateRightChangesDirectionToEste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!methodRemoval: Testxxxx #test05 stamp: 'camila 10/8/2023 22:14:38'!
test05
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:14:52'!
test05RotateRightChangesDirectionFromNorteToEste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!methodRemoval: Testxxxx #test05RotateRightChangesDirectionToEste stamp: 'camila 10/8/2023 22:14:52'!
test05RotateRightChangesDirectionToEste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:15:04'!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !

!methodRemoval: Testxxxx #test04RotateLeftChangesDirectionToOeste stamp: 'camila 10/8/2023 22:15:04'!
test04RotateLeftChangesDirectionToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:15:13'!
test06InvalidCommand
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	! !

!methodRemoval: Testxxxx #test06 stamp: 'camila 10/8/2023 22:15:13'!
test06
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:15:37'!
test07TwoForwardCommands
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'ff'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test07 stamp: 'camila 10/8/2023 22:15:37'!
test07
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'ff'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:17:17'!
test08ForwardBackwardEnNorte
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !

!methodRemoval: Testxxxx #test08 stamp: 'camila 10/8/2023 22:17:17'!
test08
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:18:10' prior: 50721090!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:18:12'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:19:45' prior: 50720333!
rotateRight

	currentDirection := #N ifTrue: [^currentDirection  := #E].
	^currentDirection := #S.! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:20:00' prior: 50721668!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:20:12'!
test12
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:18:10' prior: 50721696!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 21:50:38' prior: 50721733!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:20:50'!
ERROR!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:20:50'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:20:50'!
ERROR!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:21:19'!
ERROR!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:21:19'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:21:19'!
ERROR!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:21:21'!
ERROR!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:22:20'!
ERROR!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:22:20'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:22:20'!
ERROR!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:22:23'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:22:41' prior: 50721689!
rotateRight

	currentDirection = #N ifTrue: [^currentDirection  := #E].
	^currentDirection := #S.! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:22:45'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:22:45'!
FAILURE!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:22:45'!
FAILURE!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:24:43' prior: 50721714!
test12
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:24:44'!
PASSED!

----SNAPSHOT----(8 October 2023 22:24:48) CuisUniversity-5981.image priorSource: 12468675!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:25:30' prior: 50721881!
rotateRight

	currentDirection = #N ifTrue: [^currentDirection  := #E].
	currentDirection = #E ifTrue: [^currentDirection := #S].
	currentDirection = #S ifTrue: [^currentDirection := #O.].
	^currentDirection := #N.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:26:51' prior: 50720293!
moveBackward
	
	currentDirection =#N ifTrue: [^currentPosition := currentPosition - (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition + (1@0)].
	currentDirection = #S ifTrue: [^currentPosition := currentPosition + (0@1).].
	currentDirection = #E ifTrue: [^currentPosition := currentPosition - (1@0).]! !

----SNAPSHOT----(8 October 2023 22:27:15) CuisUniversity-5981.image priorSource: 12490496!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:27:46' prior: 50721982!
rotateRight

	currentDirection = #N ifTrue: [^currentDirection  := #E].
	currentDirection = #E ifTrue: [^currentDirection := #S].
	currentDirection = #S ifTrue: [^currentDirection := #O.].
	currentDirection = #O ifTrue:[^currentDirection := #N.]! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:27:46'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:27:46'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:28:07' prior: 50721260!
rotateLeft
	currentDirection = #N ifTrue: [^ currentDirection := #O].
	currentDirection = #O ifTrue: [^currentDirection := #S].
	currentDirection = #S ifTrue: [^currentDirection := #E.].
	currentDirection= #E ifTrue: [^currentDirection := #N.]! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:28:07'!
PASSED!

----SNAPSHOT----(8 October 2023 22:28:10) CuisUniversity-5981.image priorSource: 12491337!

Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalDirections category: 'MarsRover' stamp: 'camila 10/8/2023 22:29:41'!
Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:30:42' prior: 50721200!
moveFoward
	currentDirection executeMoveForwardFor: self.
	"currentDirection =#N ifTrue: [^currentPosition := currentPosition + (0@1)].
	currentDirection = #O ifTrue: [^currentPosition := currentPosition - (1@0)].
	currentDirection = #S ifTrue: [^currentPosition := currentPosition - (0@1).].
	currentDirection = #E ifTrue: [^currentPosition := currentPosition + (1@0).]"! !

CardinalDirections subclass: #Norte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Norte category: 'MarsRover' stamp: 'camila 10/8/2023 22:31:00'!
CardinalDirections subclass: #Norte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirections subclass: #Sur
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Sur category: 'MarsRover' stamp: 'camila 10/8/2023 22:31:03'!
CardinalDirections subclass: #Sur
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirections subclass: #Este
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Este category: 'MarsRover' stamp: 'camila 10/8/2023 22:31:06'!
CardinalDirections subclass: #Este
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirections subclass: #Oeste
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Oeste category: 'MarsRover' stamp: 'camila 10/8/2023 22:31:09'!
CardinalDirections subclass: #Oeste
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalDirections methodsFor: 'no messages' stamp: 'camila 10/8/2023 22:31:39'!
executeMoveForwardFor: aMarsRover
	self subclassResponsibility ! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:31:43' overrides: 50722172!
executeMoveForwardFor: aMarsRover
	self subclassResponsibility ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:31:43' overrides: 50722172!
executeMoveForwardFor: aMarsRover
	self subclassResponsibility ! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:31:43' overrides: 50722172!
executeMoveForwardFor: aMarsRover
	self subclassResponsibility ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:31:43' overrides: 50722172!
executeMoveForwardFor: aMarsRover
	self subclassResponsibility ! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:31:43' prior: 50722172!
executeMoveForwardFor: aMarsRover

	self subclassResponsibility! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:32:34'!
moveForwardPointingNorte
	^currentPosition := currentPosition + (0@1)! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:32:46' prior: 50722178 overrides: 50722202!
executeMoveForwardFor: aMarsRover
	aMarsRover moveForwardPointingNorte ! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:33:32'!
moveFowardPointingOeste
^currentPosition := currentPosition - (1@0)! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:33:46'!
moveFowardPointingSur
	
	^currentPosition := currentPosition - (0@1).! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:34:02'!
moveFowardPointingEste

	^currentPosition := currentPosition + (1@0)! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:34:12' prior: 50722190 overrides: 50722202!
executeMoveForwardFor: aMarsRover
	aMarsRover moveFowardPointingEste ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:34:25' prior: 50722196 overrides: 50722202!
executeMoveForwardFor: aMarsRover
	aMarsRover moveFowardPointingOeste ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:34:36' prior: 50722184 overrides: 50722202!
executeMoveForwardFor: aMarsRover
	aMarsRover moveFowardPointingSur ! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:35:21' prior: 50722114!
moveFoward
	currentDirection executeMoveForwardFor: self.! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:35:38'!
moveBackwardPointingNorte
	^currentPosition := currentPosition - (0@1)! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:35:54'!
moveBackwardPointingSur
	
	^currentPosition := currentPosition + (0@1).! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:36:06'!
moveBackwardPointingEste
	
	^currentPosition := currentPosition - (1@0).! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:36:20'!
moveBackwardPointingOeste
	
	^currentPosition := currentPosition + (1@0)! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:36:44' prior: 50721992!
moveBackward
	currentDirection executeMoveBackwardFor: self.! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:37:15'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:37:15'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:37:15'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:37:15'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:37:15'!
ERROR!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:37:30'!
ERROR!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:37:30'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:37:55' prior: 50721326!
test01NewMarsRoverIsInValidPosition
		
	| initialDirection initialPosition marsRover |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:37:59' prior: 50721351!
test02MoveForwardIncrementsAxisY
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:38:15' prior: 50721525!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:38:25' prior: 50722355!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= #N.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #O.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:11' prior: 50721386!
test03MoveBackwardDecrementsAxisY
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:17' prior: 50722374!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Oeste new.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:21' prior: 50721489!
test05RotateRightChangesDirectionFromNorteToEste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := #E.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:24' prior: 50722431!
test05RotateRightChangesDirectionFromNorteToEste
	

	| initialDirection initialPosition marsRover aStringOfCommands finaDirectionAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Este new.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:28' prior: 50721561!
test06InvalidCommand
	

	| initialDirection initialPosition marsRover aStringOfCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:33' prior: 50721599!
test07TwoForwardCommands
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'ff'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:37' prior: 50721633!
test08ForwardBackwardEnNorte
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:47' prior: 50721752!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:52' prior: 50721158!
test10
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := #E.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:39:54' prior: 50722547!
test10
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:40:01' prior: 50721239!
test11
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:40:06' prior: 50721924!
test12
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := #S.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:40:09' prior: 50722604!
test12
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:41:07' prior: 50722055!
rotateLeft
	(currentDirection isKindOf: Norte)  ifTrue: [^ currentDirection := Oeste new].
	(currentDirection isKindOf: Oeste) ifTrue: [^currentDirection := Sur new].
	(currentDirection isKindOf: Sur) ifTrue: [^currentDirection := Este new].
	(currentDirection isKindOf: Este) ifTrue: [^currentDirection := Norte new.]! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:41:31' prior: 50722009!
rotateRight

	(currentDirection isKindOf: Norte) ifTrue: [^currentDirection  := #E].
	(currentDirection isKindOf: Este) ifTrue: [^currentDirection := #S].
	currentDirection = #S ifTrue: [^currentDirection := #O.].
	currentDirection = #O ifTrue:[^currentDirection := #N.]! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:41:40' prior: 50722655!
rotateRight

	(currentDirection isKindOf: Norte) ifTrue: [^currentDirection  := #E].
	(currentDirection isKindOf: Este) ifTrue: [^currentDirection := #S].
	(currentDirection isKindOf: Sur) ifTrue: [^currentDirection := #O.].
	(currentDirection isKindOf: Oeste) ifTrue:[^currentDirection := #N.]! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:41:43' prior: 50722667!
rotateRight

	(currentDirection isKindOf: Norte) ifTrue: [^currentDirection  := Este new].
	(currentDirection isKindOf: Este) ifTrue: [^currentDirection := #S].
	(currentDirection isKindOf: Sur) ifTrue: [^currentDirection := #O.].
	(currentDirection isKindOf: Oeste) ifTrue:[^currentDirection := #N.]! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:41:57' prior: 50722679!
rotateRight

	(currentDirection isKindOf: Norte) ifTrue: [^currentDirection  := Este new].
	(currentDirection isKindOf: Este) ifTrue: [^currentDirection := Sur new].
	(currentDirection isKindOf: Sur) ifTrue: [^currentDirection := Oeste new.].
	(currentDirection isKindOf: Oeste) ifTrue:[^currentDirection := Norte new.]! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:42:05'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:42:05'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:42:05'!
ERROR!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:42:05'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:42:05'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:42:05'!
ERROR!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:42:05'!
FAILURE!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:42:09'!
ERROR!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:42:17'!
FAILURE!
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:50' overrides: 16901772!
= anObject
	self subclassResponsibility ! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:56' overrides: 50722747!
= anObject
	self subclassResponsibility ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:56' overrides: 50722747!
= anObject
	self subclassResponsibility ! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:56' overrides: 50722747!
= anObject
	self subclassResponsibility ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:56' overrides: 50722747!
= anObject
	self subclassResponsibility ! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:46:56' prior: 50722747 overrides: 16901772!
= anObject

	self subclassResponsibility! !

!methodRemoval: CardinalDirections #= stamp: 'camila 10/8/2023 22:47:32'!
= anObject

	self subclassResponsibility!
!MarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 22:47:47' prior: 50719828!
isInPosition: aPosition pointingTo: aDirection 
	^currentPosition = aPosition and: (currentDirection class = aDirection class).! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:47:50'!
ERROR!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:47:50'!
ERROR!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:47:50'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:47:50'!
PASSED!
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:11'!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:19' overrides: 50722823!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:19' overrides: 50722823!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:20' overrides: 50722823!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:20' overrides: 50722823!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:20' prior: 50722823!
executeMoveBackwardFor: aMarsRover

	self subclassResponsibility! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:33' prior: 50722841 overrides: 50722853!
executeMoveBackwardFor: aMarsRover

	aMarsRover moveBackwardPointingEste ! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:43' prior: 50722829 overrides: 50722853!
executeMoveBackwardFor: aMarsRover

	aMarsRover moveBackwardPointingNorte ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:48:54' prior: 50722847 overrides: 50722853!
executeMoveBackwardFor: aMarsRover
aMarsRover moveBackwardPointingOeste ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:49:04' prior: 50722835 overrides: 50722853!
executeMoveBackwardFor: aMarsRover

	aMarsRover moveBackwardPointingSur ! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:49:08'!
PASSED!

----SNAPSHOT----(8 October 2023 22:49:10) CuisUniversity-5981.image priorSource: 12494366!
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:51:03'!
rotateLeftFromNorteToOeste
	^ currentDirection := Oeste new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:51:13'!
rotateLeftFromOesteToSur
	^currentDirection := Sur new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:51:27'!
rotateLeftFromSurToEste
	^currentDirection := Este new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:51:37'!
rotateLeftFromEsteToNorte
	^currentDirection := Norte new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:51:55' prior: 50722642!
rotateLeft
	currentDirection rotateLeftFor: self.! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:10'!
rotateLeftFor: aMarsRover
	self subclassResponsibility .! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:14' overrides: 50722942!
rotateLeftFor: aMarsRover
	self subclassResponsibility .! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:14' overrides: 50722942!
rotateLeftFor: aMarsRover
	self subclassResponsibility .! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:14' overrides: 50722942!
rotateLeftFor: aMarsRover
	self subclassResponsibility .! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:14' overrides: 50722942!
rotateLeftFor: aMarsRover
	self subclassResponsibility .! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:14' prior: 50722942!
rotateLeftFor: aMarsRover

	self subclassResponsibility! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:30' prior: 50722957 overrides: 50722968!
rotateLeftFor: aMarsRover
	aMarsRover  rotateLeftFromEsteToNorte ! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:41' prior: 50722947 overrides: 50722968!
rotateLeftFor: aMarsRover
	aMarsRover rotateLeftFromNorteToOeste ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:52:52' prior: 50722962 overrides: 50722968!
rotateLeftFor: aMarsRover
	aMarsRover rotateLeftFromOesteToSur ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:53:02' prior: 50722952 overrides: 50722968!
rotateLeftFor: aMarsRover
	aMarsRover rotateLeftFromSurToEste ! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:53:04'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:53:04'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:53:28'!
rotateRightFromNorteToEste

	^currentDirection  := Este new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:53:39'!
rotateRightFromEsteToSur

	^currentDirection := Sur new! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:53:50'!
rotateRightFromSurToOeste

	^currentDirection := Oeste new.! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:53:59'!
rotateRightFromOesteToNorte

^currentDirection := Norte new.! !
!MarsRover methodsFor: 'movement' stamp: 'camila 10/8/2023 22:54:18' prior: 50722692!
rotateRight
	currentDirection rotateRightFor: self.! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:24'!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:28' overrides: 50723056!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:28' overrides: 50723056!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:28' overrides: 50723056!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:28' overrides: 50723056!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!CardinalDirections methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:28' prior: 50723056!
rotateRightFor: aMarsRover

	self subclassResponsibility! !
!Este methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:43' prior: 50723071 overrides: 50723082!
rotateRightFor: aMarsRover
	aMarsRover rotateRightFromEsteToSur ! !
!Norte methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:54:53' prior: 50723061 overrides: 50723082!
rotateRightFor: aMarsRover

	aMarsRover rotateRightFromNorteToEste ! !
!Oeste methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:55:03' prior: 50723076 overrides: 50723082!
rotateRightFor: aMarsRover

	aMarsRover rotateRightFromOesteToNorte ! !
!Sur methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:55:14' prior: 50723066 overrides: 50723082!
rotateRightFor: aMarsRover

	aMarsRover rotateRightFromSurToOeste ! !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:55:25'!
PASSED!

----SNAPSHOT----(8 October 2023 22:55:27) CuisUniversity-5981.image priorSource: 12520499!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:58:43'!
test13
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #Testxxxx #test13 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test13 stamp: 'camila 10/8/2023 22:58:45'!
PASSED!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 22:58:50'!
PASSED!

!testRun: #Testxxxx #test13 stamp: 'camila 10/8/2023 22:58:50'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:59:12'!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbz'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:59:20' prior: 50723242!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbz='.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:59:27' prior: 50723261!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 22:59:43' prior: 50723280!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:00:03' prior: 50723299!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !

!testRun: #Testxxxx #test14 stamp: 'camila 10/8/2023 23:00:05'!
ERROR!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:00:26' prior: 50723324!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !

!testRun: #Testxxxx #test14 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test09 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test10 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test11 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test12 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test13 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!

!testRun: #Testxxxx #test14 stamp: 'camila 10/8/2023 23:00:28'!
PASSED!
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:00:38' prior: 50723352!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:01:56'!
test09TwoLeftForward
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:03:40'!
test09TwoLeftForwardCommandsDecrementsYaxisOne

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test09TwoLeftForward stamp: 'camila 10/8/2023 23:03:42'!
test09TwoLeftForward
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !

!methodRemoval: Testxxxx #test09 stamp: 'camila 10/8/2023 23:03:43'!
test09
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:04:32'!
test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test10 stamp: 'camila 10/8/2023 23:04:35'!
test10
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:04:45'!
test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test09TwoLeftForwardCommandsDecrementsYaxisOne stamp: 'camila 10/8/2023 23:04:48'!
test09TwoLeftForwardCommandsDecrementsYaxisOne

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:05:37'!
test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test11 stamp: 'camila 10/8/2023 23:05:40'!
test11
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'llllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:06:07'!
test12TwoRrightOneForwardDecrementsYaxisAndPointToSur
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test12 stamp: 'camila 10/8/2023 23:06:10'!
test12
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:07:40'!
test13MultipleRotationsAndMovementsEndsPointingToEste

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!methodRemoval: Testxxxx #test13 stamp: 'camila 10/8/2023 23:07:42'!
test13
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). !
!Testxxxx methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:08:03'!
test14ExecuteUntilInvalidCommand

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !

!methodRemoval: Testxxxx #test14 stamp: 'camila 10/8/2023 23:08:06'!
test14
	

	| initialDirection initialPosition marsRover aStringOfCommands finalPointAfterCommands finalDirection |
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. !

!testRun: #Testxxxx #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test06InvalidCommand stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!testRun: #Testxxxx #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:08:08'!
PASSED!

!classRenamed: #Testxxxx as: #TestMarsRover stamp: 'camila 10/8/2023 23:08:19'!
Smalltalk renameClassNamed: #Testxxxx as: #TestMarsRover!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:08:22'!
PASSED!

!methodRemoval: Este #= stamp: 'camila 10/8/2023 23:08:39'!
= anObject
	self subclassResponsibility !

!methodRemoval: Norte #= stamp: 'camila 10/8/2023 23:08:49'!
= anObject
	self subclassResponsibility !

!methodRemoval: Oeste #= stamp: 'camila 10/8/2023 23:08:58'!
= anObject
	self subclassResponsibility !

!methodRemoval: Sur #= stamp: 'camila 10/8/2023 23:09:08'!
= anObject
	self subclassResponsibility !

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:09:13'!
PASSED!

----SNAPSHOT----(8 October 2023 23:09:16) CuisUniversity-5981.image priorSource: 12527821!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:10:58'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:10:59'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition1 initialDirection1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:11:00'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition1 initialDirection1 marsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:10:56' overrides: 16961394!
setUp
	
	initialPosition1:= 0@0.
	initialDirection1:= Norte new.
	marsRover1 := MarsRover at: initialPosition1 withDirection: initialDirection1.! !
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:11:13' prior: 50722323!
test01NewMarsRoverIsInValidPosition
		
	
	self assert: (marsRover1 isInPosition: initialPosition1 pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:11:45' prior: 50722336!
test02MoveForwardIncrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'f'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 + (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:11:48'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:12:39' prior: 50722393!
test03MoveBackwardDecrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'b'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 - (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:12:40'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:12:40'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:12:57' prior: 50722412!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'l'.
	marsRover1 processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Oeste new.
	
	self assert:( marsRover1 isInPosition: initialPosition1 pointingTo: finaDirectionAfterCommands). ! !

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:12:58'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:12:58'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:13:18' prior: 50722450!
test05RotateRightChangesDirectionFromNorteToEste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'r'.
	marsRover1 processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Este new.
	
	self assert:( marsRover1 isInPosition: initialPosition1 pointingTo: finaDirectionAfterCommands). ! !

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:13:19'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:13:19'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:13:41' prior: 50722469!
test06InvalidCommand
	

	|    aStringOfCommands |
	
	aStringOfCommands := 'p'.
	
	self should: [marsRover1 processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover1 isInPosition:  initialPosition1 pointingTo: initialDirection1) ]. 
	
	! !

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:13:43'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:13:43'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:13:59' prior: 50722490!
test07TwoForwardCommands
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'ff'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 + (0@2).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:14:00'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:14:00'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:14:16' prior: 50722509!
test08ForwardBackwardEnNorte
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'fb'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 + (0@0).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:14:31' prior: 50723556!
test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:14:32'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:14:32'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:14:46' prior: 50723517!
test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'lllf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:14:47'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:14:47'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:15:02' prior: 50723597!
test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llllf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:15:03'!
PASSED!

----SNAPSHOT----(8 October 2023 23:15:32) CuisUniversity-5981.image priorSource: 12552721!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:15:54' prior: 50723636!
test12TwoRrightOneForwardDecrementsYaxisAndPointToSur
	

	|    aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rrf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition1 - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:15:55'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:15:55'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:16:06' prior: 50723674!
test13MultipleRotationsAndMovementsEndsPointingToEste

	| aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rlfrb'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:16:07'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:16:07'!
PASSED!
!TestMarsRover methodsFor: 'testing' stamp: 'camila 10/8/2023 23:16:19' prior: 50723711!
test14ExecuteUntilInvalidCommand

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self should: [marsRover1 processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover1 isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:16:19'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:16:20'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:16:20'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:16:20'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:16:20'!
PASSED!

----SNAPSHOT----(8 October 2023 23:16:29) CuisUniversity-5981.image priorSource: 12572506!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:16:42'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition initialDirection1 marsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724118!
test05RotateRightChangesDirectionFromNorteToEste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'r'.
	marsRover1 processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Este new.
	
	self assert:( marsRover1 isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50723959!
test01NewMarsRoverIsInValidPosition
		
	
	self assert: (marsRover1 isInPosition: initialPosition pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50723951 overrides: 16961394!
setUp
	
	initialPosition:= 0@0.
	initialDirection1:= Norte new.
	marsRover1 := MarsRover at: initialPosition withDirection: initialDirection1.! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724319!
test08ForwardBackwardEnNorte
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'fb'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50723966!
test02MoveForwardIncrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'f'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724402!
test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'lllf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50723983!
test03MoveBackwardDecrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'b'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724050!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'l'.
	marsRover1 processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Oeste new.
	
	self assert:( marsRover1 isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724253!
test07TwoForwardCommands
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'ff'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection1). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724185!
test06InvalidCommand
	

	|    aStringOfCommands |
	
	aStringOfCommands := 'p'.
	
	self should: [marsRover1 processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover1 isInPosition:  initialPosition pointingTo: initialDirection1) ]. 
	
	! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724472!
test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llllf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724545!
test12TwoRrightOneForwardDecrementsYaxisAndPointToSur
	

	|    aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rrf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:42' prior: 50724332!
test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llf'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:16:46'!
PASSED!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:16:55'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition initialDirection marsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724869!
test07TwoForwardCommands
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'ff'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724841!
test03MoveBackwardDecrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'b'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724797!
test08ForwardBackwardEnNorte
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'fb'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724781!
test01NewMarsRoverIsInValidPosition
		
	
	self assert: (marsRover1 isInPosition: initialPosition pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724789 overrides: 16961394!
setUp
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	marsRover1 := MarsRover at: initialPosition withDirection: initialDirection.! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724811!
test02MoveForwardIncrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'f'.
	marsRover1 processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover1 isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:16:55' prior: 50724882!
test06InvalidCommand
	

	|    aStringOfCommands |
	
	aStringOfCommands := 'p'.
	
	self should: [marsRover1 processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover1 isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	! !

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'camila 10/8/2023 23:17:04'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: 'initialPosition initialDirection marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725060!
test02MoveForwardIncrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'f'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724897!
test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@1).
	finalDirection := Norte new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724614!
test13MultipleRotationsAndMovementsEndsPointingToEste

	| aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rlfrb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725003!
test07TwoForwardCommands
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'ff'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@2).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724913!
test12TwoRrightOneForwardDecrementsYaxisAndPointToSur
	

	|    aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rrf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725016!
test03MoveBackwardDecrementsAxisY
	

	|    aStringOfCommands finalPointAfterCommands |
	
	
	aStringOfCommands := 'b'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724825!
test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'lllf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (1@0).
	finalDirection := Este new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725030!
test08ForwardBackwardEnNorte
	

	|    aStringOfCommands finalPointAfterCommands |
	
	aStringOfCommands := 'fb'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition + (0@0).
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724855!
test04RotateLeftChangesDirectionFromNorteToOeste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'l'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Oeste new.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725052 overrides: 16961394!
setUp
	
	initialPosition:= 0@0.
	initialDirection:= Norte new.
	marsRover := MarsRover at: initialPosition withDirection: initialDirection.! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724929!
test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'llf'.
	marsRover processCommands: aStringOfCommands.
	
	finalPointAfterCommands := initialPosition - (0@1).
	finalDirection := Sur new.
	
	self assert:( marsRover isInPosition: finalPointAfterCommands pointingTo: finalDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725074!
test06InvalidCommand
	

	|    aStringOfCommands |
	
	aStringOfCommands := 'p'.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  initialPosition pointingTo: initialDirection) ]. 
	
	! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50725044!
test01NewMarsRoverIsInValidPosition
		
	
	self assert: (marsRover isInPosition: initialPosition pointingTo: initialDirection). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724767!
test05RotateRightChangesDirectionFromNorteToEste
	

	|    aStringOfCommands finaDirectionAfterCommands |
	
	
	aStringOfCommands := 'r'.
	marsRover processCommands: aStringOfCommands.
	
	finaDirectionAfterCommands := Este new.
	
	self assert:( marsRover isInPosition: initialPosition pointingTo: finaDirectionAfterCommands). ! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'camila 10/8/2023 23:17:04' prior: 50724683!
test14ExecuteUntilInvalidCommand

	|  aStringOfCommands finalPointAfterCommands finalDirection |
	
	aStringOfCommands := 'rlfrbzl'.
	
	finalPointAfterCommands := (-1@1).
	finalDirection := Este new.
	
	self should: [marsRover processCommands: aStringOfCommands.] 
		raise: Error  
		withExceptionDo: [ :anError | 
						self assert: anError messageText equals: MarsRover invalidCommandError.
						self assert: (marsRover isInPosition:  finalPointAfterCommands 
											pointingTo: finalDirection) ]. ! !

!testRun: #TestMarsRover #test01NewMarsRoverIsInValidPosition stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test02MoveForwardIncrementsAxisY stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test03MoveBackwardDecrementsAxisY stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test04RotateLeftChangesDirectionFromNorteToOeste stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test05RotateRightChangesDirectionFromNorteToEste stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test06InvalidCommand stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test07TwoForwardCommands stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test08ForwardBackwardEnNorte stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test09TwoLeftForwardCommandsDecrementsYaxisOneAndPointToSur stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test10ThreeLeftOneForwardCommandsIncrementsXaxisOneAndPointToEste stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test11CompleteRotationOneForwardIncrementsYaxisAndInitialDirection stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test12TwoRrightOneForwardDecrementsYaxisAndPointToSur stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test13MultipleRotationsAndMovementsEndsPointingToEste stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

!testRun: #TestMarsRover #test14ExecuteUntilInvalidCommand stamp: 'camila 10/8/2023 23:17:07'!
PASSED!

----SNAPSHOT----(8 October 2023 23:18:47) CuisUniversity-5981.image priorSource: 12579337!