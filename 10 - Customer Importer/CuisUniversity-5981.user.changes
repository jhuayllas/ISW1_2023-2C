

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (13 November 2023 19:38:21) as /home/camila/Desktop/CUIS CUSTOMER IMPORTER/linux64/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS CUSTOMER IMPORTER/linux64/CustomerImporter.st----!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:04:51' prior: 50650334!
test01Import

	|numberOfCustomers session |
	
	Customer importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:05:43' prior: 50650594!
test01Import

	|numberOfCustomers session |
	
	Customer importCustomers .
	
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:05:59' prior: 50650603!
test01Import

	|numberOfCustomers session |
	
	Customer importCustomers .
	
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	session close.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:06:01'!
FAILURE!

----SNAPSHOT----(13 November 2023 20:06:27) CuisUniversity-5981.image priorSource: 10197292!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:22:44' prior: 50650616!
test01Import

	|numberOfCustomers session |
	
	Customer importCustomers .
	
	"session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	session close."
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:22:53'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:22:54'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:24:12'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:24:25' prior: 50650635!
test01Import

	
	
	self importCustomers .
	
	"session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	session close."
	
	! !

!methodRemoval: Customer class #importCustomers stamp: 'cc 11/13/2023 20:24:36'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:25:02'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:25:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:27:34' prior: 50650653!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'cc 11/13/2023 20:27:34'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:28:21' prior: 50650694!
test01Import

	
	
	| numberOfCustomers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	session close.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:28:35' prior: 50650799!
test01Import

	
	
	| numberOfCustomers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:28:37'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:28:38'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:30:29' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:30:29' prior: 50650751!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	self setUp.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:30:51' prior: 50650823 overrides: 16961394!
setUp

	"super setUp a veces"
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:31:00' prior: 50650809!
test01Import

	| numberOfCustomers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:31:37' prior: 50650830!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:31:47'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:33:03' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:33:03' prior: 50650885!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	self tearDown.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:33:13' prior: 50650930!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:33:14'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:38:15' prior: 50650876!
test01Import

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'ID' and: [aCustomer identificationNumber =' 22333444']]
				ofType: Customer.
				
				self assert: customers size equals: 1.
				customer := customers anyOne.
				self assert: customer firstName equals: 'Pepe'.
				self assert: customer lastName equals: 'Sanchez'.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:38:29' prior: 50651006!
test01Import

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'ID' and: [aCustomer identificationNumber =' 22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:38:31'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:40:36'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:42:18' prior: 50651026!
test01Import

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber =' 22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:42:25'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:42:55'!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber =' 22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:43:01' prior: 50651051!
test01Import

	| numberOfCustomers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:43:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 20:47:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:50:32' prior: 50650967!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 20:53:13' prior: 50651108!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 20:53:15'!
FAILURE!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 20:53:46'!
FAILURE!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 20:53:47'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:05:42' prior: 50651073!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:05:49'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:07:19' prior: 50651189!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	self assert: customer addresses size equals: 2.
	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:07:20'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:07:21'!
PASSED!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:07:22'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:09:02' prior: 50651213!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:09:05'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:09:06'!
PASSED!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:09:07'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:10:28' prior: 50651244!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:13:00' prior: 50651276!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: '3322' .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: '1636' .
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: '888' .
	secondAddress town: 'Florida'.
	secondAddress zipCode: '1122' .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: customerAddresses includes: firstAddress.
	

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:13:10' prior: 50651301!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: '3322' .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: '1636' .
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: '888' .
	secondAddress town: 'Florida'.
	secondAddress zipCode: '1122' .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: customerAddresses includes: firstAddress.
	self assert: customerAddresses includes: secondAddress .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:13:11'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:14:00' prior: 50651341!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: '1636' .
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: '1122' .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: customerAddresses includes: firstAddress.
	self assert: customerAddresses includes: secondAddress .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:14:23'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:15:02' prior: 50651386!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: customerAddresses includes: firstAddress.
	self assert: customerAddresses includes: secondAddress .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:15:21'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:16:15' prior: 50651431!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	"self assert: customerAddresses includes: firstAddress."
	self assert: customerAddresses includes: secondAddress .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:16:16'!
FAILURE!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:17:17'!
FAILURE!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:17:18'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:17:47' prior: 50651475!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:17:48'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:18:04' prior: 50651525!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: customerAddresses includes: firstAddress.
	self assert: (customerAddresses includes: secondAddress) .

	! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:18:05'!
FAILURE!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:19:07'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:19:57' prior: 50651569!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !
!Address methodsFor: 'nil' stamp: 'cc 11/13/2023 21:24:46' overrides: 16901772!
= anObject
	^(self province == anObject  province )
		and: [self streetName == anObject streetName]
		and: [self streetNumber == anObject streetNumber]
		and: [self town == anObject  town]
		and: [self zipCode == anObject zipCode].! !
!Address methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:24:54' overrides: 16920284!
== anObject
	^(self province == anObject  province )
		and: [self streetName == anObject streetName]
		and: [self streetNumber == anObject streetNumber]
		and: [self town == anObject  town]
		and: [self zipCode == anObject zipCode].! !

!methodRemoval: Address #= stamp: 'cc 11/13/2023 21:25:01'!
= anObject
	^(self province == anObject  province )
		and: [self streetName == anObject streetName]
		and: [self streetNumber == anObject streetNumber]
		and: [self town == anObject  town]
		and: [self zipCode == anObject zipCode].!

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:25:07'!
FAILURE!
!Address methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:26:02' overrides: 16901772!
= anObject
	^(self province == anObject  province )
		and: [self streetName == anObject streetName]
		and: [self streetNumber == anObject streetNumber]
		and: [self town == anObject  town]
		and: [self zipCode == anObject zipCode].! !
!Address methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:26:19' prior: 50651691 overrides: 16901772!
= anObject
	^(self province = anObject  province )
		and: [self streetName = anObject streetName]
		and: [self streetNumber = anObject streetNumber]
		and: [self town = anObject  town]
		and: [self zipCode = anObject zipCode].! !

!testRun: #ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:26:23'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:26:57'!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !

!methodRemoval: ImportTest #test02CustomersAddedAreCorrect stamp: 'cc 11/13/2023 21:26:57'!
test02CustomersAddedAreCorrect

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:27:13'!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:28:12' prior: 50651797!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress |
	self importCustomers .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'C' and: [aCustomer identificationNumber ='23-25666777-9']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	firstAddress := Address new.
	firstAddress streetName: 'Alem'.
	firstAddress streetNumber: 1122 .
	firstAddress town: 'CABA'.
	firstAddress zipCode: 1001.
	firstAddress province: 'CABA'.
	
		
	self assert: (customerAddresses includes: firstAddress).

	! !

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:28:15'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:28:16'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:28:17'!
PASSED!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:28:17'!
PASSED!

----SNAPSHOT----(13 November 2023 21:28:39) CuisUniversity-5981.image priorSource: 10207364!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:35'!
importCustomers: inputFIle

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:35' prior: 50651715!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'D' and: [aCustomer identificationNumber ='22333444']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:35' prior: 50651094!
test01Import

	| numberOfCustomers |
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:35' prior: 50651839!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress |
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | aCustomer identificationType = 'C' and: [aCustomer identificationNumber ='23-25666777-9']]
				ofType: Customer.
				
	self assert: customers size equals: 1.
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	firstAddress := Address new.
	firstAddress streetName: 'Alem'.
	firstAddress streetNumber: 1122 .
	firstAddress town: 'CABA'.
	firstAddress zipCode: 1001.
	firstAddress province: 'CABA'.
	
		
	self assert: (customerAddresses includes: firstAddress).

	! !

!methodRemoval: ImportTest #importCustomers stamp: 'cc 11/13/2023 21:32:35'!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].


	inputStream close.
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:35' prior: 50651887!
importCustomers: inputFIle

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: inputFIle forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:32:45' prior: 50651966!
test01Import

	| numberOfCustomers |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:32:47'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:32:47'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:32:48'!
PASSED!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:32:49'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:33:23' prior: 50651924!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: secondAddress) .

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:33:58' prior: 50651975!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
							aCustomer identificationType = 'C' 
							and: [aCustomer identificationNumber ='23-25666777-9']]
							ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	firstAddress := Address new.
	firstAddress streetName: 'Alem'.
	firstAddress streetNumber: 1122 .
	firstAddress town: 'CABA'.
	firstAddress zipCode: 1001.
	firstAddress province: 'CABA'.
	self assert: (customerAddresses includes: firstAddress).

	! !

----SNAPSHOT----(13 November 2023 21:34:12) CuisUniversity-5981.image priorSource: 10247461!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:38:16' prior: 50652144!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
							aCustomer identificationType = 'C' 
							and: [aCustomer identificationNumber ='23-25666777-9']]
							ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	firstAddress := Address new.
	firstAddress streetName: 'Alem'.
	firstAddress streetNumber: 1122 .
	firstAddress town: 'CABA'.
	firstAddress zipCode: 1001.
	firstAddress province: 'CABA'.
	
	self assert: (customerAddresses includes: firstAddress).

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:39:14'!
juanPerezFirstAddress
	
	| firstAddress |
	firstAddress := Address new.
	firstAddress streetName: 'Alem'.
	firstAddress streetNumber: 1122 .
	firstAddress town: 'CABA'.
	firstAddress zipCode: 1001.
	firstAddress province: 'CABA'.
	
	^firstAddress.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:39:33' prior: 50652181!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
							aCustomer identificationType = 'C' 
							and: [aCustomer identificationNumber ='23-25666777-9']]
							ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	
	self assert: (customerAddresses includes: self juanPerezFirstAddress ).

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:39:37' prior: 50652225!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
							aCustomer identificationType = 'C' 
							and: [aCustomer identificationNumber ='23-25666777-9']]
							ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	self assert: (customerAddresses includes: self juanPerezFirstAddress ).

	! !

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:39:39'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:39:39'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:39:40'!
PASSED!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:39:41'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:40:40'!
pepeSanchezFirstAddress

| secondAddress |
secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
	
	^secondAddress.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:41:10'!
pepeSanchezSecondAddress

| secondAddress |
secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
	
	^secondAddress.! !

!methodRemoval: ImportTest #pepeSanchezFirstAddress stamp: 'cc 11/13/2023 21:41:13'!
pepeSanchezFirstAddress

| secondAddress |
secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
	
	^secondAddress.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:41:23' prior: 50652101!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress secondAddress |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	secondAddress := Address new.
	secondAddress streetName: 'Maipu'.
	secondAddress streetNumber: 888 .
	secondAddress town: 'Florida'.
	secondAddress zipCode: 1122 .
	secondAddress province: 'Buenos Aires'.
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: self pepeSanchezSecondAddress ) .

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:41:27' prior: 50652327!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses firstAddress |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
			
			
	self assert: (customerAddresses includes: firstAddress).
	self assert: (customerAddresses includes: self pepeSanchezSecondAddress ) .

	! !

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:41:28'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:41:29'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:41:30'!
PASSED!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:41:31'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:41:44'!
pepeSanchezFirstAddress

	| firstAddress |
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:41:50' prior: 50652419!
pepeSanchezFirstAddress

	| firstAddress |
	firstAddress := Address new.
	firstAddress streetName: 'San Martin'.
	firstAddress streetNumber: 3322 .
	firstAddress town: 'Olivos'.
	firstAddress zipCode: 1636.
	firstAddress province: 'BsAs'.
	
	^firstAddress ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:42:00' prior: 50652370!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
	
	
			
			
	self assert: (customerAddresses includes: self pepeSanchezFirstAddress ).
	self assert: (customerAddresses includes: self pepeSanchezSecondAddress ) .

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'cc 11/13/2023 21:42:06' prior: 50652442!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: 'input.txt' .
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
			
	self assert: (customerAddresses includes: self pepeSanchezFirstAddress ).
	self assert: (customerAddresses includes: self pepeSanchezSecondAddress ) .

	! !
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:44:46' prior: 50652043!
importCustomers: inputFIle

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	"inputStream := UniFileStream new open: inputFIle forWrite: false."
	inputStream := ReadStream on: inputFIle .

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:44:59'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:44:59'!
FAILURE!
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:46:14' prior: 50652080!
test01Import

	| numberOfCustomers |
	
	self importCustomers: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA	'.

	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:46:16'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:46:16'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:46:17'!
FAILURE!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:46:17'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'cc 11/13/2023 21:46:30'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:47:00'!
dataInput

	^ 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA	'! !
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:47:00' prior: 50652546!
test01Import

	| numberOfCustomers |
	
	self importCustomers: self dataInput.

	numberOfCustomers := (session selectAllOfType: Customer) size.
	
	self assert: numberOfCustomers equals: 2.
	
	! !
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:47:10' prior: 50652473!
test02PepeSanchezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: self dataInput.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
						aCustomer identificationType = 'D' 
						and: [aCustomer identificationNumber ='22333444']]
						ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 2.
			
	self assert: (customerAddresses includes: self pepeSanchezFirstAddress ).
	self assert: (customerAddresses includes: self pepeSanchezSecondAddress ) .

	! !
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:47:17' prior: 50652253!
test03JuanPerezAndHisAddressesAddedCorrectly

	| numberOfCustomers customer customers customerAddresses |
	
	self importCustomers: self dataInput.
	
	numberOfCustomers := (session selectAllOfType: Customer) size.
	self assert: numberOfCustomers equals: 2.
	
	customers := session select: [:aCustomer  | 
							aCustomer identificationType = 'C' 
							and: [aCustomer identificationNumber ='23-25666777-9']]
							ofType: Customer.
				
	self assert: customers size equals: 1.
	
	customer := customers anyOne.
	self assert: customer firstName equals: 'Juan'.
	self assert: customer lastName equals: 'Perez'.
	
	customerAddresses := customer addresses.
	self assert:  customerAddresses size equals: 1.
	
	self assert: (customerAddresses includes: self juanPerezFirstAddress ).

	! !

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:47:18'!
FAILURE!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:47:40'!
FAILURE!

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:47:40'!
FAILURE!
!ImportTest methodsFor: 'testing' stamp: 'cc 11/13/2023 21:52:05' prior: 50652573!
dataInput

	^ 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test03JuanPerezAndHisAddressesAddedCorrectly stamp: 'cc 11/13/2023 21:52:10'!
PASSED!

----SNAPSHOT----(13 November 2023 21:52:14) CuisUniversity-5981.image priorSource: 10256840!

----STARTUP---- (15 November 2023 22:34:54) as /home/camila/Desktop/CUIS CUSTOMER IMPORTER/linux64/CuisUniversity-5981.image!


----SNAPSHOT----(15 November 2023 22:35:16) CuisUniversity-5981.image priorSource: 10272635!