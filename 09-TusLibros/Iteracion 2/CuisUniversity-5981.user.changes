

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (30 October 2023 19:03:03) as C:\Users\crist\Desktop\ASF7\CuisUniversity-5981.image!


TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'CJF 10/30/2023 19:05:19'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'CJF 10/30/2023 19:11:40'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'CJF 10/30/2023 19:11:33'!
test01CartStartsEmpty
	|cart|
	cart := Cart new.
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:11:46'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:11:54'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:12:00' prior: 50650347!
isEmpty
	^true! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:12:02'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:12:02'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:16:48'!
test02
	|cart|
	cart := Cart new. 
	cart add: #aValidISBN.
	self deny: cart isEmpty. ! !

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:16:59'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:17:06'!
add: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'CJF 10/30/2023 19:18:55'!
Object subclass: #Cart
	instanceVariableNames: 'shopList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:18:50' prior: 50650368!
add: anISBNBook
	shopList := {anISBNBook }.! !

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:18:58'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:19:21' prior: 50650360!
test02
	|cart|
	cart := Cart new. 
	cart add: #aValidISBN.
	self deny: (cart isEmpty). ! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:19:44' prior: 50650351!
isEmpty
	^shopList isEmpty ! !

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:19:47'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:19:52'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:22:40'!
test03
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN.
	cart add: #aValidISBN2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: {#aValidISBN, #aValidISBN2}.! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:22:43'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:22:54'!
listShopList
	self shouldBeImplemented.! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:23:09' prior: 50650411!
listShopList
	^shopList copy.! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:23:10'!
FAILURE!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:23:41' prior: 50650379!
add: anISBNBook
	shopList add: anISBNBook .! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:23:42'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:24:28' overrides: 16920235!
initialize
	shopList := {}.! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:24:36'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:24:58' prior: 50650428 overrides: 16920235!
initialize
	shopList := OrderedCollection new.! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:01'!
FAILURE!

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:01'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:25:23' prior: 50650400!
test03
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN.
	cart add: #aValidISBN2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:{#aValidISBN, #aValidISBN2}).! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:27'!
FAILURE!

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:27'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:25:41' prior: 50650444!
test03
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN.
	cart add: #aValidISBN2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:43'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:25:43'!
PASSED!

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:25:43'!
PASSED!

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:25:43'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:27:35' prior: 50650459!
test03
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:27:39'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:27:46'!
add: aRenameMe1 quantity: aRenameMe2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:28:41' prior: 50650490!
add: anISBNBook quantity: aQuantity 
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:28:42'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:28:42'!
PASSED!

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:28:42'!
PASSED!

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:28:42'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:29:10' prior: 50650386!
test02
	|cart|
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). ! !

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:29:11'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:29:11'!
PASSED!

!testRun: #CartTest #test02 stamp: 'CJF 10/30/2023 19:29:11'!
PASSED!

!testRun: #CartTest #test03 stamp: 'CJF 10/30/2023 19:29:11'!
PASSED!

!methodRemoval: Cart #add: stamp: 'CJF 10/30/2023 19:29:18'!
add: anISBNBook
	shopList add: anISBNBook .!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:29:50'!
test02AddOneBookToCart
	|cart|
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). ! !

!methodRemoval: CartTest #test02 stamp: 'CJF 10/30/2023 19:29:55'!
test02
	|cart|
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:30:47'!
test03ListBooksInShopList
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !

!methodRemoval: CartTest #test03 stamp: 'CJF 10/30/2023 19:30:58'!
test03
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:33:00'!
test04AddBooksWithQuantity
	| cart |
	cart := Cart new. 
	cart add: #aValidISBN2 quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN2 with: #aValidISBN2).! !

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:33:04'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:40:50'!
test05OnlyAddISBNFromThisEditorial
	| cart |
	cart := Cart withEditorialList: {#aValidISBN}. 
	
	
	self should: [cart add: #anInvalidISBN quantity: 1 .] 
		raise: Error withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidISBNIdentifier.
			self assert: cart isEmpty.].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:41:25' prior: 50650576!
test05OnlyAddISBNFromThisEditorial
	| cart |
	cart := Cart withEditorialList: {#aValidISBN}. 
	
	
	self should: [cart add: #anInvalidISBN quantity: 1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidISBNIdentifier.
			self assert: cart isEmpty.].! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:41:30'!
ERROR!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:41:30'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'CJF 10/30/2023 19:41:41'!
withEditorialList: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithEditorialList: aRenameMe1 ! !
!Cart class methodsFor: 'instance creation' stamp: 'CJF 10/30/2023 19:42:14' prior: 50650608!
withEditorialList: anEditorialList 

	^self new initializeWithEditorialList: anEditorialList ! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:42:16'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'CJF 10/30/2023 19:42:24'!
Object subclass: #Cart
	instanceVariableNames: 'shopList editorialList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:42:24'!
initializeWithEditorialList: anEditorialList 
	self shouldBeImplemented.
	editorialList := anEditorialList.! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:42:39' prior: 50650633!
initializeWithEditorialList: anEditorialList 
	shopList := OrderedCollection new.
	editorialList := anEditorialList.! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:42:40'!
FAILURE!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 19:44:35' prior: 50650495!
add: anISBNBook quantity: aQuantity 
	(editorialList includes: anISBNBook ) ifFalse: [ self error: Cart invalidISBNIdentifier ].
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:44:37'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'CJF 10/30/2023 19:44:45'!
invalidISBNIdentifier
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInvalidISBNIdentifier! !
!Cart class methodsFor: 'instance creation' stamp: 'CJF 10/30/2023 19:45:36' prior: 50650662!
invalidISBNIdentifier
	^'Cannot add book with invalid ISBN identifier'! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:45:38'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:45:42'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:45:47'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:45:47'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:45:47'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:45:47'!
ERROR!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:45:47'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:46:17' prior: 50650530!
test02AddOneBookToCart
	|cart|
	cart := Cart withEditorialList: {#aValidISBN}. 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). ! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:46:18'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:46:18'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:46:18'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:46:18'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:46:18'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:46:35' prior: 50650542!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: {#aValidISBN, #aValidISBN2}.
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:46:36'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:46:36'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:46:36'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:46:36'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:46:36'!
ERROR!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:46:52'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:46:52'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:46:52'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:46:52'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:46:52'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:47:01'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:48:17' prior: 50650719!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: (OrderedCollection with:#aValidISBN with: #aValidISBN2).
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:48:18'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:48:19'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:48:19'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:48:19'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:48:19'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:48:19'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:48:19'!
ERROR!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:48:35'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:48:35'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:48:35'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:48:35'!
ERROR!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:48:35'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:48:35'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 19:49:22' prior: 50650563!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (OrderedCollection with: #aValidISBN2).
	cart add: #aValidISBN2 quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN2 with: #aValidISBN2).! !

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:49:23'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 19:49:26'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 19:49:26'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 19:49:26'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 19:49:26'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 19:49:26'!
PASSED!

!methodRemoval: Cart #initialize stamp: 'CJF 10/30/2023 19:49:47'!
initialize
	shopList := OrderedCollection new.!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:05:57'!
test06QuantityMustBeGreaterThanZero
	| cart |
	cart := Cart withEditorialList: {#aValidISBN}. 
	
	
	self should: [cart add: #aValidISBN quantity: -1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidQuantityValue.
			self assert: cart isEmpty.].! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:06:54' prior: 50650650!
add: anISBNBook quantity: aQuantity 
	(editorialList includes: anISBNBook ) ifFalse: [ self error: Cart invalidISBNIdentifier ].
	( aQuantity <1) ifFalse: [ self error: Cart invalidQuantityValue ].
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:06:56'!
FAILURE!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:07:03'!
FAILURE!
!Cart class methodsFor: 'instance creation' stamp: 'CJF 10/30/2023 20:07:45'!
invalidQuantityValue
	^'Invalid quantity value'! !

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:07:50'!
FAILURE!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:07:50'!
FAILURE!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:08:19' prior: 50650858!
add: anISBNBook quantity: aQuantity 
	(editorialList includes: anISBNBook ) ifFalse: [ ^self error: Cart invalidISBNIdentifier ].
	( aQuantity <1) ifFalse: [ ^self error: Cart invalidQuantityValue ].
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:08:22'!
ERROR!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:08:22'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:08:22'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:08:22'!
ERROR!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:08:22'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:08:22'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:08:54' prior: 50650339!
test01CartStartsEmpty
	|cart|
	cart := Cart withEditorialList: {}.
	self assert: cart isEmpty.! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:08:57'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:08:57'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:08:57'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:08:57'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:08:57'!
ERROR!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:08:57'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:09:19' prior: 50650697!
test02AddOneBookToCart
	|cart|
	cart := Cart withEditorialList: (OrderedCollection with:#aValidISBN). 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). ! !

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:09:24'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:09:24'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:09:24'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:09:24'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:09:24'!
ERROR!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:09:24'!
FAILURE!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:09:46' prior: 50650886!
add: anISBNBook quantity: aQuantity 
	(editorialList includes: anISBNBook ) ifFalse: [ ^self error: Cart invalidISBNIdentifier ].
	( aQuantity <1) ifTrue: [ ^self error: Cart invalidQuantityValue ].
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:09:47'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:09:48'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:09:50'!
PASSED!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:11:47' prior: 50650963!
add: anISBNBook quantity: aQuantity 
	self assertValidateISBN: anISBNBook andQuantity: aQuantity .
	shopList add: anISBNBook  withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:11:54'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:11:54'!
ERROR!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:11:54'!
ERROR!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:11:54'!
ERROR!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:11:54'!
ERROR!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:11:54'!
ERROR!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:11:57'!
ERROR!
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:12:03'!
assertValidateISBN: anISBNBook andQuantity: aQuantity 
	self shouldBeImplemented.! !
!Cart methodsFor: 'category-name' stamp: 'CJF 10/30/2023 20:12:16' prior: 50651038!
assertValidateISBN: anISBNBook andQuantity: aQuantity 
	(editorialList includes: anISBNBook ) ifFalse: [ ^self error: Cart invalidISBNIdentifier ].
	( aQuantity <1) ifTrue: [ ^self error: Cart invalidQuantityValue ].! !

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:12:17'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:12:18'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:12:58'!
editorialListWithTwoValidISBN

	^ OrderedCollection with:#aValidISBN with: #aValidISBN2! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:12:58' prior: 50650763!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: (self editorialListWithTwoValidISBN).
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN2).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:13:17' prior: 50651079!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: self editorialListWithTwoValidISBN.
	cart add: #aValidISBN quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: self editorialListWithTwoValidISBN .! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:13:58' prior: 50650813!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (OrderedCollection with: #aValidISBN).
	cart add: #aValidISBN quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:14:06'!
editorialListWithOneValidISBN

	^ OrderedCollection with: #aValidISBN! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:14:06' prior: 50651104!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (self editorialListWithOneValidISBN).
	cart add: #aValidISBN quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:14:21' prior: 50650937!
test02AddOneBookToCart
	|cart|
	cart := Cart withEditorialList: self editorialListWithOneValidISBN . 
	cart add: #aValidISBN quantity: 1.
	self deny: (cart isEmpty). ! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:14:24'!
PASSED!

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:15:02'!
PASSED!

----SNAPSHOT----(30 October 2023 20:15:11) CuisUniversity-5981.image priorSource: 10197292!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36'!
aValidISBNOne

	^ #aValidISBN! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50650845!
test06QuantityMustBeGreaterThanZero
	| cart |
	cart := Cart withEditorialList: {self aValidISBNOne}. 
	
	
	self should: [cart add: #aValidISBN quantity: -1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidQuantityValue.
			self assert: cart isEmpty.].! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651180!
test06QuantityMustBeGreaterThanZero
	| cart |
	cart := Cart withEditorialList: {self aValidISBNOne}. 
	
	
	self should: [cart add: self aValidISBNOne quantity: -1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidQuantityValue.
			self assert: cart isEmpty.].! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50650589!
test05OnlyAddISBNFromThisEditorial
	| cart |
	cart := Cart withEditorialList: {self aValidISBNOne}. 
	
	
	self should: [cart add: #anInvalidISBN quantity: 1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidISBNIdentifier.
			self assert: cart isEmpty.].! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651120!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (self editorialListWithOneValidISBN).
	cart add: self aValidISBNOne quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:#aValidISBN with: #aValidISBN).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651221!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (self editorialListWithOneValidISBN).
	cart add: self aValidISBNOne quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:self aValidISBNOne with: #aValidISBN).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651233!
test04AddBooksWithQuantity
	| cart |
	cart := Cart withEditorialList: (self editorialListWithOneValidISBN).
	cart add: self aValidISBNOne quantity: 2.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: (OrderedCollection  with:self aValidISBNOne with: self aValidISBNOne).! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651073!
editorialListWithTwoValidISBN

	^ OrderedCollection with:self aValidISBNOne with: #aValidISBN2! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651131!
test02AddOneBookToCart
	|cart|
	cart := Cart withEditorialList: self editorialListWithOneValidISBN . 
	cart add: self aValidISBNOne quantity: 1.
	self deny: (cart isEmpty). ! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651092!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: self editorialListWithTwoValidISBN.
	cart add: self aValidISBNOne quantity: 1.
	cart add: #aValidISBN2 quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: self editorialListWithTwoValidISBN .! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:36' prior: 50651115!
editorialListWithOneValidISBN

	^ OrderedCollection with: self aValidISBNOne! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:55'!
aValidISBNTwo

	^ #aValidISBN2! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:55' prior: 50651257!
editorialListWithTwoValidISBN

	^ OrderedCollection with:self aValidISBNOne with: self aValidISBNTwo! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:15:55' prior: 50651272!
test03ListBooksInShopList
	| cart |
	cart := Cart withEditorialList: self editorialListWithTwoValidISBN.
	cart add: self aValidISBNOne quantity: 1.
	cart add: self aValidISBNTwo quantity: 1.
	
	self deny: cart isEmpty.
	self assert: cart listShopList equals: self editorialListWithTwoValidISBN .! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:15:58'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:16:31'!
anInvalidISBN

	^ #anInvalidISBN! !
!CartTest methodsFor: 'tests' stamp: 'CJF 10/30/2023 20:16:31' prior: 50651207!
test05OnlyAddISBNFromThisEditorial
	| cart |
	cart := Cart withEditorialList: {self aValidISBNOne}. 
	
	
	self should: [cart add: self anInvalidISBN quantity: 1 .] 
		raise: Error - MessageNotUnderstood  withExceptionDo: [  :anError| 
			self assert: anError messageText equals: Cart invalidISBNIdentifier.
			self assert: cart isEmpty.].! !

!testRun: #CartTest #test01CartStartsEmpty stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

!testRun: #CartTest #test02AddOneBookToCart stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

!testRun: #CartTest #test03ListBooksInShopList stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

!testRun: #CartTest #test04AddBooksWithQuantity stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

!testRun: #CartTest #test05OnlyAddISBNFromThisEditorial stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

!testRun: #CartTest #test06QuantityMustBeGreaterThanZero stamp: 'CJF 10/30/2023 20:16:40'!
PASSED!

----SNAPSHOT----(30 October 2023 20:18:55) CuisUniversity-5981.image priorSource: 10224731!

----End fileIn of C:\Users\crist\Documents\GitHub\ISW1_2023-2C\08 - MarsRovers El Regreso\MarsRover-WithHeading.st----!
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651395!
test01MarsRoverNewWithEmptyLog

	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: (OrderedCollection with: $h with:$p).
	
	self assert: (logger printMarsRoverLog ) equals: OrderedCollection new.! !
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651385!
north

	^ MarsRoverHeadingNorth ! !
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651380!
east

	^ MarsRoverHeadingEast ! !
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651408!
test02MarsRoverMovesForwardAndRotatesEast

	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: (OrderedCollection with: $h with:$p).
	marsRover process: 'fr'.
	
	self assert: (logger printMarsRoverLog ) equals: (OrderedCollection with: 1@2 with: 'East').! !
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651390!
south

	^ MarsRoverHeadingSouth ! !
!LoggerLogHeadingPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651422!
west

	^ MarsRoverHeadingWest ! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651494!
test05MarsRoverRotatesSouthLogsSouth
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'rf'.
	
	self assert: (logger printMarsRoverLog ) equals: (OrderedCollection with: 'East').
	self assert: (marsRover isAt: 2@1 heading: self east).! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651439!
test01NewMarsRoverWithEmptyLog
	| marsRover logger resLogger |
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: {$h} .
	
	resLogger := logger printMarsRoverLog.
	
	self assert: (logger printMarsRoverLog ) equals: OrderedCollection new.! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651512!
north

	^ MarsRoverHeadingNorth ! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651452!
test02MarsRoverRotatesLeftLogsWest
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'l'.
	
	self assert: (logger printMarsRoverLog ) equals: (OrderedCollection with: 'West').
	self assert: (marsRover isAt: 1@1 heading: self west).! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651466!
test03MarsRoverRotatesRightLogsEast
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'r'.
	
	self assert: (logger printMarsRoverLog ) equals: (OrderedCollection with: 'East').
	self assert: (marsRover isAt: 1@1 heading: self east).! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651508!
east

	^ MarsRoverHeadingEast ! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651480!
test04MarsRoverRotatesNorthLogsNorth
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self east. 
	logger :=MarsRoverLogLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'l'.
	
	self assert: (logger printMarsRoverLog ) equals: (OrderedCollection with: 'North').
	self assert: (marsRover isAt: 1@1 heading: self north).! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651516!
south

	^ MarsRoverHeadingSouth ! !
!LoggerLogHeadingTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651520!
west

	^ MarsRoverHeadingWest ! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651548!
test02MarsRoverMovesToNorthLogsNewPosition
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'f'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection with: 1@2).
	self assert: (marsRover isAt: 1@2 heading: self north) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651633!
test08MarsRoverMovesForwardHeadingWestIsLogged
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'lf'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection with: 0@1 ).
	self assert: (marsRover isAt: 0@1 heading: self west) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651590!
test05MarsRoverRotatesLeftIsntLogged
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'l'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection new).
	self assert: (marsRover isAt: 1@1 heading: self west) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651537!
test01NewMarsRoverWithEmptyLog
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverLogLogger with: marsRover follow: {$p} .
	
	self assert: (logger printMarsRoverLog ) equals: OrderedCollection new.! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651576!
test04MarsRoverMovesBackward
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'b'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection with: 1@0).
	self assert: (marsRover isAt: 1@0 heading: self north) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651562!
test03MarsRoverMovesToNorthTwice
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'ff'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection with: 1@2 with: 1@3 ).
	self assert: (marsRover isAt: 1@3 heading: self north) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651652!
north

	^ MarsRoverHeadingNorth ! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651604!
test06MarsRoverRotatesRightIsntLogged
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'r'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection new).
	self assert: (marsRover isAt: 1@1 heading: self east) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651618!
test07MarsRoverMovesForwardHeadingEastIsLogged
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverLogLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'rf'.
	
	self assert: (logger printMarsRoverLog) equals: (OrderedCollection with: 2@1 ).
	self assert: (marsRover isAt: 2@1 heading: self east) 
	! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651648!
east

	^ MarsRoverHeadingEast ! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651656!
south

	^ MarsRoverHeadingSouth ! !
!LoggerLogPositionTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651660!
west

	^ MarsRoverHeadingWest ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651701!
test03MarsRoverMovesForwardTwiceUpdatesCorrectly
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverWindowLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'ff'.
	
	self assert: (logger printPositionWindow ) equals: (1@3).
	self assert: (marsRover isAt: 1@3 heading: self north) ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651688!
test02MarsRoverMovesForwardOnce
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverWindowLogger with: marsRover  follow: {$p}.
	
	marsRover process: 'f'.
	
	self assert: (logger printPositionWindow ) equals: (1@2).
	self assert: (marsRover isAt: 1@2 heading: self north) ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651764!
north

	^ MarsRoverHeadingNorth ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651729!
test05MarsRoverRotatesRightOnce
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverWindowLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'r'.
	
	self assert: (logger printHeadingWindow ) equals: 'Apuntando al East'.
	self assert: (marsRover isAt: 1@1 heading: self east) ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651743!
test06MarsRoverForwardRotateRightForwardWithBothWindows
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverWindowLogger with: marsRover  follow: (OrderedCollection with: $h with: $p).
	
	marsRover process: 'frf'.
	
	self assert: (logger printHeadingWindow ) equals: 'Apuntando al East'.
	self assert: (logger printPositionWindow ) equals: 2@2.
	self assert: (marsRover isAt: 2@2 heading: self east) ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651715!
test04MarsRoverRotatesLeftOnce
	| marsRover logger|
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	logger := MarsRoverWindowLogger with: marsRover  follow: {$h}.
	
	marsRover process: 'l'.
	
	self assert: (logger printHeadingWindow ) equals: 'Apuntando al West'.
	self assert: (marsRover isAt: 1@1 heading: self west) ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651760!
east

	^ MarsRoverHeadingEast ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651768!
south

	^ MarsRoverHeadingSouth ! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651677!
test01NewMarsRoverWithEmptyWindowLog
	| marsRover logger |
	
	marsRover := MarsRover at: 1@1 heading: self north. 
	logger :=MarsRoverWindowLogger with: marsRover  follow: {$p} .
	
	self assert: (logger printPositionWindow ) equals: ''.! !
!LoggerWindowTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651772!
west

	^ MarsRoverHeadingWest ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652071!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652010!
isAt: aPosition heading: aHeadingType

	^(position isValue: aPosition) and: [ (head  objectValue) isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652017!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651989!
headSouth
	head updateAndLog: [:aHeading | MarsRoverHeadingSouth for: self].
	"head := MarsRoverHeadingSouth for: self"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652021!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651996!
headWest
	head updateAndLog: [  :aHead | MarsRoverHeadingWest for: self].
	"head := MarsRoverHeadingWest for: self" ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652025!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652029!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652065!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652037!
moveEast

	position updateAndLog:[:aPosition|  aPosition + (1@0)].
	"position := position + (1@0)"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652085!
addLogger: aLogger follow: collectionOfAttributes

	collectionOfAttributes do: 
		[:anAttributeToFollow | 
			anAttributeToFollow = $p ifTrue: [position addLogger: aLogger].
			anAttributeToFollow = $h ifTrue: [head addLogger: aLogger ].]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651963!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652047!
moveNorth
	position updateAndLog: [ :aPosition| aPosition + (0@1)].
	"position := position + (0@1)"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652006!
rotateRight
	
	(head objectValue) rotateRight! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652059!
moveWest
	position updateAndLog:[:aPosition|  aPosition + (-1@0)].
	"position := position + (-1@0)"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652033!
moveBackward
	
	(head objectValue) moveBackward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652043!
moveForward
	
	(head objectValue) moveForward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651968!
initializeAt: aPosition heading: aHeadingType

	position := ValueUpdater with: aPosition.
	head := ValueUpdater with: (aHeadingType for: self) .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652002!
rotateLeft
	
	(head objectValue) rotateLeft! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652102!
rotateAndLog: aBlock 
	aBlock value.
	logger ifNotNil: [logger logHeading: head]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652053!
moveSouth
	position updateAndLog:[:aPosition|  aPosition + (0@-1)].
	"position := position + (0@-1)"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651959!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652096!
moveAndLogPositionMovement: aBlock
	aBlock value.
	logger ifNotNil: [logger logPosition: position]. 
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651982!
headNorth
	head updateAndLog: [:aHeading | MarsRoverHeadingNorth for: self].
	"head := MarsRoverHeadingNorth for: self" ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651975!
headEast
	
	head updateAndLog: [:aHeading | MarsRoverHeadingEast for: self].
	"head := MarsRoverHeadingEast for: self"
	! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652116!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652135!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652144 overrides: 16902254!
value

	self subclassResponsibility! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652161!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652148!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652139!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652153!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652157!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652175!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652204 overrides: 50653075!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652214 overrides: 50653081!
value
	^'East'.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652209 overrides: 50653097!
rotateRight
	
	^marsRover headSouth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652194 overrides: 50653102!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652199 overrides: 50653107!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652242 overrides: 50653075!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652252 overrides: 50653081!
value
	^ 'North'.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652247 overrides: 50653097!
rotateRight
	
	^marsRover headEast! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652232 overrides: 50653102!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652237 overrides: 50653107!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652280 overrides: 50653075!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652290 overrides: 50653081!
value
	^ 'South'.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652285 overrides: 50653097!
rotateRight
	
	^marsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652270 overrides: 50653102!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652275 overrides: 50653107!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652318 overrides: 50653075!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652328 overrides: 50653081!
value
	^'West'.! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652323 overrides: 50653097!
rotateRight
	
	^marsRover headNorth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652308 overrides: 50653102!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652313 overrides: 50653107!
moveForward
	
	^marsRover moveWest! !
!MarsRoverLogLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652384!
printMarsRoverLog

	^log.! !
!MarsRoverLogLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652370 overrides: 50652345!
initializeWith: aMarsRover follow: attributesToFollow 
	marsRover := aMarsRover .
	log := OrderedCollection new.
	aMarsRover addLogger: self follow: attributesToFollow .
	! !
!MarsRoverLogLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652379 overrides: 50652351!
log: anObjectValue 
	log add: (anObjectValue value)
	! !
!MarsRoverLogLogger class methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652397!
with: aMarsRover follow: attributesToFollow 
	^self new initializeWith: aMarsRover follow: attributesToFollow ! !
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652345!
initializeWith: aMarsRover follow: attributesToFollow

	self subclassResponsibility! !
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50652351!
log: anObjectValue

	self subclassResponsibility! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651788!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:27' prior: 50651844!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651796!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651812!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651883!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651891!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651859!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651899!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651836!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651828!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651921!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651908!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651933!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651804!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651875!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651917!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651925!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651867!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651820!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50651929!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverWindowLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652443!
printPositionWindow
	^positionWindow .! !
!MarsRoverWindowLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652439!
printHeadingWindow
	^headingWindow .! !
!MarsRoverWindowLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652420 overrides: 50653261!
initializeWith: aMarsRover follow: attributesToFollow 
	marsRover := aMarsRover.
	headingWindow := ''.
	positionWindow := ''.
	aMarsRover addLogger: self follow: attributesToFollow .! !
!MarsRoverWindowLogger methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652430 overrides: 50653267!
log: anObjectValue 
	
	"feo estos ifs"
	(anObjectValue isKindOf: Point)
		 ifTrue: [positionWindow := anObjectValue value]
		 ifFalse: [headingWindow := 'Apuntando al ', anObjectValue value.]! !
!MarsRoverWindowLogger class methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652457!
with: aMarsRover follow: attributesToFollow 
	^self new initializeWith: aMarsRover follow: attributesToFollow ! !
!ValueUpdater methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652495!
updateAndLog: aBlock 
	objectValue := aBlock value: objectValue.
	loggers do: [:aLogger | aLogger log: objectValue].! !
!ValueUpdater methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652483!
isValue: aPosition 
	^aPosition = objectValue! !
!ValueUpdater methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652487!
objectValue
	^objectValue! !
!ValueUpdater methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652477!
initializeWith: aPosition 
	
	objectValue := aPosition.
	loggers := OrderedCollection new.! !
!ValueUpdater methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652491!
addLogger: aLogger 
	loggers add: aLogger.! !
!ValueUpdater class methodsFor: 'as yet unclassified' stamp: 'CJF 10/30/2023 20:46:28' prior: 50652510!
with: aPosition 
	^self new initializeWith: aPosition ! !

----QUIT----(30 October 2023 21:18:37) CuisUniversity-5981.image priorSource: 10230782!

----STARTUP---- (2 November 2023 14:19:48) as C:\Users\crist\Desktop\ASF7\CuisUniversity-5981.image!


!classRemoval: #ValueUpdater stamp: 'CJF 11/2/2023 14:20:03'!
Object subclass: #ValueUpdater
	instanceVariableNames: 'objectValue loggers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowLogger stamp: 'CJF 11/2/2023 14:20:03'!
MarsRoverLogger subclass: #MarsRoverWindowLogger
	instanceVariableNames: 'headingWindow positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogLogger stamp: 'CJF 11/2/2023 14:20:03'!
MarsRoverLogger subclass: #MarsRoverLogLogger
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogger stamp: 'CJF 11/2/2023 14:20:03'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'CJF 11/2/2023 14:20:03'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'CJF 11/2/2023 14:20:03'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'CJF 11/2/2023 14:20:04'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'CJF 11/2/2023 14:20:04'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'CJF 11/2/2023 14:20:04'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'CJF 11/2/2023 14:20:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'CJF 11/2/2023 14:20:04'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerWindowTest stamp: 'CJF 11/2/2023 14:20:05'!
TestCase subclass: #LoggerWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogPositionTest stamp: 'CJF 11/2/2023 14:20:05'!
TestCase subclass: #LoggerLogPositionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogHeadingTest stamp: 'CJF 11/2/2023 14:20:05'!
TestCase subclass: #LoggerLogHeadingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogHeadingPositionTest stamp: 'CJF 11/2/2023 14:20:05'!
TestCase subclass: #LoggerLogHeadingPositionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of C:\Users\crist\Documents\GitHub\ISW1_2023-1c\09-TusLibros\Iteracion2\TusLibros.st----!

!methodRemoval: CartTest #test01CartStartsEmpty stamp: 'CJF 11/2/2023 14:21:28'!
test01CartStartsEmpty
	|cart|
	cart := Cart withEditorialList: {}.
	self assert: cart isEmpty.!

----STARTUP---- (2 November 2023 14:21:49) as C:\Users\crist\Desktop\ASF7\CuisUniversity-5981.image!


!classRemoval: #ValueUpdater stamp: 'CJF 11/2/2023 14:21:57'!
Object subclass: #ValueUpdater
	instanceVariableNames: 'objectValue loggers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowLogger stamp: 'CJF 11/2/2023 14:21:57'!
MarsRoverLogger subclass: #MarsRoverWindowLogger
	instanceVariableNames: 'headingWindow positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogLogger stamp: 'CJF 11/2/2023 14:21:57'!
MarsRoverLogger subclass: #MarsRoverLogLogger
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogger stamp: 'CJF 11/2/2023 14:21:58'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'CJF 11/2/2023 14:21:58'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'CJF 11/2/2023 14:21:58'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'CJF 11/2/2023 14:21:58'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'CJF 11/2/2023 14:21:58'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'CJF 11/2/2023 14:21:58'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'CJF 11/2/2023 14:21:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'CJF 11/2/2023 14:21:59'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerWindowTest stamp: 'CJF 11/2/2023 14:21:59'!
TestCase subclass: #LoggerWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogPositionTest stamp: 'CJF 11/2/2023 14:21:59'!
TestCase subclass: #LoggerLogPositionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogHeadingTest stamp: 'CJF 11/2/2023 14:21:59'!
TestCase subclass: #LoggerLogHeadingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LoggerLogHeadingPositionTest stamp: 'CJF 11/2/2023 14:22:00'!
TestCase subclass: #LoggerLogHeadingPositionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----STARTUP---- (2 November 2023 14:22:08) as C:\Users\crist\Desktop\ASF7\CuisUniversity-5981.image!


----SNAPSHOT----(2 November 2023 14:22:13) CuisUniversity-5981.image priorSource: 10299737!

----SNAPSHOT----(2 November 2023 18:26:13) CuisUniversity-5981.image priorSource: 10323000!

!classRemoval: #Cart stamp: 'CJF 11/2/2023 18:26:31'!
Object subclass: #Cart
	instanceVariableNames: 'shopList editorialList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CJF 11/2/2023 18:26:31'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\crist\Desktop\TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'CJF 11/2/2023 18:28:17'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'CJF 11/2/2023 18:29:31'!
test01EmptyCartCannotCheckOut
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:30:38'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:30:49'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:30:59'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:31:09'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/2/2023 18:34:33'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:34:48' prior: 50654454!
test01EmptyCartCannotCheckOut
	|cart cashier |
	cart := self createCart.
	
	self should: [cashier := Cashier with: cart.] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: anError messageText equals: Cashier emptyCartErrorMessage ]! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:34:56'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:35:02'!
with: cart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: cart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:35:56' prior: 50654497!
with: cart 
	(cart isEmpty) ifTrue: [ Cashier emptyCartErrorMessage ].
	^self new initializeWith: cart ! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:36:00'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:36:18' prior: 50654505!
with: cart 
	(cart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	^self new initializeWith: cart ! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:36:28'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:36:37'!
emptyCartErrorMessage
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEmptyCartErrorMessage! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:36:59' prior: 50654525!
emptyCartErrorMessage
	^'Cart musto contain elements'! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:37:10' prior: 50654534!
emptyCartErrorMessage
	^'Cart cannot be empty'! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:37:11'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:37:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:43:22'!
test02CashierCheckOutValidCartWithSingleItem
	|cart cashier catalog|
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	catalog := Dictionary new. 
	catalog add: self itemSellByTheStore -> 5.
		
	cashier := 	Cashier with: cart andPrice: catalog. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:43:34' prior: 50654550!
test02CashierCheckOutValidCartWithSingleItem
	|cart cashier catalogPrice|
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	catalogPrice := Dictionary new. 
	catalogPrice add: self itemSellByTheStore -> 5.
		
	cashier := 	Cashier with: cart andPrice: catalogPrice. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:51:43' prior: 50654562!
test02CashierCheckOutValidCartWithSingleItem
	|cart cashier catalogPrice|
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	catalogPrice := Dictionary new. 
	catalogPrice add: self itemSellByTheStore -> 5.
		
	cashier := 	Cashier with: cart andPrice: catalogPrice. 
	
	self assert: cashier calculateOrderAmount equals: 5.  ! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:51:48'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:51:56'!
with: cart andPrice: catalogPrice 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: cart andPrice: catalogPrice ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 18:52:34' prior: 50654591!
with: cart andPrice: catalogPrice 
	(cart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	^self new initializeWith: cart andPrice: catalogPrice ! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:52:41'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/2/2023 18:52:49'!
Object subclass: #Cashier
	instanceVariableNames: 'cart_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/2/2023 18:52:49'!
Object subclass: #Cashier
	instanceVariableNames: 'cart_CHANGE_ME catalogPrice_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CJF 11/2/2023 18:52:49'!
initializeWith: cart andPrice: catalogPrice 
	self shouldBeImplemented.
	cart_CHANGE_ME := cart.
	catalogPrice_CHANGE_ME := catalogPrice.! !
!Cashier methodsFor: 'initialization' stamp: 'CJF 11/2/2023 18:52:57' prior: 50654626!
initializeWith: cart andPrice: catalogPrice 
	cart_CHANGE_ME := cart.
	catalogPrice_CHANGE_ME := catalogPrice.! !
!Cashier methodsFor: 'initialization' stamp: 'CJF 11/2/2023 18:53:15' prior: 50654634!
initializeWith: aCart andPrice: aCatalogPrice 
	cart_CHANGE_ME := aCart.
	catalogPrice_CHANGE_ME := aCatalogPrice.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/2/2023 18:53:21'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogPrice_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:53:21' prior: 50654641!
initializeWith: aCart andPrice: aCatalogPrice 
	cart := aCart.
	catalogPrice_CHANGE_ME := aCatalogPrice.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/2/2023 18:53:27'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:53:27' prior: 50654655!
initializeWith: aCart andPrice: aCatalogPrice 
	cart := aCart.
	catalogPrice := aCatalogPrice.! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:53:30'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 18:53:41'!
calculateOrderAmount
	self shouldBeImplemented.! !
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 18:57:02' prior: 50654678!
calculateOrderAmount
	
	^catalogPrice at: 'validBook'.! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:57:05'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:57:05'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:57:05'!
PASSED!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 18:58:37' prior: 50654683!
calculateOrderAmount
	
	^(catalogPrice at: 'validBook') * cart occurrencesOf: 'validBook'.! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:58:39'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:58:39'!
ERROR!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:58:39'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 18:58:54' prior: 50654698!
calculateOrderAmount
	
	^(catalogPrice at: 'validBook') * (cart occurrencesOf: 'validBook').! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 18:58:57'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 18:58:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 18:59:24'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:01:21'!
anotherCatalog
	
	^ Array with: self itemSellByTheStore with: self anotherItemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:02:31' prior: 50654574!
test02CashierCheckOutValidCartWithSingleItem
	|cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
		
	cashier := 	Cashier with: cart andPrice: self aCatalogPrice. 
	
	self assert: cashier calculateOrderAmount equals: 5.  ! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:02:35'!
ERROR!
!CashierTest methodsFor: 'catalogPrice' stamp: 'CJF 11/2/2023 19:02:46'!
aCatalogPrice
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'catalogPrice' stamp: 'CJF 11/2/2023 19:03:20' prior: 50654751!
aCatalogPrice
	^Dictionary with: self itemSellByTheStore -> 5 with: self anotherItemSellByTheStore -> 3.! !

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:03:21'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:03:21'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:03:21'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:07:10'!
test03CashierCheckoutValidCartWithMultiplesItem
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .
	
	self assert: cashier calculateOrderAmount equals: 11.
	! !

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:07:12'!
FAILURE!

a := OrderedCollection with: 3.
a occurrencesOf: 3.!

a := OrderedCollection with: 3.
a occurrencesOf: 2.!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:10:20' prior: 50654714!
calculateOrderAmount
	|total|
	total:=0.
	catalogPrice keysDo: [ :anItem | total := total +  (catalogPrice at: anItem ) * (cart occurrencesOf: anItem ) ].
	^total.! !

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:10:22'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:10:22'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:10:22'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:10:22'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:10:28'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:10:35'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:10:35'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:10:35'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:18:32' prior: 50654772!
test03CashierCheckoutValidCartWithMultiplesItem
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .
	
	self assert: cashier calculateOrderAmount equals: 11.
	self should: [
	cashier checkOutFor: self anInvalidCostumerName with: self aValidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidCostumerName.
		 ]! !

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:18:53'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:19:08'!
anInvalidCostumerName
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:19:13' prior: 50654856!
anInvalidCostumerName
	^''! !

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:19:14'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:19:21'!
aValidNumberOfCreditCard
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:19:47' prior: 50654868!
aValidNumberOfCreditCard
	^'1234567891234567'! !

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:19:48'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:19:59'!
aValidExpirationDate
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:21:23' prior: 50654881!
aValidExpirationDate
	^Date today month + 1 / Date today year + 1. ! !

Date today!

Date today month !

Date today month + 1!

Date today month next !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:22:59' prior: 50654886!
aValidExpirationDate
	^Date today month next! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:07:10' prior: 50654829!
test03CashierCheckoutValidCartWithMultiplesItem
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .
	
	self assert: cashier calculateOrderAmount equals: 11.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:24:24'!
test04
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self anInvalidCostumerName with: self aValidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidCostumerName.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:24:29'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:24:39'!
checkOutFor: aRenameMe1 with: aRenameMe2 withExpirtacionDate: aRenameMe3 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:26:08' prior: 50654937!
checkOutFor: aCostumerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 
	aCostumerName ifEmpty: [ ^self error: Cashier invalidCostumerName ]! !

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:26:11'!
ERROR!
!Cashier class methodsFor: 'errorsMessages' stamp: 'CJF 11/2/2023 19:26:25'!
invalidCostumerName
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errorsMessages' stamp: 'CJF 11/2/2023 19:26:45' prior: 50654953!
invalidCostumerName
	^'Invalid costumer name error'! !

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:26:46'!
PASSED!

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:26:46'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:26:46'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:26:46'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:26:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:27:23'!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCostumerName with: self anInvalidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidCostumerName.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:27:31'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:27:40'!
aValidCostumerName
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:27:52' prior: 50655001!
aValidCostumerName
	^'Hola Mundo'! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:27:53'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:28:07'!
anInvalidNumberOfCreditCard
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:28:45' prior: 50655012!
anInvalidNumberOfCreditCard
	^'12345 A23615812'! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:28:47'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:29:15' prior: 50654977!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCostumerName with: self anInvalidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:29:20'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:29:25'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:30:04'!
FAILURE!
!Cashier class methodsFor: 'errorsMessages' stamp: 'CJF 11/2/2023 19:30:35'!
invalidNumberCreditCard
	^'Invalid number of credit card'! !

$2 isDigit !
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:36:11' prior: 50654943!
checkOutFor: aCostumerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 
	aCostumerName ifEmpty: [ ^self error: Cashier invalidCostumerName ].
	
	(aCreditCardNumber size < 16)  ifTrue: [ ^self error: Cashier invalidNumberCreditCard ].
	(self aNumerContainsOnlyDigit: aCreditCardNumber ) ifFalse: [ ^self error: Cashier invalidNumberCreditCard ].! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:36:13'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:36:13'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:36:13'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:36:13'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:36:14'!
PASSED!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:39:11' prior: 50655059!
checkOutFor: aCostumerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 
	aCostumerName ifEmpty: [ ^self error: Cashier invalidCostumerName ].
	
	(aCreditCardNumber size < 16)  ifTrue: [ ^self error: Cashier invalidNumberCreditCard ].
	! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:39:23'!
PASSED!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:39:40' prior: 50655017!
anInvalidNumberOfCreditCard
	^'1234'! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:42:43'!
anInvalidShortCreditCardNumber
	^'1234'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:42:43' prior: 50655024!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCostumerName with: self anInvalidShortCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!methodRemoval: CashierTest #anInvalidNumberOfCreditCard stamp: 'CJF 11/2/2023 19:42:43'!
anInvalidNumberOfCreditCard
	^'1234'!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:43:37'!
aValidCustumerName
	^'Hola Mundo'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:43:37' prior: 50655111!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidShortCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!methodRemoval: CashierTest #aValidCostumerName stamp: 'CJF 11/2/2023 19:43:37'!
aValidCostumerName
	^'Hola Mundo'!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:44:00'!
anInvalidCustomerName
	^''! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:44:00' prior: 50654913!
test04
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self anInvalidCustomerName with: self aValidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidCostumerName.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!methodRemoval: CashierTest #anInvalidCostumerName stamp: 'CJF 11/2/2023 19:44:00'!
anInvalidCostumerName
	^''!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:44:39' prior: 50655088!
checkOutFor: aCustomerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 
	aCustomerName ifEmpty: [ ^self error: Cashier invalidCostumerName ].
	
	(aCreditCardNumber size < 16)  ifTrue: [ ^self error: Cashier invalidNumberCreditCard ].
	! !

!testRun: #CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 19:45:04'!
PASSED!

!testRun: #CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/2/2023 19:45:04'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/2/2023 19:45:04'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'CJF 11/2/2023 19:45:04'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:45:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:45:52' prior: 50655142!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidWithLetterCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:45:54'!
ERROR!
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:46:00'!
anInvalidWithLetterCreditCardNumber
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'creditCardData' stamp: 'CJF 11/2/2023 19:46:22' prior: 50655249!
anInvalidWithLetterCreditCardNumber
	^'123 563487a36985'! !

!testRun: #CashierTest #test05 stamp: 'CJF 11/2/2023 19:46:24'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:50:50' prior: 50655198!
checkOutFor: aCustomerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 

	aCustomerName ifEmpty: [ ^self error: Cashier invalidCostumerName ].
	
	(aCreditCardNumber size < 16)  ifTrue: [ ^self error: Cashier invalidNumberCreditCard ].
	
	aCreditCardNumber do: [ :aChar |  (aChar isLetter or: aChar isSeparator ) ifTrue: [ Cashier invalidNumberCreditCard ] ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:43:37' prior: 50655224!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidShortCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 19:51:20'!
test06
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidWithLetterCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]! !

!testRun: #CashierTest #test06 stamp: 'CJF 11/2/2023 19:51:22'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'CJF 11/2/2023 19:52:39' prior: 50655261!
checkOutFor: aCustomerName with: aCreditCardNumber withExpirtacionDate: anExpirationDate 

	aCustomerName ifEmpty: [ ^self error: Cashier invalidCostumerName ].
	
	(aCreditCardNumber size < 16)  ifTrue: [ ^self error: Cashier invalidNumberCreditCard ].
	
	aCreditCardNumber do: [ :aChar |  (aChar isLetter or: aChar isSeparator ) ifTrue: [ ^self error: Cashier invalidNumberCreditCard ] ].! !

!testRun: #CashierTest #test06 stamp: 'CJF 11/2/2023 19:53:00'!
PASSED!

!classRenamed: #CartTest as: #EditorialStoreTest stamp: 'CJF 11/2/2023 21:28:45'!
Smalltalk renameClassNamed: #CartTest as: #EditorialStoreTest!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/2/2023 21:29:54' prior: 50654353!
defaultCatalog

	^Dictionary with: self itemSellByTheStore -> 5 with: self anotherItemSellByTheStore -> 3.! !
!EditorialStoreTest methodsFor: 'nil' stamp: 'CJF 11/2/2023 21:30:19'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/2/2023 21:30:40'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/2/2023 21:30:40'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/2/2023 21:30:40'!
ERROR!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/2/2023 21:30:40'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/2/2023 21:30:40'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/2/2023 21:30:40'!
ERROR!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/2/2023 21:30:40'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/2/2023 21:30:40'!
ERROR!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/2/2023 21:31:33'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'CJF 11/2/2023 21:32:37' prior: 50654387!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/2/2023 21:32:41'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:33:45'!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:34:22' prior: 50655421!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	self assert: cart calculateOrderAmount equals: 10! !

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:34:32'!
ERROR!
!Cart methodsFor: 'xxxxx' stamp: 'CJF 11/2/2023 21:35:10'!
calculateOrderAmount
	self shouldBeImplemented.! !
!Cart methodsFor: 'xxxxx' stamp: 'CJF 11/2/2023 21:38:20' prior: 50655441!
calculateOrderAmount
	|total|
	total := 0.
	catalog keysDo: [ :anItem | total := total +  (catalog at: anItem ) * (items occurrencesOf: anItem )  ].
	^total.! !

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:38:22'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:39:04' prior: 50655430!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	cart add: self anotherItemSellByTheStore withOccurrences: 1.
	self assert: cart calculateOrderAmount equals: 13! !

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:39:13'!
ERROR!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:39:25' prior: 50655488!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	cart add: self anotherItemSellByTheStore withOcurrences: 1.
	self assert: cart calculateOrderAmount equals: 13! !

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:39:27'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:39:35' prior: 50655502!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	cart add: self anotherItemSellByTheStore withOcurrences: 1.
	self assert: cart calculateOrderAmount equals: 16! !
!Cart methodsFor: 'xxxxx' stamp: 'CJF 11/2/2023 21:41:17' prior: 50655445!
calculateOrderAmount
	|total|
	total := 0.
	catalog keysDo: [ :anItem | total := total +  ((catalog at: anItem ) * (items occurrencesOf: anItem ))  ].
	^total.! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:41:38' prior: 50655516!
test09CartCalculatesTotalCartAmount

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	cart add: self anotherItemSellByTheStore withOcurrences: 1.
	self assert: cart calculateOrderAmount equals: 13! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:42:17'!
test10EmptyCartCannotCheckOut
	|cart cashier |
	cart := self createCart.
	
	self should: [cashier := Cashier with: cart.] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: anError messageText equals: Cashier emptyCartErrorMessage ]! !

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/2/2023 21:42:27'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CJF 11/2/2023 21:47:50'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:47:44'!
test11
	|cc|
	self should: [
	cc := CreditCard for: self anInvalidCustomerName withNumberCC: self aValidNumberOfCreditCard withExpirationDate: self aValidExpirationDate.]
	raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:48:20' prior: 50655601!
test11
	
	self should: [
	CreditCard for: self anInvalidCustomerName withNumberCC: self aValidNumberOfCreditCard withExpirationDate: self aValidExpirationDate.]
	raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:48:21'!
ERROR!
!EditorialStoreTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 21:48:34'!
anInvalidCustomerName
	self shouldBeImplemented.! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:48:54'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/2/2023 21:49:07'!
invalidCustomerName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/2/2023 21:49:17' prior: 50655636!
invalidCustomerName
	^'Invalid customer name'! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:49:18'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/2/2023 21:49:39' prior: 50655614!
test11
	CreditCard for: self anInvalidCustomerName withNumberCC: self aValidNumberOfCreditCard withExpirationDate: self aValidExpirationDate.
	self should: [
	CreditCard for: self anInvalidCustomerName withNumberCC: self aValidNumberOfCreditCard withExpirationDate: self aValidExpirationDate.]
	raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:49:40'!
ERROR!

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:50:33'!
ERROR!
!EditorialStoreTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/2/2023 21:50:39' prior: 50655629!
anInvalidCustomerName
	^''! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:50:41'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/2/2023 21:50:56'!
aValidNumberOfCreditCard
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/2/2023 21:51:07' prior: 50655676!
aValidNumberOfCreditCard
	^'1234567891234567'! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:51:09'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/2/2023 21:51:15'!
aValidExpirationDate
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/2/2023 21:51:31' prior: 50655688!
aValidExpirationDate
	^Date today month next.! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:51:32'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 21:51:38'!
for: aRenameMe1 withNumberCC: aRenameMe2 withExpirationDate: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aRenameMe1 withNumberCC: aRenameMe2 withExpirationDate: aRenameMe3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/2/2023 21:52:10' prior: 50655700!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:52:11'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CJF 11/2/2023 21:52:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'customerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CJF 11/2/2023 21:52:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'customerName creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CJF 11/2/2023 21:52:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'customerName creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CJF 11/2/2023 21:52:19'!
initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	self shouldBeImplemented.
	customerName := aCustomerName.
	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'CJF 11/2/2023 21:52:25' prior: 50655746!
initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	
	customerName := aCustomerName.
	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/2/2023 21:52:38'!
FAILURE!

----SNAPSHOT----(2 November 2023 21:52:45) CuisUniversity-5981.image priorSource: 10323093!

----QUIT----(2 November 2023 21:52:49) CuisUniversity-5981.image priorSource: 10371781!

----STARTUP---- (3 November 2023 01:04:43) as C:\Users\crist\Desktop\ASF7\CuisUniversity-5981.image!


!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/3/2023 01:09:42'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:16:23' prior: 50655648!
test11
	
	self should: [
	CreditCard for: self anInvalidCustomerName withNumberCC: self aValidNumberOfCreditCard withExpirationDate: self aValidExpirationDate.]
	raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:21:18' prior: 50655781!
test11
	
	self should: [ CreditCard for: self anInvalidCustomerName 
						withNumberCC: self aValidNumberOfCreditCard 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!testRun: #EditorialStoreTest #test11 stamp: 'CJF 11/3/2023 01:21:18'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:23:29'!
test11CustomerNameShouldNotBeEmpty
	
	self should: [ CreditCard for: self anInvalidCustomerName 
						withNumberCC: self aValidNumberOfCreditCard 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!methodRemoval: EditorialStoreTest #test11 stamp: 'CJF 11/3/2023 01:23:52'!
test11
	
	self should: [ CreditCard for: self anInvalidCustomerName 
						withNumberCC: self aValidNumberOfCreditCard 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 01:28:14' prior: 50655712!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	(aCustomerName = '') ifTrue: [ ^self error: CreditCard invalidCustomerName ].
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 01:28:15'!
PASSED!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 01:28:19'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:32:17'!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
						withNumberCC: self aValidNumberOfCreditCard 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:33:15' prior: 50655890!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidShortCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 01:33:18'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 01:33:28'!
validCustomerName
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 01:33:42' prior: 50655921!
validCustomerName
	^'Hola Mundo'! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 01:33:43'!
ERROR!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 01:33:55'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 01:34:08'!
invalidShortCreditCardId
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 01:34:34' prior: 50655937!
invalidShortCreditCardId
	^'123456789123456'! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 01:34:36'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:34:44' prior: 50655904!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidShortCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 01:34:49'!
FAILURE!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 01:34:54' prior: 50655950!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidShortCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCustomerName ]
	! !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 11:51:15' prior: 50655967!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidShortCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidCreditCardID ]
	! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:51:27'!
FAILURE!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:51:46'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 11:53:44' prior: 50655837!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	(aCustomerName = '') ifTrue: [ ^self error: CreditCard invalidCustomerName ].
	(aCreditCardNumber size = 16) ifFalse: [ ^self error: CreditCard invalidCreditCardID ].
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 11:53:46'!
PASSED!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:53:46'!
ERROR!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:53:46'!
ERROR!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:53:50'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/3/2023 11:53:57'!
invalidCreditCardID
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/3/2023 11:55:07' prior: 50656065!
invalidCreditCardID
	^'Credit card ID must containt 16 digit'! !

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:55:09'!
PASSED!
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/3/2023 11:56:01'!
invalidSizeCreditCardID
	^'Credit card ID must containt 16 digit'! !
!EditorialStoreTest methodsFor: 'as yet unclassified' stamp: 'CJF 11/3/2023 11:56:01' prior: 50655981!
test12IdCardContainsSixteenDigits
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidShortCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidSizeCreditCardID ]
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'CJF 11/3/2023 11:56:01' prior: 50656002!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	(aCustomerName = '') ifTrue: [ ^self error: CreditCard invalidCustomerName ].
	(aCreditCardNumber size = 16) ifFalse: [ ^self error: CreditCard invalidSizeCreditCardID ].
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !

!methodRemoval: CreditCard class #invalidCreditCardID stamp: 'CJF 11/3/2023 11:56:01'!
invalidCreditCardID
	^'Credit card ID must containt 16 digit'!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 11:56:09'!
PASSED!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 11:56:10'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 11:58:07'!
test13
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	! !

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 11:58:12'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 11:58:20'!
invalidDigitsCreditCardId
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 11:58:43' prior: 50656176!
invalidDigitsCreditCardId
	^'1 04586a89654745'! !

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 11:58:44'!
FAILURE!

----End fileIn of C:\Users\crist\Desktop\ASF7\Packages\TerseGuide.pck.st----!
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 12:01:08' prior: 50656099!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	(aCustomerName = '') ifTrue: [ ^self error: CreditCard invalidCustomerName ].
	(aCreditCardNumber size = 16) ifFalse: [ ^self error: CreditCard invalidSizeCreditCardID ].
	(aCreditCardNumber do:[ :aDigit | (aDigit isLetter or: aDigit isSeparator ) ifTrue: [ ^self error: CreditCard invalidDigitCreditCardID]])
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 12:02:07' prior: 50659108!
for: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate 
	(aCustomerName = '') ifTrue: [ ^self error: CreditCard invalidCustomerName ].
	(aCreditCardNumber size = 16) ifFalse: [ ^self error: CreditCard invalidSizeCreditCardID ].
	aCreditCardNumber do:[ :aDigit | 
		(aDigit isLetter or: aDigit isSeparator ) ifTrue: 
										[ ^self error: CreditCard invalidDigitCreditCardID]
						].
	^self new initializeFor: aCustomerName withNumberCC: aCreditCardNumber withExpirationDate: anExpirationDate ! !

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 12:02:09'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/3/2023 12:02:17'!
invalidDigitCreditCardID
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'CJF 11/3/2023 12:03:03' prior: 50659150!
invalidDigitCreditCardID
	^'Credit Card ID can only contain numeric digits'! !

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 12:03:04'!
PASSED!

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!

!testRun: #EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 12:03:07'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 12:03:37'!
test13IdCardCannotCountainLettersAndSpaces
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	! !

!methodRemoval: EditorialStoreTest #test13IdCardCannotCountainLettersAndSpaces stamp: 'CJF 11/3/2023 12:03:48'!
test13IdCardCannotCountainLettersAndSpaces
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 12:03:53'!
test13IdCardCannotCountainLettersAndSpaces
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	! !

!methodRemoval: EditorialStoreTest #test13 stamp: 'CJF 11/3/2023 12:03:53'!
test13
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 12:53:05'!
test13IdCardCannotContainLettersAndSpaces
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	! !

!methodRemoval: EditorialStoreTest #test13IdCardCannotCountainLettersAndSpaces stamp: 'CJF 11/3/2023 12:53:05'!
test13IdCardCannotCountainLettersAndSpaces
	
	self should: [ CreditCard for: self validCustomerName 
							withNumberCC: self invalidDigitsCreditCardId 
						withExpirationDate: self aValidExpirationDate.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CreditCard invalidDigitCreditCardID ]
	!

!methodRemoval: CashierTest #test04 stamp: 'CJF 11/3/2023 13:00:18'!
test04
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self anInvalidCustomerName with: self aValidNumberOfCreditCard withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidCostumerName.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]!

!methodRemoval: CashierTest #test06 stamp: 'CJF 11/3/2023 13:00:20'!
test06
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidWithLetterCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]!

!methodRemoval: CashierTest #test05 stamp: 'CJF 11/3/2023 13:00:21'!
test05
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .

	self should: [
	cashier checkOutFor: self aValidCustumerName with: self anInvalidShortCreditCardNumber withExpirtacionDate: self aValidExpirationDate.] 
	raise: Error - MessageNotUnderstood  withExceptionDo:[ :anError|
			self assert: anError messageText equals: Cashier invalidNumberCreditCard.
			self assert: cashier calculateOrderAmount equals: 11.
		 ]!

!methodRemoval: CashierTest #test03CashierCheckoutValidCartWithMultiplesItem stamp: 'CJF 11/3/2023 13:00:29'!
test03CashierCheckoutValidCartWithMultiplesItem
	|cart cashier|
	cart := Cart acceptingItemsOf: self anotherCatalog.
	
	cart add: self itemSellByTheStore  withOcurrences: 1.
	cart add: self anotherItemSellByTheStore withOcurrences: 2.
	
	cashier := 	Cashier with: cart andPrice: 	self aCatalogPrice .
	
	self assert: cashier calculateOrderAmount equals: 11.
	!

!methodRemoval: CashierTest #test02CashierCheckOutValidCartWithSingleItem stamp: 'CJF 11/3/2023 13:00:31'!
test02CashierCheckOutValidCartWithSingleItem
	|cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
		
	cashier := 	Cashier with: cart andPrice: self aCatalogPrice. 
	
	self assert: cashier calculateOrderAmount equals: 5.  !

!methodRemoval: CashierTest #test01EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 13:00:32'!
test01EmptyCartCannotCheckOut
	|cart cashier |
	cart := self createCart.
	
	self should: [cashier := Cashier with: cart.] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: anError messageText equals: Cashier emptyCartErrorMessage ]!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 13:11:06' prior: 50655545!
test10EmptyCartCannotCheckOut
	|cart|
	cart := self createCart.
	
	self should: [Cashier with: cart.] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: anError messageText equals: Cashier emptyCartErrorMessage ]! !

Date today month!

Date today month previous !

Date today month previous previous !
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 13:25:29'!
test14CashierRejectsCreditCardExpired
	| cart creditCard |
	cart := 	self createCart.
	cart add: self itemSellByTheStore withOcurrences: 2.
	creditCard := CreditCard for: self validCustomerName withNumberCC: self aValidNumberOfCreditCard  withExpirationDate: self anInvalidExpirationDate.
	
	self should: [ Cashier for: cart with: creditCard ] 
		raise: Error - MessageNotUnderstood withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier creditCardExpired].! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 13:25:38'!
ERROR!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 13:25:46'!
anInvalidExpirationDate
	self shouldBeImplemented.! !
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 13:26:06' prior: 50659431!
anInvalidExpirationDate
	^Date today month previous previous.! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 13:26:07'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 13:26:17'!
for: cart with: creditCard 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: cart with: creditCard ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 13:29:06' prior: 50659444!
for: cart with: creditCard 
	(cart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	(creditCard isExpired: Date today month) ifTrue: [ ^self error: Cashier creditCardExpired ].
	^self new initializeFor: cart with: creditCard ! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 13:29:13'!
ERROR!
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 13:29:37'!
isExpired: aRenameMe1 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 13:31:16' prior: 50659467!
isExpired: monthAndYear 
	^expirationDate < monthAndYear .! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 13:31:17'!
ERROR!

Date today month previous previous !

a!

a!

a := Date today month previous previous.
a!

a < Date today month!

a := Date today month previous previous.
a < Date today month!

Date today !

Date today month!

Date today month previous previous includes: Date today!

Date today month includes: Date today previous !

Date today month includes: Date today next!

Date today month includes: Date today month next!
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 13:56:59' prior: 50659472!
isExpired: monthAndYear 
	^monthAndYear includes: expirationDate ! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 13:57:00'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/3/2023 13:57:18'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogPrice cart_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/3/2023 13:57:18'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogPrice cart_CHANGE_ME creditCard_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:00:25'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 14:00:57' prior: 50659453!
for: aCart with: creditCard 
	(aCart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	(creditCard isExpired: Date today month) ifTrue: [ ^self error: Cashier creditCardExpired ].
	^self new initializeFor: aCart with: creditCard ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 14:01:07' prior: 50659521!
for: aCart with: aCreditCard 
	(aCart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	(aCreditCard isExpired: Date today month) ifTrue: [ ^self error: Cashier creditCardExpired ].
	^self new initializeFor: aCart with: aCreditCard ! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:01:51'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CJF 11/3/2023 14:01:58'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogPrice cart_CHANGE_ME creditCard_CHANGE_ME creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CJF 11/3/2023 14:01:58'!
initializeFor: aCart with: aCreditCard 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'CJF 11/3/2023 14:02:14' prior: 50659554!
initializeFor: aCart with: aCreditCard 
	cart := aCart.
	creditCard := aCreditCard.! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:02:15'!
FAILURE!
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 14:23:24' prior: 50659493!
isExpired: monthAndYear 
	^expirationDate includes: monthAndYear .! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:23:25'!
FAILURE!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:23:29'!
FAILURE!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:23:29'!
FAILURE!
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 14:47:02' prior: 50659570!
isExpired: monthAndYear 
	^monthAndYear includes: expirationDate .
	"^expirationDate includes: monthAndYear ."! !

November / 2023!

November of: 2023!

a := November of: 2023.
b := October of: 2023.
a!

a := November of: 2023.
b := October of: 2023.
b!

a := November of: 2023.
b := October of: 2023.
a < b !

a := November of: 2023.
b := October of: 2023.
b < a  false .!

a := November of: 2023.
b := October of: 2023.
b < a !

a := November of: 2021.
b := October of: 2023.
a < b!
!EditorialStoreTest methodsFor: 'support' stamp: 'CJF 11/3/2023 14:50:16' prior: 50659436!
anInvalidExpirationDate
	^October of: 2023.! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJF 11/3/2023 14:51:25' prior: 50659532!
for: aCart with: aCreditCard 
	(aCart isEmpty) ifTrue: [ ^self error: Cashier emptyCartErrorMessage ].
	(aCreditCard isExpired: self actualMonthAndYear) ifTrue: [ ^self error: Cashier creditCardExpired ].
	^self new initializeFor: aCart with: aCreditCard ! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:51:31'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CJF 11/3/2023 14:51:49'!
actualMonthAndYear
	self shouldBeImplemented.! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:51:59'!
ERROR!

Date today monthName !

Date today monthName className !

Date today month!

Date today month monthName !

Date today yearNumber !

Date today months monthIndex !

Date today months monthIndex!

Date today month monthIndex !

11 of: 2023!

(Date today month monthName ) of: (Date today yearNumber ).!

Date today monthNames !

Date today monthName!

Date today month!

Date today monthAbbreviation !

November of: 2023 !

(November of: 2023 ) next!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CJF 11/3/2023 14:58:13' prior: 50659624!
actualMonthAndYear
	^November of: 2023! !
!CreditCard methodsFor: 'queries' stamp: 'CJF 11/3/2023 14:58:39' prior: 50659586!
isExpired: monthAndYear 
	^expirationDate < monthAndYear! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:58:59'!
ERROR!
!Cashier class methodsFor: 'errorsMessages' stamp: 'CJF 11/3/2023 14:59:07'!
creditCardExpired
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errorsMessages' stamp: 'CJF 11/3/2023 14:59:26' prior: 50659659!
creditCardExpired
	^'Credit Card expired'! !

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:59:27'!
PASSED!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 14:59:29'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 14:59:30'!
PASSED!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 14:59:30'!
PASSED!

!testRun: #EditorialStoreTest #test13IdCardCannotContainLettersAndSpaces stamp: 'CJF 11/3/2023 14:59:30'!
PASSED!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 14:59:30'!
PASSED!

!methodRemoval: CashierTest #createCart stamp: 'CJF 11/3/2023 15:00:01'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CashierTest #aCatalogPrice stamp: 'CJF 11/3/2023 15:00:08'!
aCatalogPrice
	^Dictionary with: self itemSellByTheStore -> 5 with: self anotherItemSellByTheStore -> 3.!

!methodRemoval: CashierTest #aValidCustumerName stamp: 'CJF 11/3/2023 15:00:17'!
aValidCustumerName
	^'Hola Mundo'!

!methodRemoval: CashierTest #anInvalidShortCreditCardNumber stamp: 'CJF 11/3/2023 15:00:20'!
anInvalidShortCreditCardNumber
	^'1234'!

!methodRemoval: CashierTest #aValidNumberOfCreditCard stamp: 'CJF 11/3/2023 15:00:22'!
aValidNumberOfCreditCard
	^'1234567891234567'!

!methodRemoval: CashierTest #anInvalidCustomerName stamp: 'CJF 11/3/2023 15:00:24'!
anInvalidCustomerName
	^''!

!methodRemoval: CashierTest #aValidExpirationDate stamp: 'CJF 11/3/2023 15:00:26'!
aValidExpirationDate
	^Date today month next!

!methodRemoval: CashierTest #anInvalidWithLetterCreditCardNumber stamp: 'CJF 11/3/2023 15:00:28'!
anInvalidWithLetterCreditCardNumber
	^'123 563487a36985'!

!methodRemoval: CashierTest #anotherCatalog stamp: 'CJF 11/3/2023 15:00:29'!
anotherCatalog
	
	^ Array with: self itemSellByTheStore with: self anotherItemSellByTheStore!

!methodRemoval: CashierTest #anotherItemSellByTheStore stamp: 'CJF 11/3/2023 15:00:31'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'!

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'CJF 11/3/2023 15:00:33'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CashierTest #defaultCatalog stamp: 'CJF 11/3/2023 15:00:36'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'CJF 11/3/2023 15:00:37'!
itemSellByTheStore
	
	^ 'validBook'!

!classRemoval: #CashierTest stamp: 'CJF 11/3/2023 15:00:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #EditorialStoreTest #test01NewCartsAreCreatedEmpty stamp: 'CJF 11/3/2023 15:00:49'!
PASSED!

!testRun: #EditorialStoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJF 11/3/2023 15:00:49'!
PASSED!

!testRun: #EditorialStoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJF 11/3/2023 15:00:49'!
PASSED!

!testRun: #EditorialStoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test06CartRemembersAddedItems stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test09CartCalculatesTotalCartAmount stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test10EmptyCartCannotCheckOut stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test11CustomerNameShouldNotBeEmpty stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test12IdCardContainsSixteenDigits stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test13IdCardCannotContainLettersAndSpaces stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!

!testRun: #EditorialStoreTest #test14CashierRejectsCreditCardExpired stamp: 'CJF 11/3/2023 15:00:50'!
PASSED!
!EditorialStoreTest methodsFor: 'tests' stamp: 'CJF 11/3/2023 15:31:17'!
test15paymentCannotAppliedWithStolenCreditCard
! !

----QUIT----(3 November 2023 15:31:29) CuisUniversity-5981.image priorSource: 10371874!