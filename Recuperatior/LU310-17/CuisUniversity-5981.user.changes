

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (11 December 2023 16:38:03) as /home/camila/Desktop/CUIS PARA PARCIAL/linux64/CuisUniversity-5981.image!


----End fileIn of /home/camila/Desktop/CUIS PARA PARCIAL/linux64/ISW1-2023-2C-2doParcial.st----!

----SNAPSHOT----(11 December 2023 16:38:55) CuisUniversity-5981.image priorSource: 10197292!

----SNAPSHOT----(11 December 2023 17:25:02) CuisUniversity-5981.image priorSource: 10236597!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:27:50'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent playerPosition playerLives fieldElements playerArmor random player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:27:54'!
Object subclass: #BayonetPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:27:49' prior: 50651266!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	playerPosition := aStartingPosition.
	playerLives := aNumberOfLives.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	playerArmor := NoArmor new.
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:28:01'!
ERROR!
!BayonetPlayer class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 17:28:05'!
lives: aNumberOfLives 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeLives: aNumberOfLives ! !
!BayonetPlayer class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 17:28:11' prior: 50651587!
lives: aNumberOfLives
	^self new initializeLives: aNumberOfLives ! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:28:12'!
ERROR!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:28:15'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'numberOfLives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:28:15'!
initializeLives: aNumberOfLives 
	self shouldBeImplemented.
	numberOfLives := aNumberOfLives.! !
!BayonetPlayer methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:28:28' prior: 50651612!
initializeLives: aNumberOfLives 
	
	numberOfLives := aNumberOfLives.! !

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:28:33'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:28:33' prior: 50651618!
initializeLives: aNumberOfLives 
	
	lives := aNumberOfLives.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:28:34'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:28:40'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:28:40'!
PASSED!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:29:04' prior: 50651568!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	playerPosition := aStartingPosition.
	
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	playerArmor := NoArmor new.
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:29:05'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 17:29:33' prior: 50651303!
isPlayerStillAlive

	^ player isStillAlive! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:29:35'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:29:38'!
isStillAlive
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:29:43' prior: 50651808!
isStillAlive
	^ lives > 0! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:29:44'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:29:45'!
FAILURE!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:29:45'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:29:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:29:47'!
ERROR!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 17:30:00' prior: 50651311!
decreasePlayerLives
	
	player decreasePlayerLives! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:30:02'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:30:05'!
decreasePlayerLives
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:30:11' prior: 50651975!
decreasePlayerLives
	lives := lives - 1! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:30:13'!
FAILURE!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:30:27'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 17:30:50' prior: 50651315!
playerLives
	
	^player livesLeft! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:31:00'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:31:02'!
livesLeft
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:31:05' prior: 50652000!
livesLeft
	^ lives! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:31:05'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:31:07'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:07'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:31:08'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:08'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:08'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:31:09'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:09'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:10'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:31:10'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:31:10'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:31:11'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:31:11'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:31:11'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:31:12'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:31:12'!
PASSED!

----SNAPSHOT----(11 December 2023 17:31:15) CuisUniversity-5981.image priorSource: 10236691!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:31:25'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent playerPosition fieldElements playerArmor random player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 17:32:32'!
lives: aNumberOfLives aPosition: position 
	^self new initializeLives: aNumberOfLives ! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:32:32' prior: 50651783!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	playerPosition := aStartingPosition.
	
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	playerArmor := NoArmor new.
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !

!methodRemoval: BayonetPlayer class #lives: stamp: 'cc 12/11/2023 17:32:32'!
lives: aNumberOfLives
	^self new initializeLives: aNumberOfLives !
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:32:56' prior: 50652088!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	playerPosition := aStartingPosition.
	
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	playerArmor := NoArmor new.
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !
!BayonetPlayer class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 17:33:16' prior: 50652082!
lives: aNumberOfLives aPosition: aStartingPosition 
	^self new initializeLives: aNumberOfLives position: aStartingPosition. ! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:33:18'!
ERROR!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:33:24'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives numberOfLives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:33:24'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives numberOfLives startingPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:33:24'!
initializeLives: aNumberOfLives position: aStartingPosition 
	self shouldBeImplemented.
	numberOfLives := aNumberOfLives.
	startingPosition := aStartingPosition.! !
!BayonetPlayer methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:33:31' prior: 50652152!
initializeLives: aNumberOfLives position: aStartingPosition 
	lives := aNumberOfLives.
	startingPosition := aStartingPosition.! !

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:33:37'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives numberOfLives position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:33:37' prior: 50652161!
initializeLives: aNumberOfLives position: aStartingPosition 
	lives := aNumberOfLives.
	position := aStartingPosition.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:33:39'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:33:42'!
PASSED!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:33:54'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:34:05'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:34:05'!
PASSED!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 17:34:42' prior: 50651295!
isPlayerAt: aPosition

	^player isPlayerAt: aPosition ! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:34:42'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:34:45'!
isPlayerAt: aPosition 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:34:51' prior: 50652484!
isPlayerAt: aPosition 
	^position = aPosition ! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:34:51'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:35:22' prior: 50651363!
movePlayerTo: newPosition

	player moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:35:24'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:35:27'!
moveToPosition: newPosition 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:35:32' prior: 50652507!
moveToPosition: newPosition 
	position := newPosition ! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:35:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:35:35'!
FAILURE!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:35:35'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:35:37'!
FAILURE!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:36:17'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:36:19'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:36:20'!
FAILURE!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:36:20'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:37:15' prior: 50651353!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	newPosition := player currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:37:16'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:37:19'!
currentPosition
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:37:22' prior: 50652691!
currentPosition
	^position! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:37:40'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:37:42'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:37:44'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:37:47'!
FAILURE!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:37:47'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:37:49'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:38:35' prior: 50651335!
fieldElementAtPlayerPosition

	^ fieldElements detect: [ :aFieldElement | aFieldElement isAt: player currentPosition ] ifNone: [ EmptyFieldElement new ]! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:38:37'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:38:38'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:38:39'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:38:39'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:38:39'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:38:39'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:38:40'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:38:40'!
ERROR!
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 17:39:24' prior: 50651395!
playerSteppedIntoTunnel: aTunnel 
	
	| exitPosition |
	
	exitPosition := aTunnel exitWhenEnteringAt: player currentPosition.
	player moveToPosition: exitPosition.! !

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:39:25'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:39:30'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:39:30'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:39:30'!
FAILURE!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 17:39:52' prior: 50651299!
isPlayerAtTopRow

	^ (player currentPosition) y = boardExtent y! !

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:39:53'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:39:56'!
PASSED!

----SNAPSHOT----(11 December 2023 17:40:03) CuisUniversity-5981.image priorSource: 10253402!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:40:41' prior: 50652109!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	playerArmor := NoArmor new.
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:40:44'!
PASSED!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:40:49'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements playerArmor random player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #BayonetPlayer category: 'ISW1-2023-2C-2doParcial' stamp: 'cc 12/11/2023 17:42:25'!
Object subclass: #BayonetPlayer
	instanceVariableNames: 'lives position armor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!BayonetPlayer methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:42:23' prior: 50652177!
initializeLives: aNumberOfLives position: aStartingPosition 

	lives := aNumberOfLives.
	position := aStartingPosition.
	armor := NoArmor new.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:42:26'!
PASSED!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:42:35' prior: 50653199!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	"playerArmor := NoArmor new."
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:42:39'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:42:39'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:42:40'!
ERROR!
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 17:43:35' prior: 50651387!
playerSteppedIntoLowPowerMine: aLowPowerMine 
	
	player steppedIntoLowPowerMine: aLowPowerMine in: self.
	self removeFieldElement: aLowPowerMine ! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:43:36'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:43:39'!
steppedIntoLowPowerMine: aLowPowerMine in: aMineField 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:43:53' prior: 50653553!
steppedIntoLowPowerMine: aLowPowerMine in: aMineField 
	armor defendFromLowPowerMine: aLowPowerMine in: aMineField.! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:43:54'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:43:55'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:43:56'!
ERROR!
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 17:44:12' prior: 50651377!
playerSteppedIntoHighPowerMine: aHighPowerMine 
	
	| step |
	
	step := player defendFromHighPowerMine: aHighPowerMine in: self.
	self removeFieldElement: aHighPowerMine .
	self movePlayer: step ifGameOver: []
	
	! !

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:44:13'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:44:16'!
defendFromHighPowerMine: aHighPowerMine in: aMineField 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:44:22' prior: 50653590!
defendFromHighPowerMine: aHighPowerMine in: aMineField 
	armor defendFromHighPowerMine: aHighPowerMine in: aMineField.! !

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:44:23'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:44:24'!
ERROR!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:44:40' prior: 50652678!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	newPosition := (player currentPosition) + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:44:42'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:45:10'!
ERROR!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:46:03' prior: 50653610!
movePlayer: aStep ifGameOver: aBlock

	| newPosition playerPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	playerPosition := player currentPosition.
	newPosition := playerPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:46:06'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:46:46' prior: 50653596!
defendFromHighPowerMine: aHighPowerMine in: aMineField 
	^armor defendFromHighPowerMine: aHighPowerMine in: aMineField.! !

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:46:47'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:46:55'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:47:01'!
FAILURE!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:47:01'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:47:01'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:02'!
FAILURE!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:22'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:47:50' prior: 50653627!
movePlayer: aStep ifGameOver: aBlock

	| newPosition playerPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	newPosition := player currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 17:47:55' prior: 50653807!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	newPosition := player currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:47:56'!
FAILURE!
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 17:48:47' prior: 50651370!
playerSteppedIntoArmorRack: anArmorRack with: anArmor 
	
	player equipArmor: anArmor.
	self removeFieldElement: anArmorRack ! !

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:48:50'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:48:53'!
equipArmor: anArmor 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:48:58' prior: 50653845!
equipArmor: anArmor 
	armor := anArmor! !

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:48:58'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:49:00'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:49:00'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:49:00'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:49:01'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:49:01'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:49:02'!
FAILURE!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:52:02'!
FAILURE!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:07'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:52:08'!
FAILURE!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:52:08'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:52:08'!
FAILURE!

----SNAPSHOT----(11 December 2023 17:52:46) CuisUniversity-5981.image priorSource: 10289441!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:52:56'!
FAILURE!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:52:56'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:52:56'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 17:55:32' prior: 50651307!
armorUsed
	
	player armorUsed! !

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:55:32'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:55:35'!
armorUsed
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:55:40' prior: 50654184!
armorUsed
	armor := NoArmor new! !

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:55:40'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:55:42'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:55:42'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:55:42'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:55:43'!
PASSED!

----SNAPSHOT----(11 December 2023 17:55:45) CuisUniversity-5981.image priorSource: 10316146!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:56:07'!
PASSED!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 17:56:15'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 17:56:26' prior: 50653383!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 17:56:28'!
PASSED!

TestCase subclass: #PlayerTeamTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!

!classDefinition: #PlayerTeamTest category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 17:57:12'!
TestCase subclass: #PlayerTeamTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!

!classDefinition: #PlayerTeam category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 17:58:44'!
Object subclass: #PlayerTeam
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!PlayerTeamTest methodsFor: 'no messages' stamp: 'cc 12/11/2023 17:58:40'!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: #(BayonetPlayer lives: 0 aPosition: 1@1 )]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithNoLives.! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:59:04' prior: 50654664!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 0 aPosition: 1@1 }]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithNoLives.! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 17:59:05'!
ERROR!
!PlayerTeam class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 17:59:09'!
invalidPlayerWithNoLives
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInvalidPlayerWithNoLives! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:59:17' prior: 50654675!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 0 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithNoLives.! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 17:59:18'!
ERROR!

!methodRemoval: PlayerTeam class #invalidPlayerWithNoLives stamp: 'cc 12/11/2023 17:59:28'!
invalidPlayerWithNoLives
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInvalidPlayerWithNoLives!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 17:59:31'!
ERROR!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:59:48' prior: 50654698!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 0 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithNoLives).! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 17:59:49'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 17:59:54'!
invalidPlayerWithNoLives
	self shouldBeImplemented.! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:00:11' prior: 50654738!
invalidPlayerWithNoLives
	^ 'Cannot start team with not alive players'! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:00:13'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:00:16'!
withPlayers: aRenameMe1 
	self shouldBeImplemented.! !

----End fileIn of /home/camila/Desktop/CUIS PARA PARCIAL/linux64/Packages/TerseGuide.pck.st----!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:04:18' prior: 50654752!
withPlayers: aCollectionOfPlayers
	 aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft = 0) ifTrue: [self error: self invalidPlayerWithNoLives] ]
 	! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:04:19'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:04:19'!
PASSED!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:04:38'!
test02TeamCannotStartWithPlayerWithNegativeLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: -1 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithNegativeLives).! !

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:04:39'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:04:42'!
invalidPlayerWithNegativeLives
	self shouldBeImplemented.! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:04:51' prior: 50657707!
invalidPlayerWithNegativeLives
	^'Cannot start team with a player with negative lives'! !

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:04:52'!
FAILURE!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:05:31' prior: 50657678!
withPlayers: aCollectionOfPlayers
	 aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft = 0) ifTrue: [self error: self invalidPlayerWithNoLives] ].
	aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft < 0) ifTrue: [self error: self invalidPlayerWithNegativeLives] ]
 	! !

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:05:32'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:05:32'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:05:32'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:05:36'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:05:36'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:05:36'!
PASSED!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:05:39' prior: 50657693!
test02TeamCannotStartWithPlayerWithNegativeLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: -1 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithNegativeLives).! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:06:00'!
test03TeamCannotStartWithPlayerWithNonIntegerLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 1.5 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLives).! !

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:06:03'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:06:06'!
invalidPlayerWithInvalidLives
	self shouldBeImplemented.! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:06:19' prior: 50657782!
invalidPlayerWithInvalidLives
	^'Cannot start team with player with non integer lives'! !

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:06:20'!
FAILURE!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:07:46' prior: 50657723!
withPlayers: aCollectionOfPlayers
	 aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft = 0) ifTrue: [self error: self invalidPlayerWithNoLives] ].
	aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft < 0) ifTrue: [self error: self invalidPlayerWithNegativeLives] ].
	aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft isInteger) ifFalse: [ self error: self invalidPlayerWithInvalidLives ]]
 	! !

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:07:48'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:07:48'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:07:48'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:07:48'!
PASSED!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:08:14'!
invalidPlayerWithInvalidLivesErrorDescritption
	^'Cannot start team with player with non integer lives'! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:08:14' prior: 50657798!
withPlayers: aCollectionOfPlayers
	 aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft = 0) ifTrue: [self error: self invalidPlayerWithNoLives] ].
	aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft < 0) ifTrue: [self error: self invalidPlayerWithNegativeLives] ].
	aCollectionOfPlayers do: [:aPlayer | (aPlayer livesLeft isInteger) ifFalse: [ self error: self invalidPlayerWithInvalidLivesErrorDescritption ]]
 	! !

!methodRemoval: PlayerTeam class #invalidPlayerWithInvalidLives stamp: 'cc 12/11/2023 18:08:14'!
invalidPlayerWithInvalidLives
	^'Cannot start team with player with non integer lives'!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:08:22' prior: 50657768!
test03TeamCannotStartWithPlayerWithNonIntegerLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 1.5 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescritption ).! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:08:24'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:08:24'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:08:24'!
PASSED!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:09:43' prior: 50657836!
withPlayers: aCollectionOfPlayers
	aCollectionOfPlayers do: 
	[:aPlayer | (aPlayer livesLeft strictlyPositive and: [ aPlayer livesLeft  isInteger ]) 
			ifFalse: [ self error: self invalidPlayerWithInvalidLivesErrorDescritption ]]
 	! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:09:46'!
FAILURE!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:09:46'!
FAILURE!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:09:56' prior: 50654724!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 0 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescritption).! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:09:57'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:09:58'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:09:58'!
FAILURE!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:09:58'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:09:58'!
FAILURE!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:06' prior: 50657757!
test02TeamCannotStartWithPlayerWithNegativeLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: -1 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescritption).! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:10:19'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:10:21'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:10:23'!
PASSED!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:39'!
invalidPlayerWithInvalidLivesErrorDescription
	^'Cannot start team with player with non integer lives'! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:39' prior: 50657882!
withPlayers: aCollectionOfPlayers
	aCollectionOfPlayers do: 
	[:aPlayer | (aPlayer livesLeft strictlyPositive and: [ aPlayer livesLeft  isInteger ]) 
			ifFalse: [ self error: self invalidPlayerWithInvalidLivesErrorDescription ]]
 	! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:39' prior: 50657900!
test01TeamCannotStartWithPlayerWithNoLives
self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 0 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescription).! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:39' prior: 50657930!
test02TeamCannotStartWithPlayerWithNegativeLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: -1 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescription).! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:10:39' prior: 50657859!
test03TeamCannotStartWithPlayerWithNonIntegerLives
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 1.5 aPosition: 1@1 }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam invalidPlayerWithInvalidLivesErrorDescription ).! !

!methodRemoval: PlayerTeam class #invalidPlayerWithInvalidLivesErrorDescritption stamp: 'cc 12/11/2023 18:10:39'!
invalidPlayerWithInvalidLivesErrorDescritption
	^'Cannot start team with player with non integer lives'!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:10:51'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:10:53'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:10:53'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:10:53'!
PASSED!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:12:18'!
test04TeamCannotStartWithPlayersInSamePosition
	self 
		should: [ PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@1. BayonetPlayer lives: 2 aPosition: 1@1  }.]
		raise: Error - MessageNotUnderstood 
		withMessageText: (PlayerTeam positionsCannotBeTheSameForPlayersErrorDescription ).! !

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:12:20'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:12:24'!
positionsCannotBeTheSameForPlayersErrorDescription
	self shouldBeImplemented.! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:12:37' prior: 50658042!
positionsCannotBeTheSameForPlayersErrorDescription
	^' Players must be in different starting positions'! !

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:12:37'!
FAILURE!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:13:34' prior: 50657959!
withPlayers: aCollectionOfPlayers
	aCollectionOfPlayers do: 
	[:aPlayer | (aPlayer livesLeft strictlyPositive and: [ aPlayer livesLeft  isInteger ]) 
			ifFalse: [ self error: self invalidPlayerWithInvalidLivesErrorDescription ]].
		
	aCollectionOfPlayers  combinations: 2 atATimeDo: [ :elements |
		(elements first isSharingPositionWith: elements second) ifTrue: [
			self error: self positionsCannotBeTheSameForPlayersErrorDescription ]]
 	! !

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:13:35'!
ERROR!
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:13:43'!
isSharingPositionWith: aRenameMe1 
	self shouldBeImplemented.! !
!BayonetPlayer methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:14:30' prior: 50658080!
isSharingPositionWith: aPlayer 
	^aPlayer isPlayerAt: position! !

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:14:31'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:14:31'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:14:31'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:14:31'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:14:31'!
PASSED!

----SNAPSHOT----(11 December 2023 18:14:37) CuisUniversity-5981.image priorSource: 10325939!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:16:23'!
test05TeamIsCreatedWithValidPlayersWithValidLives

	| team |
	team := PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@1. BayonetPlayer lives: 2 aPosition: 1@1  }.
	self assert: team totalTeamLivesIs: 3.! !
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:16:32' prior: 50658112!
test05TeamIsCreatedWithValidPlayersWithValidLives

	| team |
	team := PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@1. BayonetPlayer lives: 2 aPosition: 1@1  }.
	self assert: (team totalTeamLivesIs: 3).! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:16:35'!
ERROR!
!PlayerTeamTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:16:41' prior: 50658122!
test05TeamIsCreatedWithValidPlayersWithValidLives

	| team |
	team := PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@1. BayonetPlayer lives: 2 aPosition: 1@2  }.
	self assert: (team totalTeamLivesIs: 3).! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:16:42'!
ERROR!
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:16:45'!
totalTeamLivesIs: aRenameMe1 
	self shouldBeImplemented.! !
!PlayerTeam class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:17:34' prior: 50658059!
withPlayers: aCollectionOfPlayers
	aCollectionOfPlayers do: 
	[:aPlayer | (aPlayer livesLeft strictlyPositive and: [ aPlayer livesLeft  isInteger ]) 
			ifFalse: [ self error: self invalidPlayerWithInvalidLivesErrorDescription ]].
		
	aCollectionOfPlayers  combinations: 2 atATimeDo: [ :elements |
		(elements first isSharingPositionWith: elements second) ifTrue: [
			self error: self positionsCannotBeTheSameForPlayersErrorDescription ]].
 	
	^self new initializeWithPlayers: aCollectionOfPlayers .! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:17:36'!
ERROR!

!classDefinition: #PlayerTeam category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 18:17:39'!
Object subclass: #PlayerTeam
	instanceVariableNames: 'collectionOfPlayers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!PlayerTeam methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:17:39'!
initializeWithPlayers: aCollectionOfPlayers 
	self shouldBeImplemented.
	collectionOfPlayers := aCollectionOfPlayers.! !

!classDefinition: #PlayerTeam category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 18:17:50'!
Object subclass: #PlayerTeam
	instanceVariableNames: 'collectionOfPlayers players'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!PlayerTeam methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:17:48' prior: 50658187!
initializeWithPlayers: aCollectionOfPlayers 

	players := aCollectionOfPlayers.! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:17:51'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:17:55'!
totalTeamLivesIs: aRenameMe1 
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:18:49' prior: 50658212!
totalTeamLivesIs: possibleLives

	^possibleLives = players  sum: [:aPlayer | aPlayer livesLeft ]
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:18:49'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:19:38' prior: 50658217!
totalTeamLivesIs: possibleLives

	^possibleLives = players  inject: 0 into: [:aPlayer :lives | aPlayer livesLeft + lives.]
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:19:39'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:20:29' prior: 50658227!
totalTeamLivesIs: possibleLives
	
	| totalLives |
	totalLives := 0.
	players  do: [:aPlayer :lives | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:20:33'!
ERROR!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:20:38'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:20:52' prior: 50658238!
totalTeamLivesIs: possibleLives
	
	| totalLives |
	totalLives := 0.
	players  do: [:aPlayer | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:20:53'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:20:53'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:20:53'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:20:53'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:20:53'!
PASSED!

----SNAPSHOT----(11 December 2023 18:20:56) CuisUniversity-5981.image priorSource: 10446663!

----SNAPSHOT----(11 December 2023 18:21:32) CuisUniversity-5981.image priorSource: 10452185!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 18:22:27'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom aTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom    
! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650661!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650555!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650409!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self aTeam: {}]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650473!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650431!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650691!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650392!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650599!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650770!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self aTeam: {}.
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650349!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650644!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650615!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650505!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650568!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650370!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 0 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650463!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650630!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650749!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self aTeam: {}.
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650483!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650543!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650737!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self aTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650759!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self aTeam: {}.
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650831!
assertCannotSharePositionsFor: elements

	self
		should: [ MineField 
			extent: 3@3 
			startingAt: 1@1 
			lives: 2 
			elements: elements
			randomizingWith: self aTeam: {}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsShouldNotSharePositionsErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650335!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650530!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650726!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self aTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650442!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650806!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 3@3 } randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650518!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650381!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1.5 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650582!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650453!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650360!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 startingAt: 1@2 lives: 1 elements: #() randomizingWith: self aTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650678!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650420!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self aTeam: {}.
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:22:27' prior: 50650493!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self aTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !

!methodRemoval: MineField class #extent:startingAt:lives:elements:randomizingWith: stamp: 'cc 12/11/2023 18:22:27'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom     
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom    
!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:22:47'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:22:47'!
PASSED!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:23:37'!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:23:37' prior: 50658288!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom aTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: {}    
! !

!methodRemoval: MineField #initializeExtent:startingAt:lives:elements:randomizingWith: stamp: 'cc 12/11/2023 18:23:37'!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom  
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 18:24:24' prior: 50658988!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom aTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam
! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:24:25'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:24:28'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:24:28'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 18:24:48'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam
! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658600!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658395!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658667!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658312!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658613!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: {}.
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658380!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658550!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658717!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1.5 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658344!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: {}]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658625!
assertCannotSharePositionsFor: elements

	self
		should: [ MineField 
			extent: 3@3 
			startingAt: 1@1 
			lives: 2 
			elements: elements
			randomizingWith: self firstTeam: {}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsShouldNotSharePositionsErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658565!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: {}.
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658576!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658498!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658432!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: {}.
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658703!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658796!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658747!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658758!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 startingAt: 1@2 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658784!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658482!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658452!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658770!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658691!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 3@3 } randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658357!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658527!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 0 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658539!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658729!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658368!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658414!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658638!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658330!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658679!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658653!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658512!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658587!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:24:48' prior: 50658464!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !

!methodRemoval: MineField class #extent:startingAt:lives:elements:randomizingWith:aTeam: stamp: 'cc 12/11/2023 18:24:48'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom aTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam
!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:24:54'!
PASSED!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 18:25:14'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:25:13' prior: 50658973!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aTeam.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:25:17'!
PASSED!

----SNAPSHOT----(11 December 2023 18:26:09) CuisUniversity-5981.image priorSource: 10452279!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:28:29' prior: 50659619!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2
				elements: #() 
				randomizingWith: self 
				firstTeam: {BayonetPlayer lives: 1 aPosition: 1@1} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:28:31'!
ERROR!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 18:28:39'!
extent: aRenameMe1 elements: aRenameMe2 randomizingWith: aMineFieldTest firstTeam: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeExtent: aRenameMe1 elements: aRenameMe2 randomizingWith: aMineFieldTest firstTeam: aRenameMe3 ! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:24:48' prior: 50660054!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:30:56' prior: 50660086!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			startingAt: 1@1 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:31:21'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:31:21'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:32:07' prior: 50659470!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self 
				firstTeam: {BayonetPlayer lives:1 aPosition: 1@1 }.
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:32:08'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:32:09'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:32:09'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:32:09'!
PASSED!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:34:07' prior: 50659896!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := CircularReadStream on: aTeam moving: NullUnit new.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:34:08'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:34:10'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:35:07'!
PASSED!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 18:38:03'!
currentPlayer

	^ player! !
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 18:38:03' prior: 50652854!
fieldElementAtPlayerPosition

	^ fieldElements detect: [ :aFieldElement | aFieldElement isAt: self currentPlayer currentPosition ] ifNone: [ EmptyFieldElement new ]! !
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 18:38:03' prior: 50653833!
playerSteppedIntoArmorRack: anArmorRack with: anArmor 
	
	self currentPlayer equipArmor: anArmor.
	self removeFieldElement: anArmorRack ! !
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 18:38:03' prior: 50653818!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [ ^aBlock value ].
	
	newPosition := self currentPlayer currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 18:38:03' prior: 50652476!
isPlayerAt: aPosition

	^self currentPlayer isPlayerAt: aPosition ! !
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 18:38:03' prior: 50653577!
playerSteppedIntoHighPowerMine: aHighPowerMine 
	
	| step |
	
	step := self currentPlayer defendFromHighPowerMine: aHighPowerMine in: self.
	self removeFieldElement: aHighPowerMine .
	self movePlayer: step ifGameOver: []
	
	! !
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 18:38:03' prior: 50652497!
movePlayerTo: newPosition

	self currentPlayer moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self! !
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 18:38:03' prior: 50653542!
playerSteppedIntoLowPowerMine: aLowPowerMine 
	
	self currentPlayer steppedIntoLowPowerMine: aLowPowerMine in: self.
	self removeFieldElement: aLowPowerMine ! !
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 18:38:03' prior: 50654177!
armorUsed
	
	self currentPlayer armorUsed! !
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 18:38:03' prior: 50651801!
isPlayerStillAlive

	^ self currentPlayer isStillAlive! !
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 18:38:03' prior: 50651967!
decreasePlayerLives
	
	self currentPlayer decreasePlayerLives! !
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 18:38:03' prior: 50651992!
playerLives
	
	^self currentPlayer livesLeft! !
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 18:38:03' prior: 50652891!
playerSteppedIntoTunnel: aTunnel 
	
	| exitPosition |
	
	exitPosition := aTunnel exitWhenEnteringAt: self currentPlayer currentPosition.
	player moveToPosition: exitPosition.! !
!MineField methodsFor: 'steep into field element' stamp: 'cc 12/11/2023 18:38:03' prior: 50660665!
playerSteppedIntoTunnel: aTunnel 
	
	| exitPosition |
	
	exitPosition := aTunnel exitWhenEnteringAt: self currentPlayer currentPosition.
	self currentPlayer moveToPosition: exitPosition.! !
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 18:38:21' prior: 50660583!
currentPlayer

	^ firstTeam current! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:38:31'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:38:32'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:38:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:38:34'!
ERROR!

----SNAPSHOT----(11 December 2023 18:38:40) CuisUniversity-5981.image priorSource: 10508812!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:39:04'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:39:04'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:39:06'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:41:45'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:41:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:41:49'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:42:17'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:42:24'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:42:24'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:42:40' prior: 50659589!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 2@1 }.
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:42:40'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:42:40'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:42:41'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:42:41'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:43:05'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:43:05'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:43:05'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:43:18' prior: 50659648!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1 }.
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:43:18'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:43:23' prior: 50659447!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {{BayonetPlayer lives:1 aPosition: 1@1 }}.
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:43:23'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:43:28'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 18:43:37' prior: 50660650!
isPlayerStillAlive

	^ (self currentPlayer) isStillAlive! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:43:38'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 18:44:21' prior: 50661456!
isPlayerStillAlive

	^ self currentPlayer isStillAlive! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:45:06'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:45:06'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:45:10'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:46:10'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:46:24'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:46:32' prior: 50661438!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1 }.
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:46:32'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:46:32'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:46:32'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:46:44' prior: 50659560!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1 }.
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:46:45'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:46:48' prior: 50659537!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:46:48'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:46:53' prior: 50659374!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 2@1}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:46:54'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:00' prior: 50659433!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:47:01'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:05' prior: 50659385!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:47:06'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:17' prior: 50659419!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:47:17'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:21' prior: 50659660!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:3 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:47:22'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:25' prior: 50659689!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:3 aPosition: 1@1}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:47:25'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:28' prior: 50659634!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:47:29'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:34' prior: 50659674!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:47:34'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:39' prior: 50659571!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:47:40'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:55' prior: 50659601!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:47:55'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:47:59' prior: 50659482!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:47:59'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:05' prior: 50659310!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:48:06'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:11' prior: 50659703!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:12'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:17' prior: 50659264!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:48:18'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:23' prior: 50659510!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:48:23'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:27' prior: 50659295!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: {BayonetPlayer lives:2 aPosition: 1@1}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:48:28'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:35' prior: 50659252!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:48:36'!
FAILURE!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:48:45'!
FAILURE!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:48:52'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:48:52'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:48:52'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:48:52'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:48:52'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:48:52'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:48:52'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:48:58' prior: 50659220!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:48:59'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:49:05' prior: 50659363!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:49:05'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:49:10'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:49:14' prior: 50659283!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:49:19' prior: 50659399!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: {BayonetPlayer lives:1 aPosition: 1@1}.
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:49:19'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:49:23'!
FAILURE!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 18:49:42' prior: 50653047!
isPlayerAtTopRow

	^ (self currentPlayer currentPosition) y = boardExtent y! !

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:49:43'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:49:44'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:49:49'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:49:50'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:49:50'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:49:50'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:49:50'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:49:50'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:17'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:23' prior: 50659498!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:27' prior: 50659458!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 startingAt: 1@2 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:32' prior: 50659548!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 0 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:50:33'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:50:33'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:41' prior: 50659325!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1.5 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:50:41'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:50:41'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:46' prior: 50659233!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:47' prior: 50662732!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:50:55' prior: 50662752!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 0@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 3@1 } ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:50:56'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:50:56'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:51:03' prior: 50659337!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 }]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:51:03'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:51:03'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:51:03'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:51:03'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:51:03'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:51:04'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:51:13'!
PASSED!

----SNAPSHOT----(11 December 2023 18:51:19) CuisUniversity-5981.image priorSource: 10533721!

!classDefinition: #PlayerTeam category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 18:52:26'!
Object subclass: #PlayerTeam
	instanceVariableNames: 'players'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:53:44' prior: 50660101!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			startingAt: 1@1 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:53:45'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:53:45'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:53:57' prior: 50660262!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }).
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:53:57'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:55:04' prior: 50660418!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := CircularReadStream on: (aTeam  players )moving: NullUnit new.! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:55:06'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:55:08'!
players
	self shouldBeImplemented.
	^players! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:55:10' prior: 50663444!
players

	^players! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:55:11'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:55:11'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:55:11'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:55:40' prior: 50661127!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }).
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:55:41'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:55:53' prior: 50661422!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }).
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:55:54'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:55:58' prior: 50661483!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }).
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:55:59'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:07' prior: 50661638!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }).
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:56:09'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:14' prior: 50661653!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:56:15'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:19' prior: 50661668!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1}).
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:56:20'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:23' prior: 50661683!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:56:24'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:28' prior: 50661701!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:56:29'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:33' prior: 50661719!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:56:34'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:38' prior: 50661737!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:56:39'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:42' prior: 50661755!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}).
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:56:43'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:47' prior: 50661773!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:56:47'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:51' prior: 50661792!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:56:52'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:56:56' prior: 50661812!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:56:57'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:00' prior: 50661835!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:57:01'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:05' prior: 50661858!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:57:06'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:10' prior: 50661879!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:57:11'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:16' prior: 50661899!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:57:16'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:21' prior: 50661923!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:57:22'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:26' prior: 50661945!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:57:27'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:32' prior: 50661964!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}).
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:57:32'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:36' prior: 50661984!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:57:37'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:57:42'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:52' prior: 50662144!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:57:53'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:57:58' prior: 50662161!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:57:59'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:58:03' prior: 50662179!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:58:04'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 18:58:08' prior: 50662192!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}).
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:58:08'!
PASSED!

----SNAPSHOT----(11 December 2023 18:58:46) CuisUniversity-5981.image priorSource: 10610715!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:59:04' prior: 50663425!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aTeam! !
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:59:14' prior: 50664104!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aFirstTeam! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 18:59:15'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 18:59:15'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 18:59:15'!
PASSED!
!PlayerTeam methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:59:34' prior: 50658203!
initializeWithPlayers: aCollectionOfPlayers 

	players := CircularReadStream on: (aCollectionOfPlayers  players )moving: NullUnit new. ! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 18:59:36'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 18:59:36'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 18:59:36'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 18:59:36'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:59:36'!
ERROR!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:59:36'!
ERROR!
!PlayerTeam methodsFor: 'initialization' stamp: 'cc 12/11/2023 18:59:51' prior: 50664274!
initializeWithPlayers: aCollectionOfPlayers 

	players := CircularReadStream on: (aCollectionOfPlayers  )moving: NullUnit new. ! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 18:59:52'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:01:21' prior: 50658255!
totalTeamLivesIs: possibleLives
	
	| totalLives elements |
	totalLives := 0.
	elements := players content.
	elements  do: [:aPlayer | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:01:24'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:02:29' prior: 50664315!
totalTeamLivesIs: possibleLives
	
	| totalLives elements |
	totalLives := 0.
	elements := players collection.
	elements  do: [:aPlayer | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:02:29'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:03:36' prior: 50664329!
totalTeamLivesIs: possibleLives
	
	
	^5.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:03:39'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:03:49' prior: 50664343!
totalTeamLivesIs: possibleLives
	
	
	^3.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:03:50'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:04:01'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:04:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:04:04'!
ERROR!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 19:04:19' prior: 50660683!
currentPlayer

	^ firstTeam currentPlayer! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:04:20'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:04:22'!
currentPlayer
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:04:25' prior: 50664510!
currentPlayer
	^players current! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:04:26'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:04:27'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:28'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:29'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:30'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:30'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:04:30'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:04:30'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:04:30'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:04:31'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:04:32'!
PASSED!

----SNAPSHOT----(11 December 2023 19:04:35) CuisUniversity-5981.image priorSource: 10638404!

----SNAPSHOT----(11 December 2023 19:07:27) CuisUniversity-5981.image priorSource: 10654888!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:08:32'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: secondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam
! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50662419!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 0 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663828!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50662406!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 startingAt: 1@2 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663898!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663749!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663711!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663985!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663943!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663876!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663660!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663692!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50664077!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663611!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663852!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663628!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: {}.
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663676!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50659350!
assertCannotSharePositionsFor: elements

	self
		should: [ MineField 
			extent: 3@3 
			startingAt: 1@1 
			lives: 2 
			elements: elements
			randomizingWith: self firstTeam: {} secondTeam: {}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsShouldNotSharePositionsErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663966!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50664044!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50664005!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50663807!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50662773!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 0@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 3@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:32' prior: 50662393!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663919!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50664060!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663730!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50662938!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: {}]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50659524!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 3@3 } randomizingWith: self firstTeam: {} secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663768!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50664026!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663787!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50662576!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1.5 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663595!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: {}.
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663644!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: {}.
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663247!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			startingAt: 1@1 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: {} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:08:33' prior: 50663408!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: {}.
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !

!methodRemoval: MineField class #extent:startingAt:lives:elements:randomizingWith:firstTeam: stamp: 'cc 12/11/2023 19:08:33'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam      
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam
!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:09:21'!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: secondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aFirstTeam! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:09:21' prior: 50664622!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: secondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: secondTeam
! !

!methodRemoval: MineField #initializeExtent:startingAt:lives:elements:randomizingWith:firstTeam: stamp: 'cc 12/11/2023 19:09:21'!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam   
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aFirstTeam!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:09:30'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:09:30'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:10:13' prior: 50665198!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			startingAt: 1@1 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:10:38' prior: 50665015!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 
			startingAt: 1@1 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:10:52' prior: 50664682!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@2 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:07' prior: 50664648!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 0 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:19' prior: 50665155!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 1.5 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:25' prior: 50664993!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 0@1 } secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 3@1 } secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:31' prior: 50665080!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:35' prior: 50665216!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:42' prior: 50665169!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:45' prior: 50664855!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:48' prior: 50664890!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:51' prior: 50665184!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:54' prior: 50664803!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:11:59' prior: 50664904!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:04' prior: 50664817!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:08' prior: 50664729!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:11' prior: 50665064!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:17' prior: 50664712!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:20' prior: 50665107!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 3 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:23' prior: 50665138!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:27' prior: 50664976!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:30' prior: 50664662!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:33' prior: 50664870!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:37' prior: 50664784!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		lives: 2 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:40' prior: 50664695!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:43' prior: 50665029!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:12:48' prior: 50664763!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:21' prior: 50664932!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:23' prior: 50664746!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 2 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:29' prior: 50665123!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:34' prior: 50664948!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:38' prior: 50665049!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:40' prior: 50664833!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 lives: 1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:13:46' prior: 50665094!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 3@3 } randomizingWith: self firstTeam: {} secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:13:46'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:13:46'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:15:25' prior: 50665271!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 19:15:53'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:15:52' prior: 50665255!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aFirstTeam.
	secondTeam1 := aSecondTeam.! !

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 19:16:25'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:16:25' prior: 50666211!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition.
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:16:33'!
PASSED!

----SNAPSHOT----(11 December 2023 19:16:36) CuisUniversity-5981.image priorSource: 10654982!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:19:24'!
test41

	self
		should: [ MineField extent: 2@2 
			elements: { } 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@2 })
			secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 2@1 }).  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField firstTeamPlayersMustStartAtLowerRow! !

!testRun: #MineFieldTest #test41 stamp: 'cc 12/11/2023 19:19:32'!
ERROR!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:19:36'!
firstTeamPlayersMustStartAtLowerRow
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFirstTeamPlayersMustStartAtLowerRow! !

!methodRemoval: MineFieldTest #test41 stamp: 'cc 12/11/2023 19:20:29'!
test41

	self
		should: [ MineField extent: 2@2 
			elements: { } 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 1@2 })
			secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives: 1 aPosition: 2@1 }).  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField firstTeamPlayersMustStartAtLowerRow!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:20:32'!
PASSED!

!methodRemoval: MineField class #extent:elements:randomizingWith:firstTeam: stamp: 'cc 12/11/2023 19:20:44'!
extent: aRenameMe1 elements: aRenameMe2 randomizingWith: aMineFieldTest firstTeam: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeExtent: aRenameMe1 elements: aRenameMe2 randomizingWith: aMineFieldTest firstTeam: aRenameMe3 !

----SNAPSHOT----(11 December 2023 19:20:50) CuisUniversity-5981.image priorSource: 10711819!

!methodRemoval: MineField class #firstTeamPlayersMustStartAtLowerRow stamp: 'cc 12/11/2023 19:20:57'!
firstTeamPlayersMustStartAtLowerRow
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFirstTeamPlayersMustStartAtLowerRow!

----SNAPSHOT----(11 December 2023 19:21:30) CuisUniversity-5981.image priorSource: 10718088!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:22:06' prior: 50665491!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@2 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@2 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:22:07'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:22:07'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:24:02' prior: 50666175!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements.
	self assertIsValidNumberOfLives: aNumberOfLives.
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:24:04'!
ERROR!
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:24:07'!
assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements 
	self shouldBeImplemented.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:25:01' prior: 50666797!
assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements 
	firstTeam allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements.! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:25:03'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:25:26' prior: 50666606!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@2 
			lives: 1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@2 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:25:27'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:25:30'!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	self shouldBeImplemented.! !

!classDefinition: #PlayerTeam category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 19:27:49'!
Object subclass: #PlayerTeam
	instanceVariableNames: 'players originalPlayers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!PlayerTeam methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:27:48' prior: 50664304!
initializeWithPlayers: aCollectionOfPlayers 

	players := CircularReadStream on: (aCollectionOfPlayers  )moving: NullUnit new.
	originalPlayers := aCollectionOfPlayers .! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:27:57'!
FAILURE!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:27:57'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:27:57'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:27:59'!
FAILURE!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:29:52' prior: 50666834!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	originalPlayers do: [ :player | (player currentPosition between: 1@1 and: anExtent x @ 1) ifFalse: [self error: MineField invalidStartingPositionErrorDescription ]]! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:30:49' prior: 50667001!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	originalPlayers do: [ :player | (player currentPosition between: 1@1 and: anExtent x @ 1) ifFalse: [self error: MineField invalidStartingPositionErrorDescription ].
		(aCollectionOfFieldElements anySatisfy: [ :aFieldElement | aFieldElement isAt: player currentPosition ]) 
		ifTrue: [self error: MineField invalidStartingPositionErrorDescription ]
		].
	! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:30:50'!
PASSED!

----SNAPSHOT----(11 December 2023 19:31:01) CuisUniversity-5981.image priorSource: 10718475!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:31:11'!
ERROR!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:31:11'!
ERROR!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:31:11'!
ERROR!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:31:11'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:31:11'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:31:16'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:31:39' prior: 50665506!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 0 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 } )
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:31:40'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:31:54' prior: 50665521!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 1.5 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:31:55'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:32:05' prior: 50665536!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 0@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: {BayonetPlayer lives:1  aPosition: 3@1 } secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:32:06'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:32:16' prior: 50667216!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 0@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 lives: 1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 3@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:32:17'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:32:23' prior: 50665560!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 lives: 1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:32:24'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:32:27'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:33:43' prior: 50666765!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements.
	"self assertIsValidNumberOfLives: aNumberOfLives."
	self assertTeamHasValidNumberOfLives: firstTeam .
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:33:46'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:33:48'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:33:51'!
ERROR!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:33:51'!
ERROR!
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:33:55'!
assertTeamHasValidNumberOfLives: firstTeam 
	self shouldBeImplemented.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:34:34' prior: 50667476!
assertTeamHasValidNumberOfLives: firstTeam 
	firstTeam allPlayersHaveValidLives.! !

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:34:36'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:34:39'!
allPlayersHaveValidLives
	self shouldBeImplemented.! !
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:36:05' prior: 50667178!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 0 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:0  aPosition: 1@1 } )
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidNumberOfLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:36:06'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:36:12' prior: 50667496!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 0 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:0  aPosition: 1@1 } )
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:36:12'!
FAILURE!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:36:12'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:36:12'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:36:12'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'cc 12/11/2023 19:36:24' prior: 50667197!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			lives: 1.5 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1.5  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:36:25'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:36:25'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:36:36'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:36:36'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:36:49'!
ERROR!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:37:23' prior: 50667432!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements.
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:37:27' prior: 50667976!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:37:56'!
assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	firstTeam allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:37:56' prior: 50668008!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!methodRemoval: MineField class #assertFirstTeam:isInBoundsFor:anNotUsedBy: stamp: 'cc 12/11/2023 19:37:56'!
assertFirstTeam: firstTeam isInBoundsFor: anExtent anNotUsedBy: aCollectionOfFieldElements 
	firstTeam allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements.!

----SNAPSHOT----(11 December 2023 19:38:52) CuisUniversity-5981.image priorSource: 10732176!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:38:59' prior: 50668049!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			lives: aNumberOfLives 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:39:01'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:39:01'!
PASSED!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:39:30' prior: 50666238!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:39:32'!
PASSED!

----SNAPSHOT----(11 December 2023 19:39:55) CuisUniversity-5981.image priorSource: 10766030!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:40:23'!
initializeExtent: anExtent startingAt: aStartingPosition elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:23' prior: 50668093!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!methodRemoval: MineField #initializeExtent:startingAt:lives:elements:randomizingWith:firstTeam:secondTeam: stamp: 'cc 12/11/2023 19:40:23'!
initializeExtent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:40:36'!
extent: anExtent startingAt: aStartingPosition elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50666017!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 startingAt: 1@1 elements: { LowPowerMine at: 3@3 } randomizingWith: self firstTeam: {} secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665662!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 2@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665932!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665815!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665743!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665759!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665620!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665648!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665966!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665575!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665676!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50664918!
assertCannotSharePositionsFor: elements

	self
		should: [ MineField 
			extent: 3@3 
			startingAt: 1@1 
			elements: elements
			randomizingWith: self firstTeam: {} secondTeam: {}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsShouldNotSharePositionsErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50666816!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@2 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@2 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665590!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 2@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665855!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50667272!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 startingAt: 1@1 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50667515!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:0  aPosition: 1@1 } )
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665894!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665794!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665726!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665873!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665476!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 
			startingAt: 1@1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665692!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50667244!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 startingAt: 0@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 0@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 startingAt: 3@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 3@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665709!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665995!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 startingAt: 1@1 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50667674!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 
			startingAt: 1@1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1.5  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665980!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665950!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665915!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 startingAt: 1@1 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665605!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665457!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			startingAt: 1@1 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665836!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		startingAt: 1@1 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665776!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50664961!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 startingAt: 1@1 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:40:36' prior: 50665634!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 startingAt: 1@1 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !

!methodRemoval: MineField class #extent:startingAt:lives:elements:randomizingWith:firstTeam:secondTeam: stamp: 'cc 12/11/2023 19:40:36'!
extent: anExtent startingAt: aStartingPosition lives: aNumberOfLives elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			startingAt: aStartingPosition
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:40:38'!
PASSED!

----SNAPSHOT----(11 December 2023 19:40:41) CuisUniversity-5981.image priorSource: 10776685!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 19:41:17'!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:17' prior: 50668491!
extent: anExtent startingAt: aStartingPosition elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!methodRemoval: MineField #initializeExtent:startingAt:elements:randomizingWith:firstTeam:secondTeam: stamp: 'cc 12/11/2023 19:41:17'!
initializeExtent: anExtent startingAt: aStartingPosition elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:41:20'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:41:20'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:41:36'!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668885!
test16LowPowerMineExplotesOnlyOnce

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668567!
test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 5@5 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 3@3)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668902!
test06PlayerMustStartInsideBoard

	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 0@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 3@1 }) secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription 
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668549!
test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668535!
test14PlayerStaysOnBoardWhenMovingRight

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668521!
test40ElementsMustBeInsideBoard

	self
		should: [ MineField extent: 2@2 elements: { LowPowerMine at: 3@3 } randomizingWith: self firstTeam: {} secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsMustBeInsideBoardErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668773!
test04PlayerLivesMustBeStrictlyPositive

	self 
		should: [ MineField extent: 2@2 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:0  aPosition: 1@1 } )
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669116!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668636!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668664!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668739!
test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668967!
test05PlayerLivesMustBeInteger

	self 
		should: [ MineField extent: 2@2 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1.5  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayerTeam invalidPlayerWithInvalidLivesErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669065!
test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField 
		extent: 3@3 
		elements: { 
			ArmorRack at: 2@1 with: HeavyArmor new. 
			LowPowerMine at: 2@2.
			LowPowerMine at: 1@2 } 
		randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerLeft.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668757!
test07PlayerMustStartAtAnEmptyPosition

	self 
		should: [ MineField extent: 2@2 elements: { LowPowerMine at: 1@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription.
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668605!
test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(10 10).
	mineField :=  MineField extent: 2@2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@1)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668724!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668927!
test17PlayerLoosesLiveWhenStepsIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 0.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669102!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: {}.
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668870!
test02BoardExtentYMustBeGreaterOrEqualTo2

	self 
		should: [ MineField extent: 2@1 
			elements: #() 
			randomizingWith: self 
			firstTeam: {BayonetPlayer lives:1  aPosition: 1@1 } 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668696!
assertCannotSharePositionsFor: elements

	self
		should: [ MineField 
			extent: 3@3 
			elements: elements
			randomizingWith: self firstTeam: {} secondTeam: {}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField fieldElementsShouldNotSharePositionsErrorDescription! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668811!
test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 5@5 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	
	
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668789!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 1@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668998!
test34PlayerDoesNotWinWhenAtTopRowButWithoutLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: {LowPowerMine at: 1@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668588!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 1@2)! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669014!
test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 elements: { Tunnel at: 2@1 and: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668709!
test03PlayerMustStartAtRow1

	self 
		should: [ MineField extent: 2@2 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers:{BayonetPlayer lives:1  aPosition: 1@2 }) 
			secondTeam: (PlayerTeam withPlayers: {})  ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669084!
test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: { 
		ArmorRack at: 2@1 with: LightArmor new. LowPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668650!
test35PlayerDoesNotWinWhenNotAtTopRow

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	self deny: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668849!
test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 2@2 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. HighPowerMine at: 2@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp.
	
	self assert: mineField playerLives equals: 2.
	self assert: (mineField isPlayerAt: 2@2)
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668832!
test18HighPowerMineExplotesOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(0 0).
	mineField :=  MineField extent: 2@2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerLeft; movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668983!
test36GameIsOverWhenNoLivesLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: {LowPowerMine at: 2@1} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight.
	
	self assert: mineField isOver.
	self deny: mineField hasPlayerWon.
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669046!
test01BoardExtentXMustBeGreaterOrEqualTo2

	"No hago una aserción de creación inválida de instancia porque no agregaría mucho valor - Hernan"
	self 
		should: [ MineField extent: 1@2 
			elements: #() 
			randomizingWith: self 
			firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
			secondTeam: (PlayerTeam withPlayers: {}) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidBoardExtentErrorDescription
		
		! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668622!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (mineField isPlayerAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668679!
test15PlayerLoosesLiveWhenStepsIntoLowPowerMine

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: { LowPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: mineField playerLives equals: 1.
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50668944!
test37CannotMoveWhenGameIsOver

	| mineField |
	
	mineField :=  MineField extent: 3@3 elements: {LowPowerMine at: 2@2} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	mineField movePlayerRight;movePlayerUp.
	
	self 
		assertIsOverWhenMoving: [mineField movePlayerUp ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerDown ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerRight ] in: mineField;
		assertIsOverWhenMoving: [ mineField movePlayerLeft ] in: mineField
		
	! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:41:36' prior: 50669031!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self deny: (mineField isPlayerAt: 1@1).
	self assert: (mineField isPlayerAt: 2@1).! !

!methodRemoval: MineField class #extent:startingAt:elements:randomizingWith:firstTeam:secondTeam: stamp: 'cc 12/11/2023 19:41:36'!
extent: anExtent startingAt: aStartingPosition elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	"self assert: aStartingPosition isInBoundsFor: anExtent andNotUsedBy: aCollectionOfFieldElements."
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:41:38'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:41:38'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:41:49' prior: 50669508!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:41:55' prior: 50670296!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 19:41:57'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 19:41:57'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 19:41:57'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 19:41:57'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:41:57'!
ERROR!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:41:57'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 18:20:29' prior: 50664352!
totalTeamLivesIs: possibleLives
	
	| totalLives |
	totalLives := 0.
	players  do: [:aPlayer :lives | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:42:51' prior: 50670369!
totalTeamLivesIs: possibleLives
	
	
	| totalLives |
	totalLives := 0.
	originalPlayers  do: [:aPlayer :lives | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:42:53'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:43:01' prior: 50670378!
totalTeamLivesIs: possibleLives
	
	
	| totalLives |
	totalLives := 0.
	originalPlayers  do: [:aPlayer | totalLives := totalLives + aPlayer livesLeft ].
	^possibleLives = totalLives.
	! !

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:43:01'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:43:05'!
PASSED!

----SNAPSHOT----(11 December 2023 19:43:11) CuisUniversity-5981.image priorSource: 10804835!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:43:21'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:43:21'!
PASSED!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:44:10' prior: 50667012!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | (player currentPosition between: 1@1 and: anExtent x @ 1) 
					ifFalse: [self error: MineField invalidStartingPositionErrorDescription ].
		
		(aCollectionOfFieldElements anySatisfy: [ :aFieldElement | aFieldElement isAt: player currentPosition ]) 
					ifTrue: [self error: MineField invalidStartingPositionErrorDescription ]
		].
	! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:44:35'!
player: player isInBounds: anExtent

	^ (player currentPosition between: 1@1 and: anExtent x @ 1) 
					ifFalse: [self error: MineField invalidStartingPositionErrorDescription ]! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:44:35' prior: 50670570!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | self player: player isInBounds: anExtent.
		
		(aCollectionOfFieldElements anySatisfy: [ :aFieldElement | aFieldElement isAt: player currentPosition ]) 
					ifTrue: [self error: MineField invalidStartingPositionErrorDescription ]
		].
	! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:44:57'!
elements: aCollectionOfFieldElements areNotInSamePositionAs: player

	^ (aCollectionOfFieldElements anySatisfy: [ :aFieldElement | aFieldElement isAt: player currentPosition ]) 
					ifTrue: [self error: MineField invalidStartingPositionErrorDescription ]! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:44:57' prior: 50670596!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | self player: player isInBounds: anExtent.
		
		self elements: aCollectionOfFieldElements areNotInSamePositionAs: player
		].
	! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:45:07' prior: 50670622!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | self player: player isInBounds: anExtent.
							self elements: aCollectionOfFieldElements areNotInSamePositionAs: player].
	! !

!testRun: #PlayerTeamTest #test01TeamCannotStartWithPlayerWithNoLives stamp: 'cc 12/11/2023 19:45:11'!
PASSED!

!testRun: #PlayerTeamTest #test02TeamCannotStartWithPlayerWithNegativeLives stamp: 'cc 12/11/2023 19:45:11'!
PASSED!

!testRun: #PlayerTeamTest #test03TeamCannotStartWithPlayerWithNonIntegerLives stamp: 'cc 12/11/2023 19:45:11'!
PASSED!

!testRun: #PlayerTeamTest #test04TeamCannotStartWithPlayersInSamePosition stamp: 'cc 12/11/2023 19:45:11'!
PASSED!

!testRun: #PlayerTeamTest #test05TeamIsCreatedWithValidPlayersWithValidLives stamp: 'cc 12/11/2023 19:45:11'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:45:13'!
PASSED!

----SNAPSHOT----(11 December 2023 19:45:15) CuisUniversity-5981.image priorSource: 10840785!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 19:46:45'!
test41TeamsMustHaveSameLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2  aPosition: 1@1 }) .
	! !
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 19:47:37' prior: 50670805!
test41TeamsMustHaveSameLives
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2  aPosition: 1@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidTeamLivesErrorDescription.
	
	! !

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:47:47'!
ERROR!
!MineField class methodsFor: 'error descriptions' stamp: 'cc 12/11/2023 19:47:51'!
invalidTeamLivesErrorDescription
	self shouldBeImplemented.! !
!MineField class methodsFor: 'error descriptions' stamp: 'cc 12/11/2023 19:47:59' prior: 50670836!
invalidTeamLivesErrorDescription
	^' Team must have same amount of lives'! !

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:48:00'!
FAILURE!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:49:10' prior: 50670321!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam .
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:49:11'!
ERROR!
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:49:14'!
assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam 
	self shouldBeImplemented.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:50:31' prior: 50670882!
assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam 
	(firstTeam totalLives = aSecondTeam totalLives) ifFalse: [ self error: self invalidTeamLivesErrorDescription]! !

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:50:33'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:50:36'!
totalLives
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:50:51' prior: 50670901!
totalLives
	| totalLives |
	totalLives := 0.
	originalPlayers  do: [:aPlayer | totalLives := totalLives + aPlayer livesLeft ].
	^totalLives ! !

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:50:51'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:50:51'!
PASSED!

!testRun: #MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:50:51'!
PASSED!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 19:53:54'!
test41FirstTeamMustBeInFirstRow
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@2 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField firstTeamMustBeInFirstRowErrorDescription.
	
	! !

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:53:56'!
ERROR!
!MineField class methodsFor: 'error descriptions' stamp: 'cc 12/11/2023 19:54:00'!
firstTeamMustBeInFirstRowErrorDescription
	self shouldBeImplemented.! !
!MineField class methodsFor: 'error descriptions' stamp: 'cc 12/11/2023 19:54:06' prior: 50671078!
firstTeamMustBeInFirstRowErrorDescription
	^'First team must be in first row'! !

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:54:07'!
FAILURE!

!methodRemoval: MineFieldTest #test41TeamsMustHaveSameLives stamp: 'cc 12/11/2023 19:55:08'!
test41TeamsMustHaveSameLives
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2  aPosition: 1@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidTeamLivesErrorDescription.
	
	!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 19:55:15' prior: 50671059!
test41FirstTeamMustBeInFirstRow
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@2 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField  invalidStartingPositionErrorDescription.
	
	! !

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:55:16'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:55:16'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:55:16'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:55:30' prior: 50670851!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	"self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam ."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:55:32'!
PASSED!

----SNAPSHOT----(11 December 2023 19:55:37) CuisUniversity-5981.image priorSource: 10852840!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 19:56:00'!
test41SecondTeamMustBeInLastRow
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField  invalidStartingPositionErrorDescription.
	
	! !

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 19:56:03'!
FAILURE!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 19:56:35' prior: 50671270!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertFirstTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	"self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam ."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 19:56:38'!
ERROR!
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:56:44'!
assertFirstTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:57:25'!
allPlayersAreInBoundsInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | self player: player isInBounds: anExtent.
							self elements: aCollectionOfFieldElements areNotInSamePositionAs: player].
	! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:57:25' prior: 50668039!
assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	firstTeam allPlayersAreInBoundsInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.! !

!methodRemoval: PlayerTeam #allPlayersAreInBounds:andNotUsedBy: stamp: 'cc 12/11/2023 19:57:25'!
allPlayersAreInBounds: anExtent andNotUsedBy: aCollectionOfFieldElements 
	
	originalPlayers do: [ :player | self player: player isInBounds: anExtent.
							self elements: aCollectionOfFieldElements areNotInSamePositionAs: player].
	!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 19:57:27'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 19:57:27'!
PASSED!

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 19:57:27'!
FAILURE!
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:03' prior: 50671499!
assertFirstTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	aSecondTeam allPlayersAreInBoundsInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:15'!
assertSecondTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	aSecondTeam allPlayersAreInBoundsInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:15' prior: 50671464!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertSecondTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	"self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam ."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!methodRemoval: MineField class #assertFirstTeam:isInBoundsForAndInLastRow:andNotUsedBy: stamp: 'cc 12/11/2023 19:58:15'!
assertFirstTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	aSecondTeam allPlayersAreInBoundsInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.!

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 19:58:20'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:24'!
allPlayersAreInBoundsInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:46' prior: 50671748!
allPlayersAreInBoundsInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements 
	originalPlayers do: [ :player | self player: player isInBoundsForLastRow: anExtent.
							self elements: aCollectionOfFieldElements areNotInSamePositionAs: player].! !

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 19:58:48'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 19:58:51'!
player: player isInBoundsForLastRow: anExtent 
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:01:45' prior: 50671769!
player: player isInBoundsForLastRow: anExtent 
	^ (player currentPosition between: anExtent x @ 1 and: anExtent) 
					ifFalse: [self error: MineField invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:01:45'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:01:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:01:45'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:02:07' prior: 50669813!
test33PlayerWinsWhenAtTopRowAndLeftLives

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: {} randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers:{}).
	
	mineField movePlayerUp.
	
	self assert: mineField isOver.
	self assert: mineField hasPlayerWon.
	! !

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:02:08'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:02:10'!
PASSED!

----SNAPSHOT----(11 December 2023 20:02:41) CuisUniversity-5981.image priorSource: 10873301!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:04:44'!
test42SecondTeamMustBeInLastRow
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField  invalidStartingPositionErrorDescription.
	
	! !

!methodRemoval: MineFieldTest #test41SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:04:44'!
test41SecondTeamMustBeInLastRow
	
	self 
		should: [ MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }). ]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField  invalidStartingPositionErrorDescription.
	
	!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:10:25'!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@1 }). 
				
	battleField movePlayerUp.
	battleField movePlayerUp.
	
	self assert: ((battleField firstTeam) first isAt: 2@1).
	self assert: ((battleField secondTeam) first isAt: 2@1).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:10:35'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:10:41'!
firstTeam
	self shouldBeImplemented.
	^firstTeam! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:10:45' prior: 50672157!
firstTeam
	^firstTeam! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:10:47'!
ERROR!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:14:26' prior: 50672136!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@1 }). 
				
	battleField movePlayerUp.
	battleField movePlayerUp.
	
	self assert: ((battleField firstTeam) firstPlayer isAt: 2@1).
	self assert: ((battleField secondTeam) firstPlayer isAt: 2@1).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:14:29'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:14:33'!
firstPlayer
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:14:44' prior: 50672192!
firstPlayer
	^players current.! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:14:45'!
ERROR!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:15:08' prior: 50672170!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@1 }). 
				
	battleField movePlayerUp.
	battleField movePlayerUp.
	
	self assert: ((battleField firstTeam) firstPlayer isPlayerAt: 2@1).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 2@1).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:15:09'!
FAILURE!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:16:27'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 20:16:26' prior: 50664503!
currentPlayer

	(turn = #first) ifTrue: [	^ firstTeam currentPlayer].
! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:16:28'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 20:16:51' prior: 50669305!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	turn := #first.! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:16:52'!
FAILURE!
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:18:02' prior: 50651331!
movePlayerUp
	
	self movePlayer: 0@1.
	turn := #second! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:18:03'!
ERROR!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:19:15'!
ERROR!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:19:25'!
ERROR!
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:23:27' prior: 50672265!
movePlayerUp
	
	(turn =#first ) ifTrue: [firstTeam movePlayer: 0@1 in: self].
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:23:28'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:23:38'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:23:41'!
movePlayer: aRenameMe1 in: aMineField 
	self shouldBeImplemented.! !
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:18:02' prior: 50672280!
movePlayerUp
	
	self movePlayer: 0@1.
	turn := #second! !
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:25:14' prior: 50672297!
movePlayerUp
	
	self movePlayer: 0@1.
	turn := #second
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:25:15'!
ERROR!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 20:25:51' prior: 50672237!
currentPlayer

	(turn = #first) ifTrue: [	^ firstTeam currentPlayer].
	(turn = #second) ifTrue: [	^ secondTeam currentPlayer].
! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:25:52'!
FAILURE!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:28:18' prior: 50672205!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	battleField movePlayerDown.
	
	self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:28:19'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 20:29:15' prior: 50651290!
isOver
	
	(turn := #first) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]
	"(turn := #second) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]"! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:29:15'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 20:29:27' prior: 50672343!
isOver
	
	(turn := #first) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]
	^false
	"(turn := #second) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]"! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:29:28'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 20:29:32' prior: 50672355!
isOver
	
	(turn := #first) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]].
	^false
	"(turn := #second) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]"! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:29:33'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 20:29:40' prior: 50672367!
isOver
	
	(turn = #first) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]].
	^false
	"(turn := #second) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]]"! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:29:40'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:30:25'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:30:28'!
secondTeam
	self shouldBeImplemented.
	^secondTeam! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:30:30' prior: 50672395!
secondTeam
	^secondTeam! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:30:31'!
PASSED!

----SNAPSHOT----(11 December 2023 20:30:42) CuisUniversity-5981.image priorSource: 10894438!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:30:44'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:30:44'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:30:45'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:30:45'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:30:45'!
FAILURE!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:30:45'!
FAILURE!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:30:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:30:52'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:01'!
isPlayerAt: mineField

	^ mineField isPlayerAt: 1@1! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:01' prior: 50669782!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (self isPlayerAt: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:02' prior: 50670059!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:02' prior: 50669656!
test12PlayerStaysOnBoardWhenMovingDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:02' prior: 50669684!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (mineField isPlayerAt: 1@2).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:02' prior: 50669670!
test13PlayerStaysOnBoardWhenMovingLeft

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self assert: (self isPlayerAt: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:02' prior: 50670111!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (mineField isPlayerAt: 2@1).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:34:53' prior: 50672563!
isPlayerAt: mineField

	^ (mineField firstTeam)  firstPlayer isPlayerAt: 1@1! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:34:59'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:34:59'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:34:59'!
FAILURE!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:34:59'!
FAILURE!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:34:59'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:34:59'!
PASSED!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:35:21'!
isPlayerAt22: mineField

	^ mineField isPlayerAt: 1@2! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:35:21' prior: 50669874!
test27ArmorIsWeardOnlyOnce

	| mineField |
	
	self randomPositionIncrementsAre: #(3 3).
	mineField :=  MineField extent: 3@3 elements: { 
		ArmorRack at: 2@1 with: HeavyArmor new. 
		HighPowerMine at: 2@2 .
		LowPowerMine at: 1@2 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:2 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight; movePlayerUp; movePlayerDown; movePlayerLeft; movePlayerUp.
	
	self assert: mineField playerLives equals: 1.
	self assert: (self isPlayerAt22: mineField)
	! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:35:22' prior: 50672611!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (self isPlayerAt22: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:35:22' prior: 50669910!
test19PlayerFliesWhenSteppingIntoHighPowerMine

	| mineField |
	
	self randomPositionIncrementsAre: #(-1 1).
	mineField :=  MineField extent: 2@2 elements: { HighPowerMine at: 2@1 } randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:3 aPosition: 1@1}) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self assert: (self isPlayerAt22: mineField)! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 20:35:47' prior: 50672801!
isPlayerAt22: mineField

	^ (mineField firstTeam)  firstPlayer isPlayerAt: 1@2! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:35:52'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:35:52'!
FAILURE!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:35:52'!
FAILURE!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:35:52'!
FAILURE!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:35:52'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:37:11'!
ERROR!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:38:28'!
PASSED!
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:39:29' prior: 50672302!
movePlayerUp
	
	turn movePlayer: 0@1.
	turn := turn nextTeam.
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:39:33'!
ERROR!

!classDefinition: #FirstTeamTurn category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:40:49'!
Object subclass: #FirstTeamTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 20:40:45' prior: 50672246!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	turn := FirstTeamTurn new.! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:40:51'!
ERROR!
!FirstTeamTurn methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:41:10'!
movePlayer: aRenameMe1 
	self shouldBeImplemented.! !
!MineField methodsFor: 'moving' stamp: 'cc 12/11/2023 20:42:39' prior: 50673010!
movePlayerUp
	
	self movePlayer: 0@1.
	! !
!MineField methodsFor: 'testing' stamp: 'cc 12/11/2023 20:43:44' prior: 50672379!
isOver
	
	(firstTeam includes: self currentPlayer ) ifTrue: [^self isPlayerAtTopRow or: [self isPlayerStillAlive not]].
	^false
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:43:45'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:43:50'!
includes: aRenameMe1 
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:44:04' prior: 50673065!
includes: aPlayer 
	^originalPlayers includes: aPlayer.! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:44:04'!
ERROR!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:44:10'!
ERROR!
!MineField methodsFor: 'player' stamp: 'cc 12/11/2023 20:45:14' prior: 50672310!
currentPlayer

	^ firstTeam currentPlayer.
! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:45:18'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:45:28'!
FAILURE!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:46:44'!
PASSED!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:46:44'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:46:44'!
FAILURE!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:47:03' prior: 50672321!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	battleField movePlayerDown.
	
	"self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2)."
				
	
	! !

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:47:04'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

!testRun: #MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:47:06'!
PASSED!

----SNAPSHOT----(11 December 2023 20:47:37) CuisUniversity-5981.image priorSource: 10904196!

!classDefinition: #GunPlayer category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:49:42'!
Object subclass: #GunPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:49:37'!
test43GunPlayerCannotUseArmor
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #(HeavyArmor ) randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {GunPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	
	"self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2)."
				
	
	! !

!methodRemoval: MineFieldTest #test43PlayersInBothTeamsMoveCorrectly stamp: 'cc 12/11/2023 20:50:10'!
test43PlayersInBothTeamsMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	battleField movePlayerDown.
	
	"self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2)."
				
	
	!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:52:46'!
test43PlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {GunPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	battleField movePlayerDown.
	
	self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2).
				
	
	! !

!methodRemoval: MineFieldTest #test43GunPlayerCannotUseArmor stamp: 'cc 12/11/2023 20:52:49'!
test43GunPlayerCannotUseArmor
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #(HeavyArmor ) randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {GunPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	
	"self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2)."
				
	
	!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 20:52:56'!
ERROR!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 20:53:04' prior: 50673467!
test43PlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	battleField movePlayerDown.
	
	self assert: ((battleField firstTeam) firstPlayer isPlayerAt:  1@2).
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2).
				
	
	! !

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:55:18'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam turn lastPlayerMoved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:55:19'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam turn lastPlayerMoved currentPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 20:55:15' prior: 50660630!
movePlayerTo: newPosition

	self currentPlayer moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self.
	
	lastPlayerMoved := self currentPlayer.
	currentPlayer := self nextPlayer.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 20:55:23'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:55:27'!
nextPlayer
	self shouldBeImplemented.! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:55:48' prior: 50673560!
nextPlayer
	^secondTeam current.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 20:55:49'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 20:56:07' prior: 50673565!
nextPlayer
	^secondTeam currentPlayer .! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 20:56:08'!
FAILURE!

!classDefinition: #MineField category: 'ISW1-2023-2C-2doParcialRecu' stamp: 'cc 12/11/2023 20:58:53'!
Object subclass: #MineField
	instanceVariableNames: 'boardExtent fieldElements random player firstTeam secondTeam turn lastPlayerMoved currentPlayer allPlayers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcialRecu'!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 20:58:50' prior: 50673027!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	
	allPlayers := self mixPlayersFrom: aFirstTeam and: aSecondTeam.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 20:59:04'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 20:59:24'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 20:59:24'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:01:52'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:01:52'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:01:52'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:01:52'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 21:01:59' prior: 50673591!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:02:00'!
FAILURE!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:02:06'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:02:06'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:02:07'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:02:07'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:02:07'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:02:07'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:02:07'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:02:07'!
PASSED!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:03:09' prior: 50660604!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	turn isOver ifTrue: [^aBlock value].
	"self isOver ifTrue: [ ^aBlock value ]."
	
	newPosition := self currentPlayer currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:03:10'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 21:03:38' prior: 50673763!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	
	turn:= FirstTeamTurn new.
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:03:39'!
ERROR!
!FirstTeamTurn methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:03:44'!
isOver
	self shouldBeImplemented.! !
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:05:35' prior: 50673921!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	turn isOver ifTrue: [^aBlock value].
	"self isOver ifTrue: [ ^aBlock value ]."
	currentPlayer := self currentPlayer.
	
	newPosition := currentPlayer currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:05:35'!
ERROR!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:05:43' prior: 50673959!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [^aBlock value].
	"self isOver ifTrue: [ ^aBlock value ]."
	currentPlayer := self currentPlayer.
	
	newPosition := currentPlayer currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:05:44'!
FAILURE!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 21:06:40' prior: 50673507!
test43PlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	self assert: ((battleField currentPlayer) isPlayerAt: 1@2).
	
	battleField movePlayerDown.
	self assert: ((battleField secondTeam) firstPlayer isPlayerAt: 3@2).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:06:41'!
FAILURE!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 21:06:56' prior: 50673991!
test43PlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	self assert: ((battleField currentPlayer) isPlayerAt: 1@2).
	
	battleField movePlayerDown.
	self assert: ((battleField currentPlayer) isPlayerAt: 3@2).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:06:57'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:07:22' prior: 50673547!
movePlayerTo: newPosition

	currentPlayer moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self.
	
	lastPlayerMoved := self currentPlayer.
	currentPlayer := self nextPlayer.! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:08:45' prior: 50673572!
nextPlayer
	
	(firstTeam includes: lastPlayerMoved) ifTrue: [secondTeam currentPlayer . firstTeam advancePlayer].
	(secondTeam includes: lastPlayerMoved) ifTrue: [firstTeam currentPlayer. secondTeam advancePlayer].! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:08:48'!
ERROR!
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:09:03'!
advancePlayer
	self shouldBeImplemented.! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:09:20' prior: 50674058!
advancePlayer
	players next.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:09:20'!
FAILURE!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:11:40' prior: 50674045!
nextPlayer
	
	(firstTeam includes: lastPlayerMoved) ifTrue: [currentPlayer :=secondTeam currentPlayer . firstTeam advancePlayer].
	(secondTeam includes: lastPlayerMoved) ifTrue: [currentPlayer := firstTeam currentPlayer. secondTeam advancePlayer].! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:11:40'!
FAILURE!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:12:01' prior: 50673975!
movePlayer: aStep ifGameOver: aBlock

	| newPosition |
	
	self isOver ifTrue: [^aBlock value].
	"self isOver ifTrue: [ ^aBlock value ]."
	
	newPosition := currentPlayer currentPosition + aStep.
	(self isInBoard: newPosition) ifTrue: [ self movePlayerTo: newPosition ]! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:12:02'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'cc 12/11/2023 21:12:35' prior: 50673936!
initializeExtent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: aFirstTeam secondTeam: aSecondTeam    
	
	boardExtent := anExtent.
	fieldElements := aCollectionOfFieldElements asOrderedCollection .
	random := aRandom.
	
	"player := BayonetPlayer lives: aNumberOfLives aPosition: aStartingPosition."
	firstTeam := aFirstTeam.
	secondTeam := aSecondTeam.
	
	currentPlayer := firstTeam currentPlayer 
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:12:39'!
ERROR!

----SNAPSHOT----(11 December 2023 21:12:52) CuisUniversity-5981.image priorSource: 10936561!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:12:57'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:12:57'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:12:57'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:12:57'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:13:05'!
ERROR!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:13:17'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:13:17'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:13:17'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:13:17'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:16:19'!
ERROR!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:17:08' prior: 50674035!
movePlayerTo: newPosition

	currentPlayer moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self.
	
	lastPlayerMoved := self currentPlayer.
	self nextPlayer.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:17:08'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:17:59'!
FAILURE!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 21:18:37' prior: 50674013!
test43PlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }). 
				
	battleField movePlayerUp.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 1@2).
	
	battleField movePlayerDown.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 3@2).
				
	
	! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:18:39'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:18:42'!
lastMovedPlayer
	self shouldBeImplemented.! !
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:18:46' prior: 50674189!
lastMovedPlayer
	^lastPlayerMoved ! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:18:47'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:19:11'!
FAILURE!

battleField lastMovedPlayer!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:19:53'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:19:53'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:19:55'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:20:48'!
ERROR!

----SNAPSHOT----(11 December 2023 21:22:35) CuisUniversity-5981.image priorSource: 10958964!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:22:59'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:22:59'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:23:02'!
ERROR!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:24:58'!
FAILURE!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:24:58'!
FAILURE!

self currentPlayer!
!MineField methodsFor: 'moving - private' stamp: 'cc 12/11/2023 21:26:49' prior: 50674152!
movePlayerTo: newPosition

	currentPlayer moveToPosition: newPosition.
	self fieldElementAtPlayerPosition playerSteppedIntoFrom: self.
	
	lastPlayerMoved :=  currentPlayer.
	self nextPlayer.! !

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:26:50'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:26:51'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:26:55'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:26:55'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:26:55'!
PASSED!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:27:18' prior: 50672827!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }) .
	
	mineField movePlayerUp.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (self isPlayerAt22: mineField).! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:27:19'!
ERROR!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 21:27:49' prior: 50671703!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	"self assertSecondTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements."
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	"self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam ."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:27:49'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:27:50'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:27:58' prior: 50672568!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam: ({BayonetPlayer lives:1  aPosition: 3@3 }) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:27:59'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:28:11'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:28:20' prior: 50672640!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3 }) .
	
	mineField movePlayerRight.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:28:21'!
PASSED!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:28:32' prior: 50674715!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam:(PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition:3 @3 }) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:28:33'!
PASSED!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:28:47' prior: 50672583!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@2 }) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:28:47'!
FAILURE!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:28:57' prior: 50674774!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 3@2 }) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:28:58'!
FAILURE!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:29:07' prior: 50674792!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@3 }) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:29:07'!
FAILURE!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:29:35' prior: 50674810!
test11PlayerCanMoveDown

	| mineField |
	
	mineField :=  MineField extent: 2@3 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp; movePlayerDown.
	
	self assert: (self isPlayerAt: mineField).! !

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:29:40'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:32:51'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:32:51'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:33:16'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:33:26'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:34:24'!
ERROR!

----SNAPSHOT----(11 December 2023 21:37:06) CuisUniversity-5981.image priorSource: 10966384!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:38:50'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:38:51'!
FAILURE!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:38:51'!
FAILURE!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:38:55'!
PASSED!
!MineField class methodsFor: 'instance creation' stamp: 'cc 12/11/2023 21:39:13' prior: 50674677!
extent: anExtent elements: aCollectionOfFieldElements randomizingWith: aRandom firstTeam: firstTeam secondTeam: aSecondTeam       
	
	self assertIsValidExtent: anExtent.
	self assert: aCollectionOfFieldElements areInsideBoardOfExtent: anExtent.
	self assertElementsDoNotSharePosition: aCollectionOfFieldElements.
	
	self assertFirstTeam: firstTeam isInBoundsForAndInFirstRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	self assertSecondTeam: aSecondTeam isInBoundsForAndInLastRow: anExtent andNotUsedBy: aCollectionOfFieldElements.
	
	"no hace falta porque es un chequeo de la creacion del equipo"
	"self assertIsValidNumberOfLives: aNumberOfLives."
	
	"self assertTeamsHaveSameAmountOfLivesFirstTeam: firstTeam secondTeam: aSecondTeam ."
	
	^self new initializeExtent: anExtent 
			elements: aCollectionOfFieldElements 
			randomizingWith: aRandom    
			firstTeam: firstTeam secondTeam: aSecondTeam
! !
!PlayerTeam methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:40:22' prior: 50671775!
player: player isInBoundsForLastRow: anExtent 
	^ (player currentPosition between: 1 @ anExtent y and: anExtent) 
					ifFalse: [self error: MineField invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:40:22'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:40:24'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:40:25'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:40:26'!
PASSED!

----SNAPSHOT----(11 December 2023 21:40:34) CuisUniversity-5981.image priorSource: 10986928!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:40:41'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:40:41'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:40:41'!
PASSED!
!MineFieldTest methodsFor: 'test - battle field' stamp: 'cc 12/11/2023 21:42:31'!
test44FourPlayersMoveCorrectly
	
	| battleField |
	battleField :=MineField extent: 3@3 elements: #() 
				randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1. BayonetPlayer lives:1  aPosition: 2@1  }) 
				secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 3@3. BayonetPlayer lives:1  aPosition: 2@3  }). 
				
	battleField movePlayerUp.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 1@2).
	
	battleField movePlayerDown.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 3@2).
				
	battleField movePlayerUp.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 2@2).
	
	battleField movePlayerDown.
	self assert: ((battleField lastMovedPlayer) isPlayerAt: 2@2).
	
	! !

!testRun: #MineFieldTest #test44FourPlayersMoveCorrectly stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:42:32'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:42:32'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:42:32'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:42:32'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:42:33'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test44FourPlayersMoveCorrectly stamp: 'cc 12/11/2023 21:42:33'!
PASSED!

!testRun: #MineFieldTest #test44FourPlayersMoveCorrectly stamp: 'cc 12/11/2023 21:42:39'!
PASSED!

----SNAPSHOT----(11 December 2023 21:42:43) CuisUniversity-5981.image priorSource: 10989134!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:43:10'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:43:10'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:43:27' prior: 50674658!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 2@2 }) .
	
	mineField movePlayerUp.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (self isPlayerAt22: mineField).! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:43:27'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:43:29'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:43:31'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:43:31'!
ERROR!
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:43:44' prior: 50675398!
test08PlayerCanMoveUp

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self 
				firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1  aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerUp.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (self isPlayerAt22: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:43:56' prior: 50674755!
test09PlayerCanMoveLeft

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 2@1 }) secondTeam:(PlayerTeam withPlayers: {}) .
	
	mineField movePlayerLeft.
	
	self deny: (mineField isPlayerAt: 2@1).
	self assert: (self isPlayerAt: mineField).! !
!MineFieldTest methodsFor: 'tests - mine field' stamp: 'cc 12/11/2023 21:44:01' prior: 50674736!
test10PlayerCanMoveRight

	| mineField |
	
	mineField :=  MineField extent: 2@2 elements: #() randomizingWith: self firstTeam: (PlayerTeam withPlayers: {BayonetPlayer lives:1 aPosition: 1@1 }) secondTeam: (PlayerTeam withPlayers: {}) .
	
	mineField movePlayerRight.
	
	self deny: (self isPlayerAt: mineField).
	self assert: (mineField isPlayerAt: 2@1).! !

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:44:11'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:44:11'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:44:24'!
ERROR!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:45:26' prior: 50674070!
nextPlayer
	
	(secondTeam isEmpty) ifFalse: 
	[(firstTeam includes: lastPlayerMoved) ifTrue: [currentPlayer :=secondTeam currentPlayer . firstTeam advancePlayer].
	(secondTeam includes: lastPlayerMoved) ifTrue: [currentPlayer := firstTeam currentPlayer. secondTeam advancePlayer].]! !

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:45:31'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:45:31'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:45:31'!
ERROR!

!testRun: #MineFieldTest #test44FourPlayersMoveCorrectly stamp: 'cc 12/11/2023 21:45:31'!
ERROR!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:45:35'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:45:35'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:45:35'!
PASSED!
!MineField methodsFor: 'as yet unclassified' stamp: 'cc 12/11/2023 21:45:58' prior: 50675612!
nextPlayer
	

	(firstTeam includes: lastPlayerMoved) ifTrue: [currentPlayer :=secondTeam currentPlayer . firstTeam advancePlayer].
	(secondTeam includes: lastPlayerMoved) ifTrue: [currentPlayer := firstTeam currentPlayer. secondTeam advancePlayer].! !

!testRun: #MineFieldTest #test41FirstTeamMustBeInFirstRow stamp: 'cc 12/11/2023 21:46:05'!
PASSED!

!testRun: #MineFieldTest #test42SecondTeamMustBeInLastRow stamp: 'cc 12/11/2023 21:46:05'!
PASSED!

!testRun: #MineFieldTest #test43PlayersMoveCorrectly stamp: 'cc 12/11/2023 21:46:05'!
PASSED!

!testRun: #MineFieldTest #test44FourPlayersMoveCorrectly stamp: 'cc 12/11/2023 21:46:05'!
PASSED!

!testRun: #MineFieldTest #test01BoardExtentXMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test02BoardExtentYMustBeGreaterOrEqualTo2 stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test03PlayerMustStartAtRow1 stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test04PlayerLivesMustBeStrictlyPositive stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test05PlayerLivesMustBeInteger stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test06PlayerMustStartInsideBoard stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test07PlayerMustStartAtAnEmptyPosition stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveLeft stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveRight stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveDown stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test12PlayerStaysOnBoardWhenMovingDown stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test13PlayerStaysOnBoardWhenMovingLeft stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test14PlayerStaysOnBoardWhenMovingRight stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test15PlayerLoosesLiveWhenStepsIntoLowPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test16LowPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test17PlayerLoosesLiveWhenStepsIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test18HighPowerMineExplotesOnlyOnce stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test19PlayerFliesWhenSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test20PlayerDoesNotMoveWhenFliesOutOfBoardSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test21PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test22PlayerDoesNotLooseLiveWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test23PlayerFliesHalfWhenWearingLightArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test24HeavyArmorCanUsedTwiceWhenSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test24PlayerDoesNotLooseLiveWhenWearingHeavyArmorAndSteppingIntoLowPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test26PlayerDoesNotLooseLifeNorFliesWhenWearingHeavyArmorAndSteppingIntoHighPowerMine stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test27ArmorIsWeardOnlyOnce stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test28WhenPlayerSteppsIntoFirstTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test29WhenPlayerSteppsIntoSecondTunnelHoleAppearsInOther stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test30FieldElementsCanNotSharePosition stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test31TunnelDoesNotSharePositionForFirstHole stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test32TunnelDoesNotSharePositionWithSecondHole stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test33PlayerWinsWhenAtTopRowAndLeftLives stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test34PlayerDoesNotWinWhenAtTopRowButWithoutLives stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test35PlayerDoesNotWinWhenNotAtTopRow stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test36GameIsOverWhenNoLivesLeft stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test37CannotMoveWhenGameIsOver stamp: 'cc 12/11/2023 21:46:06'!
ERROR!

!testRun: #MineFieldTest #test38TunnelMustHaveDifferentHoles stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test39TunnelErrorsWhenAskForExitingFromInvalidHole stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

!testRun: #MineFieldTest #test40ElementsMustBeInsideBoard stamp: 'cc 12/11/2023 21:46:06'!
PASSED!

----SNAPSHOT----(11 December 2023 21:46:31) CuisUniversity-5981.image priorSource: 10999620!

!classRemoval: #FirstTeamTurn stamp: 'cc 12/11/2023 21:52:04'!
Object subclass: #FirstTeamTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2Recuperatorio'!

!classRemoval: #GunPlayer stamp: 'cc 12/11/2023 21:52:08'!
Object subclass: #GunPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2Recuperatorio'!

----SNAPSHOT----(11 December 2023 21:52:09) CuisUniversity-5981.image priorSource: 11017216!