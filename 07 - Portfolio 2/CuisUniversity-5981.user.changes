

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 October 2023 17:24:11) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:58'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'CJF 10/2/2023 17:42:40' prior: 50653801!
asRot13
	"| asRotAcc |
	asRotAcc := OrderedCollection new.
	self do: [ :aCharacter | asRotAcc addLast: aCharacter asRot13 ].
	^asRotAcc "
	"^self inject: '' into: [ :asRotAcc :aCharacter | 
		asRotAcc . (aCharacter asRot13).
		self. ]."
	^self collect: [ :aChar | aChar asRot13 ].
	"self size = 1 ifTrue: [^String with: self first asRot13 ].
	self size = 2 ifTrue: [^String with: self first asRot13 with: self last asRot13 ]."! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:43:01'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'CJF 10/2/2023 17:53:22'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

----SNAPSHOT----(2 October 2023 17:54:17) CuisUniversity-5981.image priorSource: 10309400!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:54:42'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:57:00'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:57:47'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:58:08' prior: 50654145!
factorize
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:39'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:59:18' prior: 50654150!
factorize
	|resBag|
	resBag := Bag new.! !

----End fileIn of C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\Packages\TerseGuide.pck.st----!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:01:11' prior: 50654195!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag addLast: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:13'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:07'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:02:50' prior: 50657120!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag add: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:06:04' prior: 50657146!
factorize
	|resBag|
	resBag := Bag new.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657214!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:09:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:16'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:11:59'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:13:52' prior: 50657220!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:21:34' prior: 50657291!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657301!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:24:45' prior: 50657311!
factorize
	|resBag value numero |
	resBag := Bag new.
	value := 2.
	numero = self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(value to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:24:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:04'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:25:44' prior: 50657320!
factorize
	|resBag |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:54'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:26:58' prior: 50657353!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:07' prior: 50657367!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:28' prior: 50657377!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:58' prior: 50657387!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:28:16' prior: 50657397!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:29:25' prior: 50657480!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: 8 factorize equals: (Bag with: 2 with: 2 with: 2)
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:27'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:38:43' prior: 50657408!
factorize
	|resBag numero |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
	"	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	start := 2."
	[(numero = 1) not ] whileTrue: [ |aDivisor|
			aDivisor := (2 to: numero ) detect: [ :aDiv | numero isDivisibleBy: aDiv. ] ifNone:[ ^resBag .].
			resBag add: aDivisor.
			numero := numero / aDivisor.
		].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!

TDDBabyStepsGameAnagrams start.!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'CJF 10/2/2023 18:59:49'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:00:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:00:57'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:05'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:18' prior: 50657623!
anagrams
	^Set with: ''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:24'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:38'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:02:04' prior: 50657627!
anagrams
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:43'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:03:28' prior: 50657680!
anagrams
	(self size = 3) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:03:29'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:04:24' prior: 50657744!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:28'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:05:10'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:15:05' prior: 50657755!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet|
		resSet := Set new.
			resSet add: (self )
		].
	^Set with: self! !

a := 'hola'.
a first asString!

a := 'hola'.
a first asString!

a := 'hola'.
a first!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:23:15' prior: 50657844!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3).
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( self at: 2 asString ) , resto.
		resSet add: ( self at: 2 asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:23:17'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:25:47' prior: 50657855!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:55'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:44:51' prior: 50657900!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
"	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		resSet := Set new.
		
		primShuf collect:[ :anAnnagrama |  ].
		
		
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

----QUIT----(2 October 2023 20:23:38) CuisUniversity-5981.image priorSource: 10319435!

----STARTUP---- (3 October 2023 10:46:31) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:50:42' prior: 50658060!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:44'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:48'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:52:09' prior: 50658163!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:15'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:58:19' prior: 50658221!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/3/2023 10:58:35'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 10:58:35'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:09:08' prior: 50658279!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:09:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:51'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:10:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:11:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:11'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:11:20'!
mergeSubAnnagramsWithOut: aChar 
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:16:26' prior: 50658583!
mergeSubAnnagramsWithOut: aChar 
	|copia subAnnagrams |
	copia := self copyWithout: aChar.
	subAnnagrams := copia anagrams.
	
	^subAnnagrams collect: [ :anAnagram | (aChar asString ) , anAnagram ].! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:46'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:58'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:18:23'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:19:57' prior: 50658391!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		self halt.
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:27'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:33'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:02' prior: 50658685!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:11' prior: 50658764!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].

	^Set with: self! !

----QUIT----(3 October 2023 11:21:22) CuisUniversity-5981.image priorSource: 10447267!

----STARTUP---- (5 October 2023 17:20:24) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

----SNAPSHOT----(5 October 2023 17:21:33) CuisUniversity-5981.image priorSource: 10469659!

TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #TDDCalenadrioTest category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:42:08'!
TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:51:04'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!TDDCalenadrioTest methodsFor: 'no messages' stamp: 'CJF 10/5/2023 17:50:54'!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	self assert: ((Calendario new) isHoliday: GregorianDay monday) not! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:51:07'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:51:28'!
isHoliday: aRenameMe1 
	self shouldBeImplemented.! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:52:11' prior: 50658873!
isHoliday: aWeekday
	^false 
	! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:54:01'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)! !

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:59:06'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)! !

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!methodRemoval: TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 18:05:42'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)!

!methodRemoval: TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 18:05:44'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:14:52' prior: 50658863!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	| holidayCalendar aNonHoliday |
	
	holidayCalendar := Calendario new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday )! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:15:50'!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:17:46' prior: 50658963!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:47'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:18:41' prior: 50658878!
isHoliday: aWeekday
	^ aWeekday = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:42'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:51'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:20:14' prior: 50658991!
isHoliday: aWeekday
	^ aWeekday day = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:36:42'!
test03
	| holidayCalendar aMonday aSaturday |
	
	holidayCalendar := Calendario new.
	holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday ).! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:37:02'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:37:12'!
markWeekdayAsHoliday: Saturday 
	self shouldBeImplemented.! !

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 18:49:46'!
Object subclass: #Calendario
	instanceVariableNames: 'aListOfHolidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:49:45' prior: 50659031!
markWeekdayAsHoliday: aDay
	aListOfHolidays add: aDay.! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:49:52'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:50:51' overrides: 16920235!
initialize
	aListOfHolidays := OrderedCollection new.! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:51:30' prior: 50659001!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday .
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:31'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:32'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:33'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:51:37'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:52:39'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:53:56'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:54:18' prior: 50659068!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday day
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:54:20'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:56:46' prior: 50658980!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:47'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 20:09:46'!
test04
	| holidayCalendar "aMonday aSaturday "|
	
	holidayCalendar := Calendario new.
	"holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday )."
	"self deny: holidayCalendar aDayWithMonthIsHoliday: "! !

1@2 x!

1@2 x!

1@2!

a := 1@2.
a x!

a := 1@2.
a x.!

a y.!

----QUIT----(5 October 2023 21:54:48) CuisUniversity-5981.image priorSource: 10470106!

----STARTUP---- (8 October 2023 20:46:17) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/8/2023 20:47:27'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/8/2023 20:47:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/8/2023 20:48:00'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----STARTUP---- (9 October 2023 12:38:28) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'CJF 10/9/2023 12:39:25'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:14' prior: 50659224!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: valorA.
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:16'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:38' prior: 50659228!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:01' prior: 50659240!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:18' prior: 50659255!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:51:33' prior: 50659267!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:52:32' prior: 50659279!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:26' prior: 50659290!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:45' prior: 50659302!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:57' prior: 50659314!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:54:13' prior: 50659326!
test01
	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53'!
calcularInclude

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53' prior: 50659337!
test01
	self calcularInclude.
	! !

!classDefinition: #Obligation category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 15:18:45'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!Obligation methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45'!
sendTask

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45' prior: 50659345!
calcularInclude
	(Obligation new) sendTask! !

!classRemoval: #Obligation stamp: 'CJF 10/9/2023 19:42:44'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 19:42:44'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----End fileIn of C:\Users\crist\Downloads\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:44:44' prior: 50659602!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:44:47'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:10'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:55' prior: 50659692!
impactBalance: aReceptiveAccount 
	aReceptiveAccount incrementBalance: value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:45:59'!
ERROR!
!ReceptiveAccount methodsFor: 'balance - private' stamp: 'CJF 10/9/2023 20:46:12'!
incrementBalance: aValue 
	self shouldBeImplemented.! !

!methodRemoval: ReceptiveAccount #incrementBalance: stamp: 'CJF 10/9/2023 20:47:03'!
incrementBalance: aValue 
	self shouldBeImplemented.!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:22' prior: 50659697!
impactBalance: aReceptiveAccount 
	^value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:45'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:53' prior: 50659727!
impactBalance: aReceptiveAccount 
	^value * -1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:59:45' prior: 50659683!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:02' prior: 50659771!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:15' prior: 50659807!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value negated)]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:32' prior: 50659847!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1]
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:37' prior: 50659887!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:46' prior: 50659897!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		self.
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:56' prior: 50659937!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:06:51' prior: 50659977!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:09:55' prior: 50659715!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: self! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:09:58'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:04'!
transactionIsDeposit: aDeposit 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:09' prior: 50660090!
transactionIsDeposit: aDeposit 
	aDeposit value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:10:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:11:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:12:17'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:14:17' prior: 50660081!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:07' prior: 50659732!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsWithdraw: value ! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:10'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:15'!
transactionIsWithdraw: aValue 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:31' prior: 50660126!
transactionIsWithdraw: aValue 
	^aValue *-1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:21:17' prior: 50660048!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:22:29' prior: 50660111!
impactBalance: calculatedBalance
	^calculatedBalance + value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:23:14' prior: 50660117!
impactBalance: calculatedBalance
	^calculatedBalance - value! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:16'!
FAILURE!

!methodRemoval: ReceptiveAccount #transactionIsDeposit: stamp: 'CJF 10/9/2023 21:23:47'!
transactionIsDeposit: aDeposit 
	aDeposit value.!

!methodRemoval: ReceptiveAccount #transactionIsWithdraw: stamp: 'CJF 10/9/2023 21:23:48'!
transactionIsWithdraw: aValue 
	^aValue *-1!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:23:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:24:59' prior: 50660151!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:25:53' prior: 50660187!
impactBalance: calculatedBalance
	^(calculatedBalance + value)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:27:30' prior: 50660236!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  balance:= aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

----QUIT----(9 October 2023 21:53:50) CuisUniversity-5981.image priorSource: 10479967!

----STARTUP---- (12 October 2023 19:51:50) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:55:30'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CJF 10/12/2023 19:55:48'!
test01
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:57:45'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 19:57:34'!
test01EmptyPortfolioReturnBalanceZero
	self assert: (Portfolio new) balance equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:57:49'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:57:59'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:58:06' prior: 50660329!
balance
	^0! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!methodRemoval: PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:15'!
test01
!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:01:17'!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount|
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:08:08' prior: 50660348!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:08:11'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:09:29'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 20:10:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:10:21' prior: 50660369!
addAccount: anAccount 
	accounts := anAccount.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:10:27'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:31'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:12:11' prior: 50660333!
balance
	^accounts balance.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:13:56' prior: 50660401!
balance
	accounts ifNil: [ ^0 ]
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:13:59'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:15:35' prior: 50660434!
balance
	accounts ifNil: [ ^0 ].
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:02'!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:10' prior: 50660471!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:16' prior: 50660487!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:43' prior: 50660503!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:23:36' prior: 50660519!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:23:37'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:24:52' prior: 50660381!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection with: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:24:54'!
ERROR!

----SNAPSHOT----(12 October 2023 21:03:06) CuisUniversity-5981.image priorSource: 10516499!

----QUIT----(12 October 2023 21:03:31) CuisUniversity-5981.image priorSource: 10525304!

----STARTUP---- (12 October 2023 21:04:59) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:06:05'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 21:09:45' prior: 50660452!
balance
	accounts ifNil: [ ^0 ].
	^accounts sum: [ :anAccount | anAccount balance ].! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:09:46'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 21:16:05' prior: 50660535!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:07'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:12'!
FAILURE!

----SNAPSHOT----(12 October 2023 21:27:21) CuisUniversity-5981.image priorSource: 10525397!

----QUIT----(12 October 2023 21:27:26) CuisUniversity-5981.image priorSource: 10526876!

----STARTUP---- (13 October 2023 20:09:20) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:09:28'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:13:39' prior: 50660556!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection new ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:17:24'!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:17:28'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:17:49'!
addPortfolio: aSecondPorftfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/13/2023 20:18:11'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:18:06' prior: 50660666!
addPortfolio: aSecondPorftfolio 
	portfolios := aSecondPorftfolio ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:22:44'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:22:45'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:25:31' prior: 50660580!
balance
	| accountsBalance portfoliosBalance |
	accounts ifNil: [ ^0 ].
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:25:32'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:26:11' prior: 50660703!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:26:14'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:28:13' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:08'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:16'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:29:35' prior: 50660630!
addAccount: anAccount 
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:30:47' prior: 50660724!
balance
	| accountsBalance portfoliosBalance |
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ifEmpty: [0].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:31:06'!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!methodRemoval: PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:06'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:09'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:55'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:33:27'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:35:31' prior: 50660786!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:36:15' prior: 50660843!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:37:23' prior: 50660873!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isNil ifTrue: [ portfoliosBalance :=0] ifFalse: [
	portfoliosBalance := portfolios balance.].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:18'!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:31' prior: 50660936!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:40:32'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:41:06'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:41:30' prior: 50660759 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:42:04' prior: 50660679!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:11' prior: 50660904!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ ] ifTrue: [ portfoliosBalance := 0
		].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:51' prior: 50661006!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ portfoliosBalance := portfolios sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:44:53'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

----SNAPSHOT----(13 October 2023 20:47:08) CuisUniversity-5981.image priorSource: 10526969!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:48:20'!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:52:13' prior: 50661140!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:55:48'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:55:52'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:03'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:17' prior: 50661229!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:58:44'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	
	self assert: (Portfolio new) transactions isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:01:41' prior: 50661273!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:01:44'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:02:56' prior: 50661234!
transactions
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:27'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:04:05' prior: 50661297!
transactions
	accounts ifEmpty: [ ^OrderedCollection new].
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:02'!
test08TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!methodRemoval: PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:03'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:09'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:09'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

----SNAPSHOT----(13 October 2023 21:05:16) CuisUniversity-5981.image priorSource: 10543553!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:17'!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:25' prior: 50661547!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:07' prior: 50661560!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:44' prior: 50661573!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:07:48'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:08:10' prior: 50661590!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:08:15'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:12:45' prior: 50661391!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	^res! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:12:47'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:13:12'!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:13:12'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:13:15'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:15:30'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:08' prior: 50661613!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:47' prior: 50661681!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	alltransactions addAll: firstAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:16:50'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:17:11' prior: 50661702!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:19:12'!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio addAccount: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addPortfolio: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:19:19'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:20:09' prior: 50661636!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	portfolios do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:29:56'!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered): (Deposit register: 100 on: (ReceptiveAccount new)).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:30:40' prior: 50661875!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered: (Deposit register: 100 on: (ReceptiveAccount new)) ).! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:30:42'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:30:51'!
hasRegistered: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:31:21' prior: 50661894!
hasRegistered: anAccountTransaction
	^false.! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:33:59'!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	"self assert: aPortfolio hasRegistered: Deposit "! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:34:48' prior: 50661954!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio hasRegistered: (Deposit for: 100)). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:34:50'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:35:01'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:10' prior: 50661899!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self]. ! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:27' prior: 50661987!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:42:01' prior: 50661997!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:42:05'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:43:45' prior: 50662071!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction )].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:43:48'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:45:40' prior: 50662086!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) ;yourself ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:48'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:52'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:47:09' prior: 50662100!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	"res := accounts includes: anAccountTransaction "
	res := accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:12'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:16'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:49:45' prior: 50661966!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:49:48'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:52:31' prior: 50662119!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:55:38'!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:55:42'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:56:34' prior: 50662154!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:59:01'!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
	aPortfolio addAccount: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 22:00:14' prior: 50662238!
hasRegistered: anAccountTransaction
	^self transactions includes: anAccountTransaction 
	"| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. "! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

----SNAPSHOT----(13 October 2023 22:01:28) CuisUniversity-5981.image priorSource: 10556598!

----SNAPSHOT----(14 October 2023 08:34:53) CuisUniversity-5981.image priorSource: 10586172!

----QUIT----(14 October 2023 08:35:03) CuisUniversity-5981.image priorSource: 10586265!

----STARTUP---- (16 October 2023 19:06:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:32:44'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Account as: #CollectionAccount stamp: 'CJF 10/16/2023 19:33:37'!
Smalltalk renameClassNamed: #Account as: #CollectionAccount!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:18'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:27'!
CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:37:05'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:06'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50661001!
addPortfolio: aPortfolio
	portfolios add2: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50659593!
register: aTransaction

	transactions add2: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50660781!
addAccount: anAccount 
	
	accounts add2: anAccount.! !

!methodRemoval: Portfolio #add: stamp: 'CJF 10/16/2023 19:38:06'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:51'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662549!
register: aTransaction

	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662544!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662554!
addAccount: anAccount 
	
	accounts add: anAccount.! !

!methodRemoval: Portfolio #add2: stamp: 'CJF 10/16/2023 19:38:51'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:39:47' prior: 50660353!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:06' prior: 50660590!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount.
	aPortfolio add: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:19' prior: 50660651!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio add: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:31' prior: 50660795!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:44' prior: 50660961!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:49' prior: 50662915!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:53' prior: 50662940!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:56' prior: 50662965!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:07' prior: 50661166!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:17' prior: 50663078!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:30' prior: 50661646!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:36' prior: 50661727!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:43' prior: 50663199!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:05' prior: 50661790!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio add: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:20' prior: 50662137!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:33' prior: 50662217!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:54' prior: 50662309!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
	aPortfolio add: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:43:30' prior: 50662834!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

----SNAPSHOT----(16 October 2023 19:44:56) CuisUniversity-5981.image priorSource: 10586358!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:47:53'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:48:33' prior: 50662583!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:48:52' prior: 50661018!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:48:59' prior: 50661819!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:12' prior: 50660995 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:26' prior: 50663763 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:49:44'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:50:05' prior: 50662588!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:20' prior: 50663738!
balance
	| accountsBalance portfoliosBalance |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:50:29' prior: 50663753!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:37' prior: 50663771 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:50:52'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(16 October 2023 19:51:28) CuisUniversity-5981.image priorSource: 10626053!

!methodRemoval: Portfolio #addPortfolio: stamp: 'CJF 10/16/2023 19:52:46'!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:52:46' prior: 50662567!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !

!methodRemoval: Portfolio #addAccount: stamp: 'CJF 10/16/2023 19:53:01'!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:01' prior: 50663838!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:21' prior: 50663853!
add: aCollectionAccount
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:53:56' prior: 50663807!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	"collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ]."
	^res! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:05' prior: 50663791!
balance
	| accountsBalance  |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	
	^accountsBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:21' prior: 50663939!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:44' prior: 50663949!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :aCollectionAccount | aCollectionAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

----SNAPSHOT----(16 October 2023 19:56:07) CuisUniversity-5981.image priorSource: 10629727!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:57:17'!
test16! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:08:52'!
test16PortfolioCannotAddDuplicatedAccounts! !

!methodRemoval: PortfolioTest #test16 stamp: 'CJF 10/16/2023 20:08:52'!
test16!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:10:02' prior: 50664033!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:12:00' prior: 50664040!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:12:06'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:13:49' prior: 50663864!
add: aCollectionAccount
	self ifCannotAddRaiseError: aCollectionAccount.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:14:21'!
ifCannotAddRaiseError: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:15:16' prior: 50664141!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:15:18'!
ERROR!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:15:33'!
duplicatedAccountError
	self shouldBeImplemented.! !
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:16:17' prior: 50664158!
duplicatedAccountError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:20'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:42'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:53'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:17:13' prior: 50664147!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:19:45'!
test17CannotAddAccountInAlreadyPortfolioAdded
	| portfolio secondPortfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	secondPortfolio add: account.
	portfolio add: secondPortfolio.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:19:47'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:25:38' prior: 50664179!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp xyx: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:48'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:13'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:27:17'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:32:36' prior: 50664274!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:32:55'!
ifCannotAddRaiseError: aCollectionAccount
	^(self = aCollectionAccount )! !

!methodRemoval: ReceptiveAccount #xyx: stamp: 'CJF 10/16/2023 20:32:55'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:38:50' prior: 50664382!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^true ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:51'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:44'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:40:49' prior: 50664568!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^false ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:40:55'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:46:59'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:08'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:57'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:53:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:55:45' prior: 50664369!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:57:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:01:10'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:05' prior: 50664902!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	self.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:53' prior: 50664936!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:04:58'!
test18! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:05:30' prior: 50665030!
test18
	| portfolio |
	portfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:07:09' prior: 50665033!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:07:12'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:08:43' prior: 50664950!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^self = aCollectionAccount .
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:30'!
FAILURE!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 21:09:53'!
cannotAddPortfolioError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:12:23' prior: 50665051!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:13:17' prior: 50665144!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:16:22'!
test19
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]"! !

----SNAPSHOT----(16 October 2023 21:16:30) CuisUniversity-5981.image priorSource: 10636047!

----QUIT----(17 October 2023 00:02:06) CuisUniversity-5981.image priorSource: 10677625!

----STARTUP---- (17 October 2023 12:05:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:24:16'!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:24:16'!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:26:33' prior: 50665315!
test19
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:27:03' prior: 50665408!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 13:11:11' prior: 50665428!
test19"primer de agregar en un portfolio interno"
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

----QUIT----(17 October 2023 13:11:32) CuisUniversity-5981.image priorSource: 10677718!

----STARTUP---- (17 October 2023 13:41:23) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 13:59:56' prior: 50665451!
test19"primer de agregar en un portfolio interno"
	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:00:04'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/17/2023 14:06:17'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'collectionAccounts parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:06:16' prior: 50665230!
ifCannotAddRaiseError: aCollectionAccount 
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:06:24'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:08:47' prior: 50664065!
add: aCollectionAccount
	self ifCannotAddRaiseError: aCollectionAccount.
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:08:51'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:09:05'!
defineParent: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:09:14' prior: 50665531!
defineParent: aPortfolio 
	parent := aPortfolio ! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:48'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:48'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:10:03'!
defineParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:10:06' prior: 50665695!
defineParent: aPortfolio 
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:47'!
PASSED!

----QUIT----(17 October 2023 14:11:25) CuisUniversity-5981.image priorSource: 10682016!

----STARTUP---- (18 October 2023 19:44:34) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/18/2023 19:48:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/18/2023 19:48:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/18/2023 19:48:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/18/2023 19:48:06'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/18/2023 19:48:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/18/2023 19:48:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/18/2023 19:48:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/18/2023 19:48:27'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/18/2023 19:48:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/18/2023 19:48:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/18/2023 19:48:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/18/2023 19:48:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/18/2023 19:48:46'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/18/2023 19:48:48'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/18/2023 19:49:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/18/2023 19:49:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/18/2023 19:49:10'!
PASSED!

----STARTUP---- (18 October 2023 17:01:28) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!Portfolio methodsFor: 'administration' stamp: 'CJF 10/18/2023 17:14:39' prior: 50665498!
ifCannotAddRaiseError: aCollectionAccount 
	|parentsToCheck|
	parentsToCheck := self traceParents.
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/18/2023 17:15:56' prior: 50665852!
ifCannotAddRaiseError: aCollectionAccount 
	|parentsToCheck|
	parentsToCheck := self traceParents.
	parentsToCheck canAdd: aCollectionAccount.
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

----STARTUP---- (19 October 2023 13:01:31) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:01:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:01:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:01:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:01:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:02:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:36:33'!
test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:36:57'!
test20PortfolioNoPuedeAgregarPortfolioRepetido
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/19/2023 13:37:30' prior: 50664725!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:38:18' prior: 50665471!
test19"primer de agregar en un portfolio interno"
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]"! !

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 13:38:21'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:39:32' prior: 50665498!
ifCannotAddRaiseError: aCollectionAccount 
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:45:04' prior: 50665521!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	self ifCannotAddRaiseError: aCollectionAccount.
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:46:39' prior: 50666020!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	
	"self ifCannotAddRaiseError: aCollectionAccount."
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 13:46:53'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:46:56'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:47:30'!
canAdd: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:01:09' prior: 50666127!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ).
		].
	^ret.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:01:16'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:01:24'!
collectParents
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:02:50' prior: 50666144!
collectParents
	^OrderedCollection with: parent.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:00'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:03:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:03:20'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:26'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:26'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:07:21' prior: 50666149!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifNil: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:10:10' prior: 50666245!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifNil: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].
	^parents.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:10:32'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:10:43'!
include: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:14:55' prior: 50666267!
include: aCollectionAccount 
	| res |
	res := false.
	collectionAccounts do: [ :aCA |
			res := res or: (aCA include: aCollectionAccount ).
		].
	^res! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:10'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:26'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:26'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:18:24' prior: 50666132!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ) not.
		].
	^ret.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:18:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:25'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:25'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:46:52'!
include: aCollectionAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:47:14' prior: 50666393!
include: aCollectionAccount 
	self = aCollectionAccount ! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:16'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:48:03'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:53:56' prior: 50666398!
include: aCollectionAccount 
	^self = aCollectionAccount ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:55:47' prior: 50666292!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ) not.
		].
	^ret and: ((self = aCollectionAccount ) not).! !

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:57:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:57:46'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:57:46'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:07'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:18'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:19'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:29'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:29'!
FAILURE!

!methodRemoval: PortfolioTest #test19 stamp: 'CJF 10/19/2023 15:04:00'!
test19"primer de agregar en un portfolio interno"
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]"!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:04:12'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:04:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:08:02' prior: 50666492!
include: aCollectionAccount
	( aCollectionAccount isKindOf: Portfolio ) ifTrue: [ ^aCollectionAccount include: self ].
	^self = aCollectionAccount 
	
"	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount )."! !

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:08:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:24:57'!
test20CannotAddPortfolioTwice
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 15:25:01'!
test20PortfolioNoPuedeAgregarPortfolioRepetido
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:28:36'!
test19PortfoliosSharingAccountCannotAddBetweenThem
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:28:36'!
test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:28:51' prior: 50666032!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:29:07' prior: 50662396!
hasRegistered: anAccountTransaction
	^self transactions includes: anAccountTransaction ! !

!methodRemoval: Portfolio #ifCannotAddRaiseError: stamp: 'CJF 10/19/2023 15:30:09'!
ifCannotAddRaiseError: aCollectionAccount 
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
!

!methodRemoval: ReceptiveAccount #ifCannotAddRaiseError: stamp: 'CJF 10/19/2023 15:30:14'!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount ).!
!CollectionAccount methodsFor: 'no messages' stamp: 'CJF 10/19/2023 15:30:32'!
balance
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 15:32:17'!
defineParent
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 15:36:22'!
canAdd
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:37:07' prior: 50666715!
include: aCollectionAccount
	( aCollectionAccount isKindOf: Portfolio ) ifTrue: [ ^aCollectionAccount include: self ].
	^self = aCollectionAccount 
! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:53:57'!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:55:17' prior: 50666942!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:55:18'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:56:05'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:56:46'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:57:24'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:58:34'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfoliosSharingAccountCannotAddBetweenThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test20CannotAddPortfolioTwice stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:59:15'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:59:15'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:59:55' prior: 50666955!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	"self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]"! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 16:00:06' prior: 50667080!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	portfolioB add: account .
	
	"self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]"! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:07'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:30'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:52'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:01:10'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'CJF 10/19/2023 16:03:01' prior: 50663817 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	parent := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'CJF 10/19/2023 16:03:21' prior: 50665536!
defineParent: aPortfolio 
	parent add: aPortfolio .! !
!Portfolio methodsFor: 'add' stamp: 'CJF 10/19/2023 16:05:15' prior: 50666254!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifEmpty: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].
	^parents.! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 16:05:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test19PortfoliosSharingAccountCannotAddBetweenThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test20CannotAddPortfolioTwice stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 16:05:52' prior: 50667099!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:53'!
FAILURE!

!methodRemoval: PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:13:09'!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]!
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 16:13:32'!
hasRegistered: aTransaction
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 16:13:59'!
transactions
	self subclassResponsibility ! !

----SNAPSHOT----(19 October 2023 16:14:10) CuisUniversity-5981.image priorSource: 10692008!

----QUIT----(19 October 2023 16:14:31) CuisUniversity-5981.image priorSource: 10740589!

----STARTUP---- (19 October 2023 19:26:13) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


----End fileIn of C:\Users\crist\Documents\GitHub\2023-2c\06-Portfolio1\Portfolio-Solucion.st----!

!classRemoval: #Withdraw stamp: 'CJF 10/19/2023 21:14:03'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'CJF 10/19/2023 21:14:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'CJF 10/19/2023 21:14:03'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'CJF 10/19/2023 21:14:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'CJF 10/19/2023 21:14:04'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'CJF 10/19/2023 21:14:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'CJF 10/19/2023 21:14:04'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'CJF 10/19/2023 21:14:04'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #CollectionAccount stamp: 'CJF 10/19/2023 21:14:05'!
Object subclass: #CollectionAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\crist\Documents\GitHub\2023-2c\06-Portfolio1\Portfolio-Solucion.st----!

TestCase subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransfersTests category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:15:32'!
TestCase subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'no messages' stamp: 'CJF 10/19/2023 21:17:52'!
test01TransferBetweenAccountsAffectBalances
	| accountSender accountReceiver |
	accountSender := ReceptiveAccount new.
	accountReceiver := ReceptiveAccount new. ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:21:41'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:21:24' prior: 50668823!
test01TransferBetweenAccountsAffectBalances
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:22:03'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:10'!
from: originAccount to: receiverAccount withValue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: aRenameMe1 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:24' prior: 50668857!
from: originAccount to: receiverAccount withValue: transferValue 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:42' prior: 50668868!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:22:45'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:52'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:52'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:53'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:22:53'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	self shouldBeImplemented.
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:24:29' prior: 50668917!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:41'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:52'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:57'!
ERROR!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:26:46' prior: 50668928!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !

!methodRemoval: Transfer #initializeFrom:to:withValue: stamp: 'CJF 10/19/2023 21:26:51'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:27:02'!
ERROR!

!methodRemoval: Transfer class #from:to:withValue: stamp: 'CJF 10/19/2023 21:27:19'!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:27:26'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:27:33'!
from: originAccount to: receiverAccount withValue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: aRenameMe1 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:29:05' prior: 50668984!
from: originAccount to: receiverAccount withValue: transferValue 
	Deposit register: transferValue on: receiverAccount .
	Withdraw register: transferValue on: originAccount .
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:07'!
ERROR!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:29:12'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	self shouldBeImplemented.
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:29:17' prior: 50669009!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:25'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:25'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:40'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:40'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:37:10'!
test02ReceiverAccountKnowsWhoSendMoney

	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !

Object subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:41:06'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:41:25' prior: 50669044!
test02ReceiverAccountKnowsWhoSendMoney
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:41:44'!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !

!methodRemoval: TransfersTests #test02ReceiverAccountKnowsWhoSendMoney stamp: 'CJF 10/19/2023 21:41:49'!
test02ReceiverAccountKnowsWhoSendMoney
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:42:40' prior: 50669084!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (originAccount hasRegistered: transfer).
	
	self assert: (receiverAccount hasRegistered: transfer).! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:42:42' prior: 50669108!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer).! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:42:44'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:43:37'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:45:35'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:46:18' prior: 50668995!
from: originAccount to: receiverAccount withValue: transferValue 
	"Deposit register: transferValue on: receiverAccount .
	Withdraw register: transferValue on: originAccount ."
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:47:11'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:47:11'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:47:27'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:47:27'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:48:32' prior: 50669020!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:48:35'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:49:21'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:49:21'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:49:32'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:56:01' prior: 50668672 overrides: 50668477!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction |
			(transaction isKindOf: Transfer) ifTrue: [transaction affectBalance: currentBalance from: self]
				ifFalse:[
			transaction affectBalance: currentBalance]
		 ]! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:56:05'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:56:12'!
affectBalance: currentBalance from: aReceptiveAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:57:12' prior: 50669213!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount_CHANGE_ME ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ]
	^currentBalance + transferValue_CHANGE_ME .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:13'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:57:26' prior: 50669219!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount_CHANGE_ME ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ].
	^currentBalance + transferValue_CHANGE_ME .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:28'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:32'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:57:32'!
PASSED!

----QUIT----(19 October 2023 22:05:23) CuisUniversity-5981.image priorSource: 10740682!

----STARTUP---- (22 October 2023 19:35:18) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:35:50'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:35:51'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:35:51'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:43:29'!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: transfer pataOrigen equals: originAccount.
	self assert: transfer pataDestino equals: receiverAccount.
	self assert: originAccount balance equals: -50.
	self assert: originAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:43:32'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:43:43'!
pataOrigen
	self shouldBeImplemented.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:45:07' prior: 50669269!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: originAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:45:09'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:15'!
isPataOrigen: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:41' prior: 50669310!
isPataOrigen: anAccount 
	^originAccount_CHANGE_ME = anAccount ! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:45:43'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:49'!
isPataDestino: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:46:07' prior: 50669322!
isPataDestino: anAccount 
	^receiverAccount_CHANGE_ME = anAccount ! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:08'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:46:28' prior: 50669292!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:50:41'!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: 50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:50:44'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:50:56'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:05'!
PASSED!
!Transfer class methodsFor: 'nil' stamp: 'CJF 10/22/2023 19:51:52'!
invalidTransferValueError
	^ 'Transferencia must be positve'! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 19:54:23' prior: 50669172!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ self error: Transfer invalidTransferValueError ].
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 19:54:30' prior: 50669414!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:32'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:32'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:38'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:55:01' prior: 50669363!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:55:33'!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!methodRemoval: TransfersTests #test03 stamp: 'CJF 10/22/2023 19:55:39'!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:14:17'!
test05TransferBetweenDifferentAccount
	| anAccount transfer |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer SameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !
!Transfer class methodsFor: 'nil' stamp: 'CJF 10/22/2023 20:15:08'!
sameAccountError
	^' No es posible transferir entre la misma cuenta '! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:15:19' prior: 50669518!
test05TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:15:59' prior: 50669428!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( originAccount = receiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:18' prior: 50669551!
initializeFrom: anOriginAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = receiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:29' prior: 50669568!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:16:39'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669232!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ].
	^currentBalance + transferValue_CHANGE_ME .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669315!
isPataOrigen: anAccount 
	^originAccount = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669585!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:16:48'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:48' prior: 50669627!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:48' prior: 50669327!
isPataDestino: anAccount 
	^receiverAccount = anAccount ! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:54' prior: 50669653!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:17:01'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:17:01' prior: 50669675!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:17:01' prior: 50669612!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

TestCase subclass: #ReportesTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportesTests category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:19:55'!
TestCase subclass: #ReportesTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportesTests methodsFor: 'no messages' stamp: 'CJF 10/22/2023 20:22:54'!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:22:57'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:23:06'!
accountSummaryReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:23:24' prior: 50669768!
accountSummaryReport
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:23:25'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:23:25'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:24:43'!
test01ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:24:50'!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: ReportesTests #test01ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:24:50'!
test01ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:27:52' prior: 50669796!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:27:54'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:31:26' prior: 50669773!
accountSummaryReport
	(self balance = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	^OrderedCollection with: 'Balance = 100' with: 'Depósito por 100.'.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:35:12'!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:38:57' prior: 50669834!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , self balance.
	printDeposit := 'Depósito por ' , (transactions at:1) value.
	^OrderedCollection with: printBalance with: 'Depósito por 100.'.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:39:29' prior: 50669867!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , self balance.
	printDeposit := 'Depósito por ' , (transactions at:1) value.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:39:42'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:40:20' prior: 50669880!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:40:26'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:41:01' prior: 50669923!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString, '.'.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:41:09'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:48:48' prior: 50669940!
accountSummaryReport
	|printBalance printDeposit printResult|
	printResult := OrderedCollection new.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance .
	^printResult.
	"(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString, '.'.
	^OrderedCollection with: printBalance with: printDeposit ."! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:48:51' prior: 50669957!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:50:38' prior: 50669854!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:50:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:51:19' prior: 50669985!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
 .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:52:55'!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:59:48'!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (originAccount accountSummaryReport) equals: originReport.
	self assert: (receiverAccount accountSummaryReport) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:00:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:04:28' prior: 50670049!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] .
		].
 .
	^printResult.! !

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:04:52'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:04:52'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'CJF 10/22/2023 21:05:26' overrides: 16902254!
value
	^transferValue ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:05:36'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:10:28'!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = -20' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:10:34'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:10:53' prior: 50670233!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:10:55'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:11:30' prior: 50670257!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:15:23'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount|
	anAccount := ReceptiveAccount new. 
	self assert: anAccount transferNetReport equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:25'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:15:33'!
transferNetReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:15:38' prior: 50670338!
transferNetReport
	^0! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:17:17'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	self assert: anAccount transferNetReport equals: 20.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:19'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:21:38' prior: 50670343!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^transactions at:1 value ]! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:21:46'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:22:28' prior: 50670431!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ]! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:23:21'!
test08TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:23:28'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.! !

!methodRemoval: ReportesTests #test08TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:23:28'!
test08TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:23:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:26:08' prior: 50670442!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value ].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:26:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:27:27' prior: 50670517!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) affectBalance: 0].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:27:36'!
ERROR!

!methodRemoval: Transfer #affectBalance: stamp: 'CJF 10/22/2023 21:28:18'!
affectBalance: currentBalance 
	self shouldBeImplemented.!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:28:56' prior: 50670531!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:30:50'!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	self assert: anAccount transferNetReport equals: 10.! !

----SNAPSHOT----(23 October 2023 00:30:36) CuisUniversity-5981.image priorSource: 10803225!

----QUIT----(23 October 2023 00:31:00) CuisUniversity-5981.image priorSource: 10846634!

----STARTUP---- (23 October 2023 16:31:52) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:34:41' prior: 50670549!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0]
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:34:58' prior: 50670618!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:35:03'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:35:03'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:36:26'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:38:19'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:39:06' prior: 50670636!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [^( (transactions at:1) value )].
			(aTransaction isPataOrigen: self) ifTrue: [^ ((transactions at:1) value negated)].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:39:38' prior: 50670670!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [((transactions at:1) value negated)].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:42'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:42'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:40:23' prior: 50670719!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0].
	^total
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:40:30'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:40:30'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:07' prior: 50670745!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ transactions affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [transactions affectBalance: total from: self].
		] 
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:10'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:10'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:28' prior: 50670791!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ transactions affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [transactions affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:32'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:32'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:59' prior: 50670811!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [aTransaction affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:06'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:06'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:18'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:56:26' prior: 50670831!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [total := aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [total := aTransaction affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:56:30'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:57:39' prior: 50670859!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: Transfer) ifTrue:[ total := aTransaction affectBalance: total from: self]].
	"transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [total := aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [total := aTransaction affectBalance: total from: self].
		]."
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:57:44'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 16:57:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 16:57:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 18:19:35' prior: 50670876!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: Transfer) ifTrue:[ total := aTransaction affectBalance: total from: self]].
	
	^total

! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:27:51' prior: 50669147!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:28:00' prior: 50670980!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:32:13' prior: 50670988!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:33:38' prior: 50670996!
from: originAccount to: receiverAccount withValue: transferValue 

	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:41:09'!
Transfer subclass: #OriginTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTrasfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:41:16'!
Transfer subclass: #ReceiverTrasfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 21:40:46' prior: 50670171!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTrasfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
			"(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] ."
		].
 .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:41:29'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:41:36'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:41:51'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:41:53'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:41:54'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:41:55'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:41:56'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:41:56'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:46:09' prior: 50671004!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTrasfer withTransfer: transfer).
	^transfer.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!classRenamed: #ReceiverTrasfer as: #ReceiverTransfer stamp: 'CJF 10/23/2023 21:46:31'!
Smalltalk renameClassNamed: #ReceiverTrasfer as: #ReceiverTransfer!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/23/2023 21:46:31' prior: 50671027!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
			"(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] ."
		].
 .
	^printResult.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'CJF 10/23/2023 21:46:31' prior: 50671138!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer).
	^transfer.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:51'!
ERROR!
!OriginTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:01'!
withTransfer: transfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithTransfer: transfer ! !
!OriginTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:29' prior: 50671302!
withTransfer: aTransfer
	^self new initializeWithTransfer: aTransfer ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:47:31'!
ERROR!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:47:37'!
Transfer subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OriginTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:47:37'!
initializeWithTransfer: aTransfer 
	self shouldBeImplemented.
	transfer := aTransfer.! !
!OriginTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:47:41' prior: 50671327!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:47:43'!
ERROR!
!ReceiverTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:50'!
withTransfer: transfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithTransfer: transfer ! !
!ReceiverTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:48:00' prior: 50671341!
withTransfer: aTransfer 
	^self new initializeWithTransfer: aTransfer ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:01'!
ERROR!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:48:06'!
Transfer subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceiverTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:48:06'!
initializeWithTransfer: aTransfer 
	self shouldBeImplemented.
	transfer := aTransfer.! !
!ReceiverTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:48:11' prior: 50671366!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:13'!
ERROR!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:33'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:49:02'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:52:01' prior: 50669199 overrides: 50668477!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction |
			(transaction isKindOf: OriginTransfer ) ifTrue: [transaction affectBalance: currentBalance].
			(transaction isKindOf: ReceiverTransfer ) ifTrue: [transaction affectBalance: currentBalance ]
				ifFalse:[
			transaction affectBalance: currentBalance]
		 ]! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:52:09'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:51'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:52:51'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:59'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:59'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:54:35'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:54:35'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:54:35'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:54:36'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:54:36'!
PASSED!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:55:20' prior: 50669701!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:55:31' prior: 50671481!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:55:36'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:55:36'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:55:36'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:55:36'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:55:36'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:55:52'!
ERROR!
!OriginTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:56:01'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:56:46' prior: 50671531!
affectBalance: currentBalance 
	^currentBalance - 	(transfer value )! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:56:47'!
ERROR!
!ReceiverTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:57:21'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:57:44' prior: 50671545!
affectBalance: currentBalance 
	^currentBalance + (transfer value)! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:45'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:57:47'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:57:47'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:58'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:58:01'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:58:01'!
FAILURE!

----QUIT----(23 October 2023 22:00:41) CuisUniversity-5981.image priorSource: 10846727!

----STARTUP---- (24 October 2023 14:15:14) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:46'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:46'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 14:23:55'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:57'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:57'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:24:14'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:44:59' prior: 50669123!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: (transfer isOriginIn: originAccount).	
	self assert: (transfer isReceiveIn: receiverAccount).
	self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer).! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:45:12' prior: 50671629!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: (transfer isOriginIn: originAccount).	
	self assert: (transfer isReceiveIn: receiverAccount).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:45:19'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 14:57:18'!
Object subclass: #Transfer
	instanceVariableNames: 'origin receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50669718!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = origin ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50669622!
isPataOrigen: anAccount 
	^origin = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50671496!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	origin := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 14:57:22'!
Object subclass: #Transfer
	instanceVariableNames: 'origin receiver transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:22' prior: 50671690!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	origin := anOriginAccount.
	receiver := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:22' prior: 50669670!
isPataDestino: anAccount 
	^receiver = anAccount ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:29'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:29'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:41'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:41'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:21:53'!
isOriginIn: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:06' prior: 50671745!
isOriginIn: originAccount 
	originAccount hasRegistered: self.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:12'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:17'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:23'!
isReceiveIn: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:33' prior: 50671761!
isReceiveIn: receiverAccount 
	receiverAccount hasRegistered: self.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:34'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:36'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:39'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:39'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:37:48' prior: 50668679 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := true.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ aTransaction isTransfer: transaction ].
			(aTransaction isKindOf: ReceiverTransfer ) 
				ifTrue: [aTransaction isTransfer: transaction ] 
				ifFalse: [ aTransaction = transaction ].
		].
	
	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:39:31' prior: 50671785 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := false.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ ret := ret or: (aTransaction isTransfer: transaction) ].
			(aTransaction isKindOf: ReceiverTransfer ) 
				ifTrue: [ret := ret or: (aTransaction isTransfer: transaction )] 
				ifFalse: [ ret := ret or: (aTransaction = transaction) ].
		].
	^ret.
	"^ transactions includes: aTransaction "
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:39:33'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:39:54'!
isTransfer: transaction 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:40:08' prior: 50671820!
isTransfer: transaction 
	^self = transaction ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:09'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:13'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:23'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:41:13' prior: 50671801 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := false.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ ret := ret or: (aTransaction isTransfer: transaction) ].
			(transaction isKindOf: ReceiverTransfer ) 
				ifTrue: [ret := ret or: (aTransaction isTransfer: transaction )] 
				ifFalse: [ ret := ret or: (aTransaction = transaction) ].
		].
	^ret.
	"^ transactions includes: aTransaction "
! !

----STARTUP---- (24 October 2023 15:50:06) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:04:26' prior: 50671249!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	"originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer)."
	^transfer.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:04:51' prior: 50671496!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:05:00'!
Object subclass: #Transfer
	instanceVariableNames: 'originTransfer receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50669718!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originTransfer ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50669622!
isPataOrigen: anAccount 
	^originTransfer = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50671609!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:05:12'!
Object subclass: #Transfer
	instanceVariableNames: 'originTransfer receiverTransfer transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:12' prior: 50671647!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := anOriginAccount.
	receiverTransfer := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:12' prior: 50669670!
isPataDestino: anAccount 
	^receiverTransfer = anAccount ! !

Object subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:09:16'!
Object subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:09:24'!
Object subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:09:55'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:10:26' prior: 50671596!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer).
	^transfer.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:10:41'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:11:27' prior: 50671720!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	"originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer)."
	^transfer.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:14:14' prior: 50671671!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	transferValue := aTransferValue.
! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:16:35' prior: 50669123!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOrigin: originAccount ).
	self assert: ( transfer isReceiver: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:18:47' prior: 50671750!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	anOriginAccount register: originTransfer.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	aReceiverAccount register: originTransfer.
	transferValue := aTransferValue.
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:19:01'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:19:07'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:19:07'!
FAILURE!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:19:34'!
isOrigin: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:20:32' prior: 50671814!
isOrigin: originAccount 
	originAccount hasRegistered: originTransfer.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:20:36'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:20:57'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:23:34' prior: 50671819!
isOrigin: originAccount 
	^originAccount hasRegistered: originTransfer.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:23:52'!
isReceiver: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:24:11' prior: 50671836!
isReceiver: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:13'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:16'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:23'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:24:51' prior: 50671785!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	anOriginAccount register: originTransfer.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	aReceiverAccount register: receiverTransfer .
	transferValue := aTransferValue.
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:56'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:24:59'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:01'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:01'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:25:50' prior: 50669485!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!methodRemoval: TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:54'!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:26:00'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:26:03'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:26:09'!
test03TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!methodRemoval: TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:26:09'!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:26:14'!
test04TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !

!methodRemoval: TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:26:14'!
test05TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:28:33'!
test05
	| originAccount receiverAccount transfer |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: transfer origin"! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:37:00' prior: 50671986!
test05
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:10'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:18'!
originTransfer
	self shouldBeImplemented.
	^originTransfer! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:25' prior: 50672015!
originTransfer
	^originTransfer! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:27'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:32'!
receiverTrasnfer
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:44' prior: 50672026!
receiverTrasnfer
	^receiverTransfer ! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:46'!
ERROR!
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:54'!
isContraryTransfer: receiver 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:02' prior: 50672038!
isContraryTransfer: pata 
	^transfer receiverTrasnfer = pata.! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:03'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:10'!
isContraryTransfer: origin 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:30' prior: 50672050!
isContraryTransfer: pata 
	^transfer originTransfer = pata.! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:30'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:40:21'!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!methodRemoval: TransfersTests #test05 stamp: 'CJF 10/24/2023 16:40:24'!
test05
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:41:34'!
AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:41:42'!
AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:04'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:42:04'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:42:27' prior: 50671210!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
		].
 .
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:45'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:42:45'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:50'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:50'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:43:03'!
ERROR!
!ReceiverTransfer methodsFor: 'nil' stamp: 'CJF 10/24/2023 16:43:54' overrides: 50668707!
value
	^ transfer value! !
!OriginTransfer methodsFor: 'nil' stamp: 'CJF 10/24/2023 16:44:02' overrides: 50668707!
value
	^ transfer value! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:44:06'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:44:41'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:45:02'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:45:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:47:11' prior: 50670934!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction |  total :=  (aTransaction affectTransferNet: total) ].
	
	^total

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:18'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:27'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:47' prior: 50672363!
affectTransferNet: total 
	total + transfer value! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:51' prior: 50672368!
affectTransferNet: total 
	^total + transfer value! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:47:55'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:56'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:47:59'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:47:59'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:48:08'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:48:24' prior: 50672396!
affectTransferNet: total 
	^total - transfer value.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:48:25'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:48:30'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:49:55'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	self assert: anAccount transferNetReport equals: 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:49:56'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:09'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:17' prior: 50672433!
affectTransferNet: total ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:50:18'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:31'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:35' prior: 50672446!
affectTransferNet: total 
! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:50:36'!
FAILURE!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:56' prior: 50672438!
affectTransferNet: total 
	^0! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:51:10' prior: 50672451!
affectTransferNet: total 
	^total! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:51:16' prior: 50672460!
affectTransferNet: total 
	^total! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:51:20'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:51:24'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:51:24'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:53:11' prior: 50672414!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	self assert: anAccount transferNetReport equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:55:22' prior: 50672191!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report
			"(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.']".
		].
 .
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:55:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:55:33'!
ERROR!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:55:33'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:55:41'!
report
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:56:27' prior: 50672587!
report
	^'Depósito por ' , value asString, '.' ! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:56:29'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:56:46'!
ERROR!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:56:46'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:56:52'!
report
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:57:19' prior: 50672608!
report
	^'Extracción por ', value asString, '.'! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:57:20'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:57:23'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:57:26'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:57:26'!
ERROR!
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:57:32'!
report
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:01' prior: 50672631!
report
	^ 'Salida por transferencia de ' , transfer value asString , '.' ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:02'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:09'!
report
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:32' prior: 50672645!
report
	^'Entrada por transferencia de ', transfer value asString , '.'! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:34'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

----SNAPSHOT----(24 October 2023 17:01:38) CuisUniversity-5981.image priorSource: 10877995!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:30' prior: 50672547!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
 .
	^printResult.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:34' prior: 50672703!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.! !

----SNAPSHOT----(24 October 2023 17:04:15) CuisUniversity-5981.image priorSource: 10913565!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:07:49'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:08:31'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'CJF 10/24/2023 17:09:11'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:22:10' prior: 50672715!
accountSummaryReport
	|printBalance printResult  accountSummaryReport  |
	accountSummaryReport := AccountSummary new.
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: (accountSummaryReport giveMeReportFor: aTransaction)].
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:22:34'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:22:34'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:22:49'!
giveMeReportFor: aTransaction 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:24:17' prior: 50672807!
giveMeReportFor: aTransaction 
! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:31:03' prior: 50672812!
giveMeReportFor: aTransaction 
	^aTransaction report
! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:31:08'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:31:10'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:31:13'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:31:14'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:32:56' prior: 50672761!
accountSummaryReport
	|printBalance printResult  accountSummaryReport  |
	accountSummaryReport := AccountSummary new.
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | (accountSummaryReport giveMeReportFor: aTransaction with: printResult)].
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:33:05'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:06'!
ERROR!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:06'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:10'!
giveMeReportFor: aTransaction with: printResult 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:49' prior: 50672933!
giveMeReportFor: aTransaction with: printResult 
	printResult addLast: aTransaction ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:55' prior: 50672939!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction ! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:57'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:35:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:24'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:31'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:31'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:36:54' prior: 50672945!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction report! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:56'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:59'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:34' prior: 50672880!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:41:23' prior: 50669755!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount |
	anAccount := ReceptiveAccount new. 
	AccountSummary for: anAccount.
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:42:19' prior: 50673131!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport report) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:22'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 17:42:30'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 17:42:37' prior: 50673157!
for: anAccount 
	^self new initializeFor: anAccount ! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:40'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:42:47'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:42:47'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:42:56' prior: 50673181!
initializeFor: anAccount 
	account := anAccount.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:57'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:03'!
report
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:34' prior: 50673195!
report
	^'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:43:35'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:59' prior: 50673200!
report
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:44:00'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:45:53' prior: 50669817!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (summaryReport report) equals: reportPrinted.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:45:56' prior: 50673217!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:45:58'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:05:22' prior: 50673208!
report
	
	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:33:52' prior: 50673251!
report

	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:36:31' prior: 50673256!
report
	| report |
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:01'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:37:13'!
startSummaryReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:37:36' prior: 50673273!
startSummaryReport: report with: anAccountSummary 
	^report! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:40'!
FAILURE!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:40'!
FAILURE!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:48'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:57'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:40:52' prior: 50673279!
startSummaryReport: report with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReport: report with: anAccountSummary].
	"^report"! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:40:57'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:41:07'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:42:48' prior: 50673358!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReport: report forDeposit: self.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:42:52'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:43:04'!
fillReport: report forDeposit: aDeposit 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:44:39' prior: 50673373!
fillReport: report forDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:44:41'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:44:48'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:44:54'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:45:00'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 18:45:05'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:23:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 19:26:36' prior: 50670031!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:26:37'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:26:45'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:33:26' prior: 50673429!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReport: report forWithdraw: self. ! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:33:29'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:33:36'!
fillReport: report forWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:46:08' prior: 50673445!
fillReport: report forWithdraw: aWithdraw 
	report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 19:46:25'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:17:46' prior: 50670110!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:17:53'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:18:18'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:19:36' prior: 50670146!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryReport := AccountSummary for: originAccount .
	summaryReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (originAccount accountSummaryReport) equals: originReport.
	self assert: (receiverAccount accountSummaryReport) equals: receiverReport.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:21:44' prior: 50673578!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport ) equals: originReport.
	self assert: (summaryReceiverReport ) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:21:48'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:21:48'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:00' prior: 50673604!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport report ) equals: originReport.
	self assert: (summaryReceiverReport report ) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:24:02'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:07'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:43' prior: 50673667!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReport: report forOriginTransfer: self ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:24:46'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:24:56'!
fillReport: report forOriginTransfer: anOriginTransfer 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:26:43' prior: 50673682!
fillReport: report forOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:26:45'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:26:51'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:27:23' prior: 50673699!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReport: report forReceiverTransfer: self.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:27:27'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:27:34'!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:28:11' prior: 50673714!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:28:15' prior: 50673720!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:21'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:32:29' prior: 50670281!
test06
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:32:33'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:32:56'!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	! !

!methodRemoval: ReportesTests #test06 stamp: 'CJF 10/24/2023 20:32:59'!
test06
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	!

!methodRemoval: ReceptiveAccount #accountSummaryReport stamp: 'CJF 10/24/2023 20:34:47'!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 20:40:37'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:40:25' prior: 50670327!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: transferReport equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:40:47'!
ERROR!
!TransferNet class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 20:40:56'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!TransferNet class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 20:41:04' prior: 50673933!
for: anAccount 
	^self new initializeFor: anAccount ! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:05'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 20:41:14'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'CJF 10/24/2023 20:41:14'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TransferNet methodsFor: 'initialization' stamp: 'CJF 10/24/2023 20:41:17' prior: 50673957!
initializeFor: anAccount 
	account := anAccount.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:18'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:41:33' prior: 50673920!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:34'!
ERROR!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:41:42'!
report
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:41:48' prior: 50673985!
report
	^0! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:58'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:43:14' prior: 50670376!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:43:15'!
FAILURE!

!methodRemoval: AccountSummary #giveMeReportFor: stamp: 'CJF 10/24/2023 20:47:17'!
giveMeReportFor: aTransaction 
	^aTransaction report
!

!methodRemoval: AccountSummary #giveMeReportFor:with: stamp: 'CJF 10/24/2023 20:47:41'!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction report!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:58:52' prior: 50673989!
report
	|report|
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:00:10'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:00:10'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:00:32'!
startTransferNetReport: report with: aTransferNet 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:06:09' prior: 50674082!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNet: aTotalTransfer with: aTransferNet ] .
	^aTotalTransfer ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:06:24' prior: 50674088!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNet: aTotalTransfer with: aTransferNet ] .
	^aTotalTransfer ! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:11'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:23'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:51'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:08:54'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:08:54'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:09:09'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:10:10'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:10:10'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:16:22' prior: 50674124!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAs: self.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:16:30'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:16:42'!
affectTotalTransferAs: aReceiverTransfer 
	self shouldBeImplemented.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:18:35'!
Object subclass: #TransferNet
	instanceVariableNames: 'account totalTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:18:32' prior: 50674148!
affectTotalTransferAs: aReceiverTransfer 
	totalTransfer := aReceiverTransfer affectTransferNet: totalTransfer.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:18:50'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:19:36' prior: 50674069!
report
	 
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:19:36'!
Object subclass: #TransferNet
	instanceVariableNames: 'account totalTransfer report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 21:19:41' prior: 50674173!
report
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:19:50'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:19:54'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:19:54'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:22:36' prior: 50674162!
affectTotalTransferAs: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:22:48'!
Object subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:22:54'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:22:57'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:23:52' prior: 50670492!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:24:00'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:24:04'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:25:04' prior: 50674242!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAs: self! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:26:13' prior: 50674248!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:26:26'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:26:32'!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:27:11' prior: 50674265!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:28:36' prior: 50672486!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport := TransferNet anAccount .
	self assert: (transferReport report )equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:28:39'!
ERROR!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:29:37' prior: 50674324!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:29:40'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:29:48'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:16' prior: 50674367!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:30:19'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:29'!
affectTotalTransferAsDeposit: aDeposit 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:49' prior: 50674384!
affectTotalTransferAsDeposit: aDeposit 
	report := report + 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:30:51'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:57'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:21' prior: 50674399!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:24'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:28'!
affectTotalTransferAsWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:44' prior: 50674416!
affectTotalTransferAsWithdraw: aWithdraw 
	report := report + 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:03'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:32:34' prior: 50670596!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:32:41'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:41'!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:47'!
PASSED!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:33:40'!
affectTotalTransferAsReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:33:40' prior: 50674138!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAs: stamp: 'CJF 10/24/2023 21:33:40'!
affectTotalTransferAs: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!classRenamed: #ReportesTests as: #ReportTests stamp: 'CJF 10/24/2023 21:34:05'!
Smalltalk renameClassNamed: #ReportesTests as: #ReportTests!

TestCase subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:34:20'!
TestCase subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TransferNetReport as: #TransferNetTests stamp: 'CJF 10/24/2023 21:35:27'!
Smalltalk renameClassNamed: #TransferNetReport as: #TransferNetTests!

TestCase subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:35:40'!
TestCase subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:35:56'!
Transfer subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:36:05'!
Reports subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:36:22'!
Reports subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTests methodsFor: 'no messages' stamp: 'CJF 10/24/2023 21:37:08'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:20'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:33'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:41'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:51'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: ReportTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:37:55'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.!

!methodRemoval: ReportTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:37:57'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!methodRemoval: ReportTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:37:58'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.!

!methodRemoval: ReportTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:37:59'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.!

!methodRemoval: ReportTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:38:00'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:06'!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !

!methodRemoval: TransferNetTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:38:06'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:10'!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !

!methodRemoval: TransferNetTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:38:10'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:15'!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !

!methodRemoval: TransferNetTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:38:15'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:28'!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !

!methodRemoval: TransferNetTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:38:28'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:34'!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: TransferNetTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:38:34'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

TestCase subclass: #Tests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Tests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:40:45'!
TestCase subclass: #Tests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(24 October 2023 21:41:28) CuisUniversity-5981.image priorSource: 10914421!

Tests subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:41:39'!
Tests subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:17'!
Tests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransfersTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:25'!
Tests subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:34'!
Tests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:49:53' prior: 50674097!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
	^aTotalTransfer ! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:13'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:13'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:17'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:52:15'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:52:47' prior: 50675202!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.! !

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:52:52'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:53:10'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:10'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:15'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:15'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:53:22'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:53:43' prior: 50675270!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.! !

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:47'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:12'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:18'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:35' prior: 50675314!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. ! !

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:36'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:42'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:54' prior: 50675329!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self ! !

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:57'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!methodRemoval: Withdraw #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:22'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self !

!methodRemoval: ReceiverTransfer #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:33'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.!

!methodRemoval: OriginTransfer #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:39'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.!

!methodRemoval: Deposit #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:47'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:34' prior: 50673379!
fillReport: aReport forDeposit: aDeposit 
	^aReport addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:44' prior: 50673688!
fillReport: aReport forOriginTransfer: anOriginTransfer 
	^aReport addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:55' prior: 50673728!
fillReport: aReport forReceiverTransfer: aReceiverTransfer 
	^aReport addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:58:01' prior: 50673451!
fillReport: aReport forWithdraw: aWithdraw 
	aReport addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:58:19' prior: 50673261!
report
	 
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:58:19'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:58:51' prior: 50675419!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

----SNAPSHOT----(24 October 2023 22:06:18) CuisUniversity-5981.image priorSource: 10990352!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:04'!
fillReportForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:20'!
fillReportForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:35'!
fillReportForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:53'!
fillReportForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:12:22' prior: 50673363!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:12:43' prior: 50673673!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self ! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:12:57' prior: 50673705!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:13:16' prior: 50673435!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:14:33' prior: 50673346!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReport: aReport with: anAccountSummary].
	"^report"! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:15:48'!
fillReportWith: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:16:00'!
fillReportWith: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self ! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:16:11'!
fillReportWith: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:16:21'!
fillReportWith: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. ! !

!methodRemoval: Withdraw #fillReport:with: stamp: 'CJF 10/24/2023 22:18:17'!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:18:51' prior: 50675498!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"! !

!methodRemoval: Deposit #fillReport:with: stamp: 'CJF 10/24/2023 22:19:00'!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.!

!methodRemoval: OriginTransfer #fillReport:with: stamp: 'CJF 10/24/2023 22:19:06'!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self !

!methodRemoval: ReceiverTransfer #fillReport:with: stamp: 'CJF 10/24/2023 22:19:12'!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!methodRemoval: ReceptiveAccount #transferNetReport stamp: 'CJF 10/24/2023 22:21:31'!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction |  total :=  (aTransaction affectTransferNet: total) ].
	
	^total

!

!methodRemoval: AccountSummary #fillReport:forDeposit: stamp: 'CJF 10/24/2023 22:22:18'!
fillReport: aReport forDeposit: aDeposit 
	^aReport addLast: 'Depósito por ' , aDeposit value asString, '.'. !

!methodRemoval: AccountSummary #fillReport:forOriginTransfer: stamp: 'CJF 10/24/2023 22:22:20'!
fillReport: aReport forOriginTransfer: anOriginTransfer 
	^aReport addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'!

!methodRemoval: AccountSummary #fillReport:forReceiverTransfer: stamp: 'CJF 10/24/2023 22:22:21'!
fillReport: aReport forReceiverTransfer: aReceiverTransfer 
	^aReport addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.!

!methodRemoval: AccountSummary #fillReport:forWithdraw: stamp: 'CJF 10/24/2023 22:22:22'!
fillReport: aReport forWithdraw: aWithdraw 
	aReport addLast: 'Extracción por ' , aWithdraw value asString , '.'!

!methodRemoval: Deposit #report stamp: 'CJF 10/24/2023 22:29:03'!
report
	^'Depósito por ' , value asString, '.' !

!methodRemoval: OriginTransfer #report stamp: 'CJF 10/24/2023 22:29:33'!
report
	^ 'Salida por transferencia de ' , transfer value asString , '.' !

!methodRemoval: ReceiverTransfer #report stamp: 'CJF 10/24/2023 22:29:47'!
report
	^'Entrada por transferencia de ', transfer value asString , '.'!

!methodRemoval: Withdraw #report stamp: 'CJF 10/24/2023 22:29:50'!
report
	^'Extracción por ', value asString, '.'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:31:50'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:09'!
TransferTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:22'!
TransferTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RegularTransaction category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:46'!
AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

RegularTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:54'!
RegularTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

RegularTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:33:02'!
RegularTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'CJF 10/24/2023 22:33:33'!
isContraryTransfer: pata 
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

----QUIT----(24 October 2023 23:05:52) CuisUniversity-5981.image priorSource: 11001331!

----STARTUP---- (24 October 2023 23:17:48) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:18:49'!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:20'!
startTransferNetReportWith: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:30' prior: 50675972!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
! !
!AccountSummary methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:44' prior: 50675435!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:56' prior: 50674187!
report
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !

!methodRemoval: ReceptiveAccount #startTransferNetReport:with: stamp: 'CJF 10/24/2023 23:20:06'!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
	^aTotalTransfer !

!methodRemoval: ReceptiveAccount #startSummaryReport:with: stamp: 'CJF 10/24/2023 23:20:10'!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

----QUIT----(24 October 2023 23:20:57) CuisUniversity-5981.image priorSource: 11018068!

----STARTUP---- (25 October 2023 20:13:57) as /home/camila/Desktop/CUIS PORTFOLIO 2/CuisUniversity-5981.image!


!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:15:40'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:15:43'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:15:45'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:15:47'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:15:49'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:15:51'!
PASSED!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:18:41'!
executeForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:18:41' prior: 50675506!
fillReportWith: anAccountSummary 
	^anAccountSummary executeForDeposit: self.! !

!methodRemoval: AccountSummary #fillReportForDeposit: stamp: 'camila 10/25/2023 20:18:41'!
fillReportForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. !
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:18:59'!
executeForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:18:59' prior: 50675512!
fillReportWith: anAccountSummary 
	anAccountSummary executeForOriginTransfer: self ! !

!methodRemoval: AccountSummary #fillReportForOriginTransfer: stamp: 'camila 10/25/2023 20:18:59'!
fillReportForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:19:17'!
executeForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:19:17' prior: 50675518!
fillReportWith: anAccountSummary 
	anAccountSummary executeForReceiverTransfer: self.! !

!methodRemoval: AccountSummary #fillReportForReceiverTransfer: stamp: 'camila 10/25/2023 20:19:17'!
fillReportForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:19:39'!
executeForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:19:39' prior: 50675524!
fillReportWith: anAccountSummary 
	^ anAccountSummary executeForWithdraw: self. ! !

!methodRemoval: AccountSummary #fillReportForWithdraw: stamp: 'camila 10/25/2023 20:19:39'!
fillReportForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:19:57'!
PASSED!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:14'!
executeForDeposit: aDeposit 
	report := report + 0.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:14' prior: 50675319!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForDeposit: self. ! !

!methodRemoval: TransferNet #affectTotalTransferAsDeposit: stamp: 'camila 10/25/2023 20:20:14'!
affectTotalTransferAsDeposit: aDeposit 
	report := report + 0.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:29'!
executeForWithdraw: aWithdraw 
	report := report + 0.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:29' prior: 50675334!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForWithdraw: self ! !

!methodRemoval: TransferNet #affectTotalTransferAsWithdraw: stamp: 'camila 10/25/2023 20:20:29'!
affectTotalTransferAsWithdraw: aWithdraw 
	report := report + 0.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:44'!
executeForReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:44' prior: 50675208!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForReceiverTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAsReceiverTransfer: stamp: 'camila 10/25/2023 20:20:44'!
affectTotalTransferAsReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:21:06'!
executeForOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:21:06' prior: 50675276!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForOriginTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAsOriginTransfer: stamp: 'camila 10/25/2023 20:21:06'!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).!

Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:07'!
Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:18'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:23'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:25:39'!
PASSED!
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:37'!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:46'!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:54'!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:28:01'!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:28:11'!
initializeFor: anAccount

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:28:24'!
report

	self subclassResponsibility! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!methodRemoval: AccountSummary #initializeFor: stamp: 'camila 10/25/2023 20:28:52'!
initializeFor: anAccount 
	account := anAccount.!

!methodRemoval: TransferNet #initializeFor: stamp: 'camila 10/25/2023 20:28:56'!
initializeFor: anAccount 
	account := anAccount.!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ' report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:31'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: ' report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:35'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:41'!
Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:29:50' prior: 50676453!
initializeFor: anAccount

	account := anAccount .! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:29:54'!
PASSED!
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54'!
buildReport

	self subclassResponsibility! !
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54' overrides: 50676624!
buildReport
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54' overrides: 50676624!
buildReport
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673637!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport buildReport ) equals: originReport.
	self assert: (summaryReceiverReport buildReport ) equals: receiverReport.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673854!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildReport) equals: originReport.
	! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673508!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport buildReport) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674856!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673232!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildReport) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674942!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674836!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674881!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674906!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 10.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673142!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673410!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildReport) equals: reportPrinted.! !

!methodRemoval: AccountFunctionality #report stamp: 'camila 10/25/2023 20:31:54'!
report

	self subclassResponsibility!

!methodRemoval: AccountSummary #report stamp: 'camila 10/25/2023 20:31:54'!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.!

!methodRemoval: TransferNet #report stamp: 'camila 10/25/2023 20:31:54'!
report
	report := 0.
	account startTransferNetReportWith: self.
	^report.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

----SNAPSHOT----(25 October 2023 20:33:09) CuisUniversity-5981.image priorSource: 11023917!
!TransferTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:10'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:45'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'balance' stamp: 'camila 10/25/2023 20:37:50' overrides: 50668711!
affectBalance: aBalance

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:57'!
affectTransferNet: total

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:38:16'!
fillReportWith: anAccountSummary

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:38:21'!
initializeFor: aValue

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'value' stamp: 'camila 10/25/2023 20:38:27' overrides: 50668707!
value

	self subclassResponsibility! !

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:38:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:38:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:39:06'!
AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:39:10'!
AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #RegularTransaction stamp: 'camila 10/25/2023 20:39:21'!
AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'camila 10/25/2023 20:39:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:39:33'!
PASSED!
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:39:49'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'balance' stamp: 'camila 10/25/2023 20:39:53' prior: 50668711!
affectBalance: aBalance

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:39:56'!
affectTransferNet: total

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:40:01'!
fillReportWith: anAccountSummary

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:40:05'!
initializeFor: aValue

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'value' stamp: 'camila 10/25/2023 20:40:11' prior: 50668707 overrides: 16902254!
value

	self subclassResponsibility! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:45:32'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:46:32'!
test02TransferNetReportForAccountWithReceiverTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.! !

!methodRemoval: TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:46:32'!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:46:43'!
test03TransferNetReportForAccountWithOriginTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.! !

!methodRemoval: TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:46:43'!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:47:30'!
test06TransferNetReportWithDeposit
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 0.! !

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:47:31'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:48:21'!
test07TransferNetReportWithWithdraw
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 0.! !

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!methodRemoval: OriginTransfer #affectTransferNet: stamp: 'camila 10/25/2023 20:50:39'!
affectTransferNet: total 
	^total - transfer value.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!methodRemoval: ReceiverTransfer #affectTransferNet: stamp: 'camila 10/25/2023 20:50:59'!
affectTransferNet: total 
	^total + transfer value!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:51:06'!
ERROR!
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 20:52:09' prior: 50676311 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	report := report + (aReceiverTransfer value).! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!methodRemoval: Deposit #affectTransferNet: stamp: 'camila 10/25/2023 20:52:22'!
affectTransferNet: total 
	^total!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'camila 10/25/2023 20:52:29'!
affectTransferNet: total 
	^total!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'camila 10/25/2023 20:52:38'!
affectTransferNet: total

	self subclassResponsibility!
!ReceiverTransfer methodsFor: 'initialize' stamp: 'camila 10/25/2023 20:53:34' overrides: 50677112!
initializeFor: aTransfer 
	transfer := aTransfer.! !
!ReceiverTransfer class methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:53:34' prior: 50671350!
withTransfer: aTransfer 
	^self new initializeFor: aTransfer ! !

!methodRemoval: ReceiverTransfer #initializeWithTransfer: stamp: 'camila 10/25/2023 20:53:34'!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 20:53:44'!
PASSED!
!OriginTransfer methodsFor: 'initialize' stamp: 'camila 10/25/2023 20:54:03' overrides: 50677112!
initializeFor: aTransfer 
	transfer := aTransfer.! !
!OriginTransfer class methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:54:03' prior: 50671311!
withTransfer: aTransfer
	^self new initializeFor: aTransfer ! !

!methodRemoval: OriginTransfer #initializeWithTransfer: stamp: 'camila 10/25/2023 20:54:03'!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:54:09'!
PASSED!
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18'!
buildResult

	self subclassResponsibility! !
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18' overrides: 50677536!
buildResult
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18' overrides: 50677536!
buildResult
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676757!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677257!
test07TransferNetReportWithWithdraw
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676811!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677194!
test03TransferNetReportForAccountWithOriginTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676742!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676781!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 10.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676726!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677169!
test02TransferNetReportForAccountWithReceiverTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677219!
test06TransferNetReportWithDeposit
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676799!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676695!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676643!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport buildResult ) equals: originReport.
	self assert: (summaryReceiverReport buildResult ) equals: receiverReport.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676670!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildResult) equals: originReport.
	! !

!methodRemoval: AccountFunctionality #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport

	self subclassResponsibility!

!methodRemoval: AccountSummary #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.!

!methodRemoval: TransferNet #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport
	report := 0.
	account startTransferNetReportWith: self.
	^report.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:55:32'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'camila 10/25/2023 20:56:44'!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountFunctionality].
! !

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:59:47'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:03'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:13'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:18'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:00:27' prior: 50677541 overrides: 50677536!
buildResult
	result := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^result.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:00:34' prior: 50677549 overrides: 50677536!
buildResult
	result := 0.
	account startTransferNetReportWith: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:00:43'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:00:52'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:00:52'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' overrides: 50676576!
initializeFor: anAccount

	account := anAccount .! !
!AccountSummary methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' overrides: 50676576!
initializeFor: anAccount

	account := anAccount .! !
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' prior: 50676576!
initializeFor: anAccount

	self subclassResponsibility! !
!AccountSummary methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:39' prior: 50677957 overrides: 50677962!
initializeFor: anAccount

	account := anAccount .
	result := OrderedCollection new.! !
!TransferNet methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:54' prior: 50677952 overrides: 50677962!
initializeFor: anAccount

	account := anAccount .
	result := 0.! !

Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:02:01'!
Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:02:16'!
Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:02:19'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:02:21'!
ERROR!
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:41' prior: 50676177 overrides: 50676433!
executeForDeposit: aDeposit 
	^result addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:46' prior: 50676195 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	^result addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:49' prior: 50676216 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	^result addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:53' prior: 50676237 overrides: 50676448!
executeForWithdraw: aWithdraw 
	^result addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:59' prior: 50676279 overrides: 50676433!
executeForDeposit: aDeposit 
	result := result + 0.! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:04' prior: 50676331 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	result := result - (anOriginTransfer value).! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:12' prior: 50677368 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	result := result + (aReceiverTransfer value).! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:18' prior: 50676295 overrides: 50676448!
executeForWithdraw: aWithdraw 
	result := result + 0.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:27' prior: 50678048 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	result addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:30' prior: 50678056 overrides: 50676448!
executeForWithdraw: aWithdraw 
	result addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:34' prior: 50678033 overrides: 50676433!
executeForDeposit: aDeposit 
	result addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:38' prior: 50678040 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	result addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

----SNAPSHOT----(25 October 2023 21:03:55) CuisUniversity-5981.image priorSource: 11049376!
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:04:16' prior: 50677896 overrides: 50677536!
buildResult
	account startTransferNetReportWith: self.
	^result.! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:04:24'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:04:53' prior: 50677888 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:04:56'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:24' prior: 50677827!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
! !
!Deposit methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:36' prior: 50676184 overrides: 50677107!
fillReportWith: anAccountSummary 
	anAccountSummary executeForDeposit: self.! !
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:50' prior: 50676244 overrides: 50677107!
fillReportWith: anAccountSummary 
	anAccountSummary executeForWithdraw: self. ! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:06:02'!
PASSED!
!Deposit methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:20'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!OriginTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:36'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!ReceiverTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:41'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:47'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !

!methodRemoval: ReceptiveAccount #startSummaryReportWith: stamp: 'camila 10/25/2023 21:07:07'!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
!

!methodRemoval: ReceptiveAccount #startTransferNetReportWith: stamp: 'camila 10/25/2023 21:07:09'!
startTransferNetReportWith: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:25'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:33'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:41'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:50'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:08:01' prior: 50678206 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account startFunctionalityResult: self.
	^result.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:08:07' prior: 50678172 overrides: 50677536!
buildResult
	account startFunctionalityResult: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:08:12'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:08:12'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:08:14'!
FAILURE!
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:09:01' prior: 50678324!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForWithdraw: self. ! !

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:09:03'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:07'!
FAILURE!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:09:07'!
FAILURE!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:12'!
FAILURE!
!OriginTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:09:49' prior: 50678312!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForOriginTransfer: self. ! !

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:51'!
FAILURE!
!ReceiverTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:10:18' prior: 50678318!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForReceiverTransfer: self. ! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!methodRemoval: Deposit #addToTransferNetWith: stamp: 'camila 10/25/2023 21:10:47'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForDeposit: self. !

!methodRemoval: Deposit #fillReportWith: stamp: 'camila 10/25/2023 21:10:50'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForDeposit: self.!

!methodRemoval: OriginTransfer #addToTransferNetWith: stamp: 'camila 10/25/2023 21:10:54'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForOriginTransfer: self.!

!methodRemoval: OriginTransfer #fillReportWith: stamp: 'camila 10/25/2023 21:10:56'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForOriginTransfer: self !

!methodRemoval: ReceiverTransfer #addToTransferNetWith: stamp: 'camila 10/25/2023 21:11:02'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForReceiverTransfer: self.!

!methodRemoval: ReceiverTransfer #fillReportWith: stamp: 'camila 10/25/2023 21:11:05'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForReceiverTransfer: self.!

!methodRemoval: Withdraw #addToTransferNetWith: stamp: 'camila 10/25/2023 21:11:10'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForWithdraw: self !

!methodRemoval: Withdraw #fillReportWith: stamp: 'camila 10/25/2023 21:11:12'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForWithdraw: self. !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!methodRemoval: AccountTransaction #addToTransferNetWith: stamp: 'camila 10/25/2023 21:12:16'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility!

!methodRemoval: AccountTransaction #fillReportWith: stamp: 'camila 10/25/2023 21:12:19'!
fillReportWith: anAccountSummary

	self subclassResponsibility!
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 21:12:27'!
executeFunctionality: anAccountFuncionality

	self subclassResponsibility! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:12:52'!
PASSED!
!ReceptiveAccount methodsFor: 'functionality' stamp: 'camila 10/25/2023 21:15:10'!
buildFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:15:10' prior: 50678405 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account buildFunctionalityResult: self.
	^result.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:15:10' prior: 50678413 overrides: 50677536!
buildResult
	account buildFunctionalityResult: self.
	^result.! !

!methodRemoval: ReceptiveAccount #startFunctionalityResult: stamp: 'camila 10/25/2023 21:15:10'!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:15:18'!
PASSED!
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:16:26'!
isReceiverLeg: anAccount 
	^receiverTransfer = anAccount ! !

!methodRemoval: Transfer #isPataDestino: stamp: 'camila 10/25/2023 21:16:26'!
isPataDestino: anAccount 
	^receiverTransfer = anAccount !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:16:34'!
isOriginLeg: anAccount 
	^originTransfer = anAccount ! !

!methodRemoval: Transfer #isPataOrigen: stamp: 'camila 10/25/2023 21:16:34'!
isPataOrigen: anAccount 
	^originTransfer = anAccount !

!methodRemoval: Transfer #pataOrigen stamp: 'camila 10/25/2023 21:16:47'!
pataOrigen
	self shouldBeImplemented.!

!methodRemoval: Transfer #isReceiverLeg: stamp: 'camila 10/25/2023 21:16:50'!
isReceiverLeg: anAccount 
	^receiverTransfer = anAccount !

!methodRemoval: Transfer #isOriginLeg: stamp: 'camila 10/25/2023 21:16:51'!
isOriginLeg: anAccount 
	^originTransfer = anAccount !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:16:59'!
PASSED!
!Transfer methodsFor: 'category-name' stamp: 'camila 10/25/2023 21:17:16'!
isOriginLeg: originAccount 
	^originAccount hasRegistered: originTransfer.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:16' prior: 50671767!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiver: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!methodRemoval: Transfer #isOrigin: stamp: 'camila 10/25/2023 21:17:16'!
isOrigin: originAccount 
	^originAccount hasRegistered: originTransfer.!
!Transfer methodsFor: 'category-name' stamp: 'camila 10/25/2023 21:17:26'!
isReceiverLeg: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .! !

!methodRemoval: Transfer #isReceiver: stamp: 'camila 10/25/2023 21:17:26'!
isReceiver: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .!
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:17:52'!
receiverTransfer
	^receiverTransfer ! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:52' prior: 50672043!
isContraryTransfer: pata 
	^transfer receiverTransfer = pata.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:52' prior: 50672078!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTransfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!methodRemoval: Transfer #receiverTrasnfer stamp: 'camila 10/25/2023 21:17:52'!
receiverTrasnfer
	^receiverTransfer !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:18:05'!
receiverTransferLeg
	^receiverTransfer ! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:18:05' prior: 50679004!
isContraryTransfer: pata 
	^transfer receiverTransferLeg = pata.! !

!methodRemoval: Transfer #receiverTransfer stamp: 'camila 10/25/2023 21:18:05'!
receiverTransfer
	^receiverTransfer !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:18:15'!
originTransferLeg
	^originTransfer! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:18:15' prior: 50672055!
isContraryTransfer: pata 
	^transfer originTransferLeg = pata.! !

!methodRemoval: Transfer #originTransfer stamp: 'camila 10/25/2023 21:18:15'!
originTransfer
	^originTransfer!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:18:25'!
ERROR!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:18:25'!
ERROR!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:18:49' prior: 50679010!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransferLeg .
	receiver := transfer receiverTransferLeg . 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:18:50'!
PASSED!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:18:56' prior: 50678967!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiverLeg: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:18:57'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:19:02'!
PASSED!
!ReceiverTransfer methodsFor: 'transferVerification' stamp: 'camila 10/25/2023 21:19:30' prior: 50679048!
isContraryTransfer: aTransferLeg 
	^transfer originTransferLeg = aTransferLeg.! !
!OriginTransfer methodsFor: 'transferVerification' stamp: 'camila 10/25/2023 21:19:38' prior: 50679035!
isContraryTransfer: aTransferLeg 
	^transfer receiverTransferLeg = aTransferLeg.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:19:42'!
PASSED!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:19:51' prior: 50679095!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiverLeg: receiverAccount ).! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:08' prior: 50677680!
test01ReportForNewReceptiveAccountPrintBalanceZero

	| anAccount summaryReport|
	
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:24' prior: 50677640!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:33' prior: 50677578!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:38' prior: 50679188!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:50' prior: 50677692!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance

	| anAccount reportPrinted summaryReport|
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:54' prior: 50679203!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:58' prior: 50679218!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:21:15' prior: 50677710!
test05ReportPrintTransferOutput

	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryOriginReport buildResult ) equals: originReport.
	self assert: (summaryReceiverReport buildResult ) equals: receiverReport.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:21:43' prior: 50677737!
test06ReportPrintAllTransactions

	| anAccount originReport  summaryReport|
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	summaryReport := AccountSummary for: anAccount .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildResult) equals: originReport.
	! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:21:53' prior: 50677555!
test01TransferNetReportForNewAccountReturnZero

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:05' prior: 50677656!
test02TransferNetReportForAccountWithReceiverTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:08' prior: 50679343!
test02TransferNetReportForAccountWithReceiverTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:16' prior: 50677594!
test03TransferNetReportForAccountWithOriginTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: -20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:27' prior: 50677622!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 10.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:35' prior: 50677607!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 10.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:41' prior: 50677669!
test06TransferNetReportWithDeposit
	
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:49' prior: 50677566!
test07TransferNetReportWithWithdraw

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:59' prior: 50679426!
test07TransferNetReportWithWithdraw

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !

----SNAPSHOT----(25 October 2023 21:23:46) CuisUniversity-5981.image priorSource: 11088562!