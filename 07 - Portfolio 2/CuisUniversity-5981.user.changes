

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 October 2023 17:24:11) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:25:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:25:25'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:29:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:29:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:32:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:44'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:34:58'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'CJF 10/2/2023 17:42:40' prior: 50653801!
asRot13
	"| asRotAcc |
	asRotAcc := OrderedCollection new.
	self do: [ :aCharacter | asRotAcc addLast: aCharacter asRot13 ].
	^asRotAcc "
	"^self inject: '' into: [ :asRotAcc :aCharacter | 
		asRotAcc . (aCharacter asRot13).
		self. ]."
	^self collect: [ :aChar | aChar asRot13 ].
	"self size = 1 ifTrue: [^String with: self first asRot13 ].
	self size = 2 ifTrue: [^String with: self first asRot13 with: self last asRot13 ]."! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:42:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:43:01'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/2/2023 17:43:11'!
PASSED!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'CJF 10/2/2023 17:53:22'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

----SNAPSHOT----(2 October 2023 17:54:17) CuisUniversity-5981.image priorSource: 10309400!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:54:42'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:57:00'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:57:47'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:58:08' prior: 50654145!
factorize
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 17:58:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 17:58:23'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 17:58:39'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 17:59:18' prior: 50654150!
factorize
	|resBag|
	resBag := Bag new.! !

----End fileIn of C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\Packages\TerseGuide.pck.st----!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:01:11' prior: 50654195!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag addLast: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:13'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:01:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:07'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:02:50' prior: 50657120!
factorize
	|resBag|
	resBag := Bag new.
	(self = 2) ifTrue: [ resBag add: self].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:02:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:03:04'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:03:44'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:06:04' prior: 50657146!
factorize
	|resBag|
	resBag := Bag new.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657214!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:09:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:10:16'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:16'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:10:17'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:10:17'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:11:59'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:13:52' prior: 50657220!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:21:34' prior: 50657291!
factorize
	|resBag value |
	resBag := Bag new.
	value := self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:09:55' prior: 50657301!
factorize
	|resBag|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	(2 to: self )do:[ :cont | (self isDivisibleBy: cont ) ifTrue: [resBag add: cont]. ].
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:24:45' prior: 50657311!
factorize
	|resBag value numero |
	resBag := Bag new.
	value := 2.
	numero = self.
	"(self = 2) ifTrue: [ resBag add: self]."
	
	(value to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:24:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:04'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:11'!
ERROR!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:25:44' prior: 50657320!
factorize
	|resBag |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:25:54'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:26:58' prior: 50657353!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: self ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:07' prior: 50657367!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (self isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:28' prior: 50657377!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ ^(resBag add: cont)   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:27:58' prior: 50657387!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:28:16' prior: 50657397!
factorize
	|resBag numero|
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
		
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:28:39'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:28:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:04'!
FAILURE!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:29:25' prior: 50657480!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: 8 factorize equals: (Bag with: 2 with: 2 with: 2)
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:29:27'!
FAILURE!
!SmallInteger methodsFor: 'factorizeEj' stamp: 'CJF 10/2/2023 18:38:43' prior: 50657408!
factorize
	|resBag numero |
	resBag := Bag new.

	"(self = 2) ifTrue: [ resBag add: self]."
	
	numero := self.
	"	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	(2 to: numero ) do: [ :cont | (numero isDivisibleBy: cont ) 
		ifTrue: [ resBag add: cont . numero := numero / cont   ]. ].
	
	start := 2."
	[(numero = 1) not ] whileTrue: [ |aDivisor|
			aDivisor := (2 to: numero ) detect: [ :aDiv | numero isDivisibleBy: aDiv. ] ifNone:[ ^resBag .].
			resBag add: aDivisor.
			numero := numero / aDivisor.
		].
	
	^resBag .! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:38:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CJF 10/2/2023 18:39:06'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!

TDDBabyStepsGameAnagrams start.!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'CJF 10/2/2023 18:59:49'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:00:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:00:57'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:05'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:01:18' prior: 50657623!
anagrams
	^Set with: ''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:19'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:01:24'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:01:24'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:24'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:01:38'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:02:04' prior: 50657627!
anagrams
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:02:09'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:02:09'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:02:43'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:03:28' prior: 50657680!
anagrams
	(self size = 3) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:03:29'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:04:24' prior: 50657744!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:04:28'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:28'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:04:29'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:04:29'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:05:10'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:15:05' prior: 50657755!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet|
		resSet := Set new.
			resSet add: (self )
		].
	^Set with: self! !

a := 'hola'.
a first asString!

a := 'hola'.
a first asString!

a := 'hola'.
a first!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:23:15' prior: 50657844!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3).
		resSet add: (self at:1 asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( self at: 3 asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( self at: 2 asString ) , resto.
		resSet add: ( self at: 2 asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:23:17'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:24:40'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:25:47' prior: 50657855!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/2/2023 19:25:54'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:25:55'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 19:27:25'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/2/2023 19:44:51' prior: 50657900!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
"	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		resSet := Set new.
		
		primShuf collect:[ :anAnnagrama |  ].
		
		
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/2/2023 20:23:28'!
FAILURE!

----QUIT----(2 October 2023 20:23:38) CuisUniversity-5981.image priorSource: 10319435!

----STARTUP---- (3 October 2023 10:46:31) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:46:45'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:50:42' prior: 50658060!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:44'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:50:48'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:52:09' prior: 50658163!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:3 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:52:15'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 10:58:19' prior: 50658221!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		].
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:21'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 10:58:35'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CJF 10/3/2023 10:58:35'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 10:58:35'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:09:08' prior: 50658279!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'CJF 10/3/2023 11:09:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:09:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:09:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:51'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:09:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:10:42'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:11:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:11:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:11:11'!
ERROR!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:11:20'!
mergeSubAnnagramsWithOut: aChar 
	self shouldBeImplemented.! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:16:26' prior: 50658583!
mergeSubAnnagramsWithOut: aChar 
	|copia subAnnagrams |
	copia := self copyWithout: aChar.
	subAnnagrams := copia anagrams.
	
	^subAnnagrams collect: [ :anAnagram | (aChar asString ) , anAnagram ].! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CJF 10/3/2023 11:16:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CJF 10/3/2023 11:16:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CJF 10/3/2023 11:16:46'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CJF 10/3/2023 11:16:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:16:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:17:58'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:18:23'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:19:57' prior: 50658391!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		self halt.
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:11'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:27'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:30'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/3/2023 11:20:33'!
FAILURE!
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:02' prior: 50658685!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].
	"(self size = 3) ifTrue: [ |resSet resto|
		resSet := Set new.
		resSet add: ((self at:1 )asString ) , (self copyFrom: 2 to: 3).
		resSet add: ((self at:1) asString ) , (self copyFrom: 2 to: 3) reverse.
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2).
		resSet add: ( (self at: 3) asString ) , ( self copyFrom: 1 to: 2) reverse.
		resto := (self copyFrom: 1 to: 1) , (self copyFrom: 3 to: 3).
		resSet add: ( (self at: 2) asString ) , resto.
		resSet add: ( (self at: 2) asString ) , resto reverse.
		^resSet.
		].
	(self size = 4) ifTrue: [ | prim sec ter cua primShuf secShuf terShuf cuaShuf resSett|
		prim := (self at:1 ) asString.
		sec := (self at:2 ) asString.
		ter := (self at:3 ) asString.
		cua := (self at:4 ) asString.
		primShuf := (self copyFrom: 2 to: 4) anagrams .
		secShuf := ((self at:1 ) asString , (self copyFrom: 3 to: 4)) anagrams .
		terShuf := ((self copyFrom: 1 to: 2) , (self at:4 ) asString )  anagrams .
		cuaShuf := ( self copyFrom: 1 to: 3 ) anagrams .
		
		resSett := Set new.
				
		primShuf collect:[ :anAnnagrama | resSett add: (prim , anAnnagrama )].
		secShuf collect:[ :anAnnagrama | resSett add: (sec , anAnnagrama )].
		terShuf collect:[ :anAnnagrama | resSett add: (ter , anAnnagrama )].
		cuaShuf collect:[ :anAnnagrama | resSett add: (cua , anAnnagrama )].
		^resSett .
		]."
	^Set with: self! !
!String methodsFor: 'anagrama' stamp: 'CJF 10/3/2023 11:21:11' prior: 50658764!
anagrams
	(self size = 2) ifTrue: [ ^Set with: self with: self reverse ].
	(self size > 2) ifTrue: [ |resSet|
		resSet := Set new.
		self collect:[ :aChar |  resSet addAll: (self mergeSubAnnagramsWithOut: aChar ) ].
		^resSet
		].

	^Set with: self! !

----QUIT----(3 October 2023 11:21:22) CuisUniversity-5981.image priorSource: 10447267!

----STARTUP---- (5 October 2023 17:20:24) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CJF 10/5/2023 17:20:37'!
FAILURE!

----SNAPSHOT----(5 October 2023 17:21:33) CuisUniversity-5981.image priorSource: 10469659!

TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #TDDCalenadrioTest category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:42:08'!
TestCase subclass: #TDDCalenadrioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 17:51:04'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!TDDCalenadrioTest methodsFor: 'no messages' stamp: 'CJF 10/5/2023 17:50:54'!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	self assert: ((Calendario new) isHoliday: GregorianDay monday) not! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:51:07'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:51:28'!
isHoliday: aRenameMe1 
	self shouldBeImplemented.! !
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:52:11' prior: 50658873!
isHoliday: aWeekday
	^false 
	! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:52:14'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:54:01'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)! !

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:54:16'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 17:59:06'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)! !

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!testRun: #TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 17:59:07'!
PASSED!

!methodRemoval: TDDCalenadrioTest #test03CalendarioReturnFalseIfAParticularDayNotDefined stamp: 'CJF 10/5/2023 18:05:42'!
test03CalendarioReturnFalseIfAParticularDayNotDefined
	self deny: ((Calendario new) isHoliday: September / 05 / 2023)!

!methodRemoval: TDDCalenadrioTest #test02CalendarioReturnFalseIfMonthdayNotDefined stamp: 'CJF 10/5/2023 18:05:44'!
test02CalendarioReturnFalseIfMonthdayNotDefined
	self deny: ((Calendario new) isHoliday: GregorianDayOfMonth today)!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:14:52' prior: 50658863!
test01CalendarioReturnFalseIfWeekdaysNotDefined
	| holidayCalendar aNonHoliday |
	
	holidayCalendar := Calendario new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday )! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:14:53'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:15:50'!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:19'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:17:46' prior: 50658963!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:17:47'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:18:41' prior: 50658878!
isHoliday: aWeekday
	^ aWeekday = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:42'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:18:51'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:20:14' prior: 50658991!
isHoliday: aWeekday
	^ aWeekday day = Sunday
	! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:20:17'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:36:42'!
test03
	| holidayCalendar aMonday aSaturday |
	
	holidayCalendar := Calendario new.
	holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday ).! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:37:02'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:37:12'!
markWeekdayAsHoliday: Saturday 
	self shouldBeImplemented.! !

!classDefinition: #Calendario category: 'TDDCalendario' stamp: 'CJF 10/5/2023 18:49:46'!
Object subclass: #Calendario
	instanceVariableNames: 'aListOfHolidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:49:45' prior: 50659031!
markWeekdayAsHoliday: aDay
	aListOfHolidays add: aDay.! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:49:52'!
ERROR!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:50:51' overrides: 16920235!
initialize
	aListOfHolidays := OrderedCollection new.! !

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:50:58'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:50:58'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:51:30' prior: 50659001!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday .
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:31'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:32'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:33'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:51:37'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:51:37'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:52:03'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:52:39'!
FAILURE!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:53:56'!
FAILURE!
!Calendario methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:54:18' prior: 50659068!
isHoliday: aWeekday
	^ aListOfHolidays includes: aWeekday day
	! !

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:54:20'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:54:23'!
FAILURE!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 18:56:46' prior: 50658980!
test02
	| holidayCalendar aSunday |
	
	holidayCalendar := Calendario new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:47'!
PASSED!

!testRun: #TDDCalenadrioTest #test01CalendarioReturnFalseIfWeekdaysNotDefined stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test02 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!

!testRun: #TDDCalenadrioTest #test03 stamp: 'CJF 10/5/2023 18:56:49'!
PASSED!
!TDDCalenadrioTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/5/2023 20:09:46'!
test04
	| holidayCalendar "aMonday aSaturday "|
	
	holidayCalendar := Calendario new.
	"holidayCalendar markWeekdayAsHoliday: Saturday.
	holidayCalendar markWeekdayAsHoliday: Monday.
	aSaturday := October / 7 / 2023.
	aMonday := October / 9 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday ).
	self assert: (holidayCalendar isHoliday: aMonday )."
	"self deny: holidayCalendar aDayWithMonthIsHoliday: "! !

1@2 x!

1@2 x!

1@2!

a := 1@2.
a x!

a := 1@2.
a x.!

a y.!

----QUIT----(5 October 2023 21:54:48) CuisUniversity-5981.image priorSource: 10470106!

----STARTUP---- (8 October 2023 20:46:17) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/8/2023 20:47:27'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/8/2023 20:47:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/8/2023 20:48:00'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----STARTUP---- (9 October 2023 12:38:28) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDCalendario' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDCalendario'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classDefinition: #MarsRoverTest category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 12:38:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'CJF 10/9/2023 12:39:25'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:14' prior: 50659224!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: valorA.
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:16'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:42:38' prior: 50659228!
test01
	| valorA valorB objetoPrueba |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	self assert: objetoPrueba .! !

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CJF 10/9/2023 12:42:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:01' prior: 50659240!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:50:18' prior: 50659255!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:51:33' prior: 50659267!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:52:32' prior: 50659279!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:26' prior: 50659290!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	objetoPrueba := valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:45' prior: 50659302!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	objetoPrueba = false.
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:53:57' prior: 50659314!
test01
	| valorA valorB objetoPrueba objetoPrueba2 |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	
	objetoPrueba2 := objetoPrueba .
	self assert: objetoPrueba2 .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:54:13' prior: 50659326!
test01
	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53'!
calcularInclude

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 12:56:53' prior: 50659337!
test01
	self calcularInclude.
	! !

!classDefinition: #Obligation category: 'TDDMarsRover' stamp: 'CJF 10/9/2023 15:18:45'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!
!Obligation methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45'!
sendTask

	| valorA valorB |
	
	valorA := OrderedCollection with: 1.
	valorB := OrderedCollection with: 1 with: 3.
	
	valorB includes: (valorA at:1)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CJF 10/9/2023 15:18:45' prior: 50659345!
calcularInclude
	(Obligation new) sendTask! !

!classRemoval: #Obligation stamp: 'CJF 10/9/2023 19:42:44'!
Object subclass: #Obligation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

!classRemoval: #MarsRoverTest stamp: 'CJF 10/9/2023 19:42:44'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDMarsRover'!

----End fileIn of C:\Users\crist\Downloads\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:28:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:34:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:34:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:40:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:44:44' prior: 50659602!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:44:47'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:10'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:45:55' prior: 50659692!
impactBalance: aReceptiveAccount 
	aReceptiveAccount incrementBalance: value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:45:59'!
ERROR!
!ReceptiveAccount methodsFor: 'balance - private' stamp: 'CJF 10/9/2023 20:46:12'!
incrementBalance: aValue 
	self shouldBeImplemented.! !

!methodRemoval: ReceptiveAccount #incrementBalance: stamp: 'CJF 10/9/2023 20:47:03'!
incrementBalance: aValue 
	self shouldBeImplemented.!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:22' prior: 50659697!
impactBalance: aReceptiveAccount 
	^value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:27'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:45'!
impactBalance: aReceptiveAccount 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:47:53' prior: 50659727!
impactBalance: aReceptiveAccount 
	^value * -1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:47:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:48:02'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 20:59:45' prior: 50659683!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 20:59:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 20:59:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:02' prior: 50659771!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value) negated ]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:15' prior: 50659807!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value negated)]
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:32' prior: 50659847!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1]
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:37' prior: 50659887!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:46' prior: 50659897!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		self.
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:00:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:00:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:00:56' prior: 50659937!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue:[ ^aTransaction value]. 
		(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value)*-1].
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:05:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:05:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:06:51' prior: 50659977!
balance

	^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:06:52'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:09:55' prior: 50659715!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: self! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:09:58'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:04'!
transactionIsDeposit: aDeposit 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:10:09' prior: 50660090!
transactionIsDeposit: aDeposit 
	aDeposit value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:10:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:11:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:12:17'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:14:17' prior: 50660081!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsDeposit: value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:07' prior: 50659732!
impactBalance: aReceptiveAccount 
	^aReceptiveAccount transactionIsWithdraw: value ! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:10'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:15'!
transactionIsWithdraw: aValue 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:16:31' prior: 50660126!
transactionIsWithdraw: aValue 
	^aValue *-1! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:16:39'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:21:17' prior: 50660048!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:21:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:21:28'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:22:29' prior: 50660111!
impactBalance: calculatedBalance
	^calculatedBalance + value! !
!Withdraw methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:23:14' prior: 50660117!
impactBalance: calculatedBalance
	^calculatedBalance - value! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:16'!
FAILURE!

!methodRemoval: ReceptiveAccount #transactionIsDeposit: stamp: 'CJF 10/9/2023 21:23:47'!
transactionIsDeposit: aDeposit 
	aDeposit value.!

!methodRemoval: ReceptiveAccount #transactionIsWithdraw: stamp: 'CJF 10/9/2023 21:23:48'!
transactionIsWithdraw: aValue 
	^aValue *-1!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:23:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:23:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:23:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:24:59' prior: 50660151!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !
!Deposit methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:25:53' prior: 50660187!
impactBalance: calculatedBalance
	^(calculatedBalance + value)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/9/2023 21:27:30' prior: 50660236!
balance
	| balance |
	balance := 0.
	transactions do: [ :aTransaction |  balance:= aTransaction impactBalance: balance. self].
	^balance
	"^transactions sum: [ :aTransaction | aTransaction impactBalance: self
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/9/2023 21:27:56'!
PASSED!

----QUIT----(9 October 2023 21:53:50) CuisUniversity-5981.image priorSource: 10479967!

----STARTUP---- (12 October 2023 19:51:50) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:55:30'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CJF 10/12/2023 19:55:48'!
test01
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 19:57:45'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 19:57:34'!
test01EmptyPortfolioReturnBalanceZero
	self assert: (Portfolio new) balance equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:57:49'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:57:59'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 19:58:06' prior: 50660329!
balance
	^0! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 19:58:07'!
PASSED!

!methodRemoval: PortfolioTest #test01 stamp: 'CJF 10/12/2023 19:58:15'!
test01
!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:01:17'!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount|
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:08:08' prior: 50660348!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:08:11'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:09:29'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/12/2023 20:10:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:10:21' prior: 50660369!
addAccount: anAccount 
	accounts := anAccount.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:10:27'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:11:31'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:12:11' prior: 50660333!
balance
	^accounts balance.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:36'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:12:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:12:43'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:13:56' prior: 50660401!
balance
	accounts ifNil: [ ^0 ]
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:13:59'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:14:12'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 20:15:35' prior: 50660434!
balance
	accounts ifNil: [ ^0 ].
	^accounts balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/12/2023 20:15:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:02'!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:10' prior: 50660471!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:16' prior: 50660487!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:20:43' prior: 50660503!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 20:23:36' prior: 50660519!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance )
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:23:37'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/12/2023 20:24:52' prior: 50660381!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection with: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 20:24:54'!
ERROR!

----SNAPSHOT----(12 October 2023 21:03:06) CuisUniversity-5981.image priorSource: 10516499!

----QUIT----(12 October 2023 21:03:31) CuisUniversity-5981.image priorSource: 10525304!

----STARTUP---- (12 October 2023 21:04:59) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:06:05'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/12/2023 21:09:45' prior: 50660452!
balance
	accounts ifNil: [ ^0 ].
	^accounts sum: [ :anAccount | anAccount balance ].! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:09:46'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/12/2023 21:16:05' prior: 50660535!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount.
	aPortfolio addAccount: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:07'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/12/2023 21:16:12'!
FAILURE!

----SNAPSHOT----(12 October 2023 21:27:21) CuisUniversity-5981.image priorSource: 10525397!

----QUIT----(12 October 2023 21:27:26) CuisUniversity-5981.image priorSource: 10526876!

----STARTUP---- (13 October 2023 20:09:20) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:09:28'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:13:39' prior: 50660556!
addAccount: anAccount 
	accounts ifNil: [accounts := OrderedCollection new ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:14:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:17:24'!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:17:28'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:17:49'!
addPortfolio: aSecondPorftfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/13/2023 20:18:11'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:18:06' prior: 50660666!
addPortfolio: aSecondPorftfolio 
	portfolios := aSecondPorftfolio ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:18:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:22:44'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:22:45'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:25:31' prior: 50660580!
balance
	| accountsBalance portfoliosBalance |
	accounts ifNil: [ ^0 ].
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:25:32'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:26:11' prior: 50660703!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:26:14'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:28:13' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:28:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:08'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:29:16'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:29:35' prior: 50660630!
addAccount: anAccount 
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:30:47' prior: 50660724!
balance
	| accountsBalance portfoliosBalance |
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ifEmpty: [0].
	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:31:06'!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!methodRemoval: PortfolioTest #test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:06'!
test04PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:09'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:31:55'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:33:27'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:35:31' prior: 50660786!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:35:32'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:36:15' prior: 50660843!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].

	portfoliosBalance := portfolios balance.
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:36:17'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:37:23' prior: 50660873!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isNil ifTrue: [ portfoliosBalance :=0] ifFalse: [
	portfoliosBalance := portfolios balance.].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:37:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:18'!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:40:31' prior: 50660936!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:40:32'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:41:06'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:41:30' prior: 50660759 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 20:42:04' prior: 50660679!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:11' prior: 50660904!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ ] ifTrue: [ portfoliosBalance := 0
		].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/13/2023 20:44:51' prior: 50661006!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	portfolios isEmpty ifFalse:[ portfoliosBalance := portfolios sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:44:53'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:46:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/13/2023 20:46:58'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:47:02'!
PASSED!

----SNAPSHOT----(13 October 2023 20:47:08) CuisUniversity-5981.image priorSource: 10526969!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:48:20'!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:52:13' prior: 50661140!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:52:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:55:48'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:55:52'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:03'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 20:56:17' prior: 50661229!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 20:56:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 20:58:44'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	
	self assert: (Portfolio new) transactions isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:01:41' prior: 50661273!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:01:44'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:02:56' prior: 50661234!
transactions
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:02:58'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:02:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:03:06'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:06'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:03:27'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:04:05' prior: 50661297!
transactions
	accounts ifEmpty: [ ^OrderedCollection new].
	^(accounts at:1) transactions.! !

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:04:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:02'!
test08TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.! !

!methodRemoval: PortfolioTest #test09TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:03'!
test09TransactionsOfEmptyPortfolioIsEmptyList
	self assert: (Portfolio new) transactions isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:05:09'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test10PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:09'!
test10PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:05:12'!
PASSED!

----SNAPSHOT----(13 October 2023 21:05:16) CuisUniversity-5981.image priorSource: 10543553!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:17'!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:06:25' prior: 50661547!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:07' prior: 50661560!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	self assert: (aPortfolio transactions) equals: (firstAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:07:44' prior: 50661573!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:07:48'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:08:10' prior: 50661590!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:08:15'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:12:45' prior: 50661391!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	^res! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:12:47'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:13:12'!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !

!methodRemoval: PortfolioTest #test9PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:13:12'!
test9PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:13:15'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:15:30'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:08' prior: 50661613!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	
	
	self assert: (aPortfolio transactions) equals:( (firstAccount transactions ) addAll: secondAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:16:47' prior: 50661681!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := secondAccount transactions .
	alltransactions addAll: firstAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:16:50'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:17:11' prior: 50661702!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:17:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:17:13'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:19:12'!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio addAccount: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio addAccount: firstAccount .
	aPortfolio addPortfolio: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:19:19'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/13/2023 21:20:09' prior: 50661636!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	portfolios do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:20:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:29:56'!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered): (Deposit register: 100 on: (ReceptiveAccount new)).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:30:40' prior: 50661875!
test12EmptyPortfolioHasNoRegisteredTranstractions
	self deny: ((Portfolio new) hasRegistered: (Deposit register: 100 on: (ReceptiveAccount new)) ).! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:30:42'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:30:51'!
hasRegistered: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:31:21' prior: 50661894!
hasRegistered: anAccountTransaction
	^false.! !

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:31:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:33:59'!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	"self assert: aPortfolio hasRegistered: Deposit "! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:34:48' prior: 50661954!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
	
	self assert: (aPortfolio hasRegistered: (Deposit for: 100)). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:34:50'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:35:01'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:10' prior: 50661899!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self]. ! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:40:27' prior: 50661987!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :anAccount :acc | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:40:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:40:31'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:41:03'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:42:01' prior: 50661997!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) .self].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:42:05'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:43:45' prior: 50662071!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction )].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:43:48'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:45:40' prior: 50662086!
hasRegistered: anAccountTransaction
	| res |
	"res := accounts includes: anAccountTransaction "
	res := accounts inject: false into: [ :acc :anAccount  | acc or: (anAccount hasRegistered: anAccountTransaction ) ;yourself ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:48'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:45:52'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:47:09' prior: 50662100!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	"res := accounts includes: anAccountTransaction "
	res := accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:12'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:47:16'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:49:45' prior: 50661966!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addAccount: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:49:48'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:52:31' prior: 50662119!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	^res. ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:52:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:55:38'!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:55:42'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 21:56:34' prior: 50662154!
hasRegistered: anAccountTransaction
	| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:56:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/13/2023 21:59:01'!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio addAccount: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPortfolio.
	aPortfolio addAccount: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 21:59:02'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/13/2023 22:00:14' prior: 50662238!
hasRegistered: anAccountTransaction
	^self transactions includes: anAccountTransaction 
	"| res |
	res := false.
	accounts do: [ :anAccount  | res := res or: (anAccount hasRegistered: anAccountTransaction )  ].
	portfolios do: [ :aPortfolio | res := res or: ( aPortfolio hasRegistered: anAccountTransaction ) ].
	^res. "! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/13/2023 22:00:23'!
PASSED!

----SNAPSHOT----(13 October 2023 22:01:28) CuisUniversity-5981.image priorSource: 10556598!

----SNAPSHOT----(14 October 2023 08:34:53) CuisUniversity-5981.image priorSource: 10586172!

----QUIT----(14 October 2023 08:35:03) CuisUniversity-5981.image priorSource: 10586265!

----STARTUP---- (16 October 2023 19:06:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:32:44'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Account as: #CollectionAccount stamp: 'CJF 10/16/2023 19:33:37'!
Smalltalk renameClassNamed: #Account as: #CollectionAccount!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:18'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:34:27'!
CollectionAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:37:05'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:06'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50661001!
addPortfolio: aPortfolio
	portfolios add2: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50659593!
register: aTransaction

	transactions add2: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:06' prior: 50660781!
addAccount: anAccount 
	
	accounts add2: anAccount.! !

!methodRemoval: Portfolio #add: stamp: 'CJF 10/16/2023 19:38:06'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:38:51'!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662549!
register: aTransaction

	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662544!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJF 10/16/2023 19:38:51' prior: 50662554!
addAccount: anAccount 
	
	accounts add: anAccount.! !

!methodRemoval: Portfolio #add2: stamp: 'CJF 10/16/2023 19:38:51'!
add2: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ self addPortfolio: aCollectionAccount ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:39:47' prior: 50660353!
test02PortfolioWithSingleAccountReturnBalanceOfAccount
	|anAccount aPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	self assert: (aPortfolio balance )equals: (anAccount balance )
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:39:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:06' prior: 50660590!
test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem
	|firstAccount secondAccount aPortfolio|
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount.
	aPortfolio add: secondAccount .
	
	self assert: (aPortfolio balance )equals: (firstAccount balance + secondAccount balance)
	! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:19' prior: 50660651!
test04PortfolioWithAnEmptyPortfolioReturnBalanceZero
	|aPortfolio aSecondPorftfolio|
	aSecondPorftfolio := Portfolio new. 
	aPortfolio := Portfolio new. 
	
	aPortfolio add: aSecondPorftfolio.
	
	self assert: aPortfolio balance equals: aSecondPorftfolio balance. ! !

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:31' prior: 50660795!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio addAccount: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:44' prior: 50660961!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio addAccount: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:49' prior: 50662915!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:53' prior: 50662940!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio addPortfolio: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:40:56' prior: 50662965!
test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio aThirdPortfolio accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountDesposit .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: aThirdPortfolio .
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( aThirdPortfolio balance ). ! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:40:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:40:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:07' prior: 50661166!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio addPortfolio: aSecondPorftfolio.
	aPortfolio addAccount: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:17' prior: 50663078!
test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem
	|aPortfolio aSecondPorftfolio  accountWithdraw accountDesposit|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	
	accountDesposit := ReceptiveAccount new.
	Deposit register: 100 on: accountDesposit .
	
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
		
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	aPortfolio add: accountDesposit.
		
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance) + ( accountDesposit balance ). ! !

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:30' prior: 50661646!
test09PortfolioWithSingleAccountHasSameTransactionsThanAccount
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount .
	
	self assert: (aPortfolio transactions) equals: (anAccount transactions ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:36' prior: 50661727!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio addAccount: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:41:43' prior: 50663199!
test10PortfolioManyAccountsHasSameTransactionsCombined
	| aPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondAccount.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondAccount transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:41:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:41:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:05' prior: 50661790!
test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined
	| aPortfolio secondPortfolio firstAccount secondAccount alltransactions |
	
	firstAccount := ReceptiveAccount new. 
	Deposit register: 100 on: firstAccount .

	secondAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: secondAccount .
	
	secondPortfolio := Portfolio new.
	secondPortfolio add: secondAccount .
		
	aPortfolio := Portfolio new.
	aPortfolio add: firstAccount .
	aPortfolio add: secondPortfolio.
	
	alltransactions := firstAccount transactions .
	alltransactions addAll: secondPortfolio transactions .
	
	self assert: (aPortfolio transactions) equals: alltransactions .! !

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:20' prior: 50662137!
test13PortfolioWithSingleAccountHasRegisterAccountTransactions
	| aPortfolio anAccount deposit |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: anAccount .
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:33' prior: 50662217!
test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered
	| aPortfolio anAccount deposit aSecondPortfolio |
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
		
	self assert: (aPortfolio hasRegistered: deposit). ! !

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:42:54' prior: 50662309!
test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions
	| aPortfolio anAccount deposit aSecondPortfolio aSecondAccount withdraw|
	anAccount := ReceptiveAccount new. 
	deposit := Deposit register: 100 on: anAccount .
	
	aSecondPortfolio := Portfolio new.
	aSecondPortfolio add: anAccount .
	
	aSecondAccount := ReceptiveAccount new. 
	withdraw  :=  Withdraw register: 50 on: aSecondAccount .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPortfolio.
	aPortfolio add: aSecondAccount .	
	self assert: (aPortfolio hasRegistered: deposit). 
	self assert: (aPortfolio hasRegistered: withdraw )! !

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:42:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:43:30' prior: 50662834!
test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance
	|aPortfolio aSecondPorftfolio accountWithdraw|
	accountWithdraw := ReceptiveAccount new.
	Withdraw register: 50 on: accountWithdraw .
	aSecondPorftfolio := Portfolio new. 
	aSecondPorftfolio add: accountWithdraw .
	
	aPortfolio := Portfolio new. 
	aPortfolio add: aSecondPorftfolio.
	
	self assert: (aPortfolio balance) equals: (aSecondPorftfolio balance). ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:43:38'!
PASSED!

----SNAPSHOT----(16 October 2023 19:44:56) CuisUniversity-5981.image priorSource: 10586358!

CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:47:53'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:48:33' prior: 50662583!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:48:52' prior: 50661018!
balance
	| accountsBalance portfoliosBalance |
	accounts isEmpty ifFalse: [
	accountsBalance := accounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:48:59' prior: 50661819!
transactions
	|res|
	res := OrderedCollection new.
	accounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:12' prior: 50660995 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:49:26' prior: 50663763 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:49:44'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'accounts collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:50:05' prior: 50662588!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:20' prior: 50663738!
balance
	| accountsBalance portfoliosBalance |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	collectionAccounts isEmpty ifFalse:[ portfoliosBalance := collectionAccounts sum: [ :aPortfolio | aPortfolio balance] ] 
					ifTrue: [ portfoliosBalance := 0].
	^accountsBalance + portfoliosBalance .! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:50:29' prior: 50663753!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ].
	^res! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:50:37' prior: 50663771 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/16/2023 19:50:52'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'collectionAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(16 October 2023 19:51:28) CuisUniversity-5981.image priorSource: 10626053!

!methodRemoval: Portfolio #addPortfolio: stamp: 'CJF 10/16/2023 19:52:46'!
addPortfolio: aPortfolio
	collectionAccounts add: aPortfolio.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:52:46' prior: 50662567!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ self addAccount: aCollectionAccount ].! !

!methodRemoval: Portfolio #addAccount: stamp: 'CJF 10/16/2023 19:53:01'!
addAccount: anAccount 
	
	collectionAccounts add: anAccount.!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:01' prior: 50663838!
add: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].
	(aCollectionAccount isKindOf: ReceptiveAccount ) ifTrue: [ collectionAccounts add: aCollectionAccount. ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 19:53:21' prior: 50663853!
add: aCollectionAccount
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'transactions' stamp: 'CJF 10/16/2023 19:53:56' prior: 50663807!
transactions
	|res|
	res := OrderedCollection new.
	collectionAccounts do:[ :anAccount | res addAll: anAccount transactions ].
	"collectionAccounts do:[ :aPortfolio | res addAll: aPortfolio transactions ]."
	^res! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:54:16'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:05' prior: 50663791!
balance
	| accountsBalance  |
	collectionAccounts isEmpty ifFalse: [
	accountsBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ accountsBalance  := 0].
	
	^accountsBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:21' prior: 50663939!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :anAccount | anAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'CJF 10/16/2023 19:55:44' prior: 50663949!
balance
	| totalBalance  |
	collectionAccounts isEmpty ifFalse: [
	totalBalance := collectionAccounts  sum: [ :aCollectionAccount | aCollectionAccount balance ] ] ifTrue: [ totalBalance  := 0].
	
	^totalBalance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 19:55:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 19:55:49'!
PASSED!

----SNAPSHOT----(16 October 2023 19:56:07) CuisUniversity-5981.image priorSource: 10629727!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 19:57:17'!
test16! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:08:52'!
test16PortfolioCannotAddDuplicatedAccounts! !

!methodRemoval: PortfolioTest #test16 stamp: 'CJF 10/16/2023 20:08:52'!
test16!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:10:02' prior: 50664033!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:12:00' prior: 50664040!
test16PortfolioCannotAddDuplicatedAccounts
	| portfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:12:06'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:13:49' prior: 50663864!
add: aCollectionAccount
	self ifCannotAddRaiseError: aCollectionAccount.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:13:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:13:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:14:06'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:14:21'!
ifCannotAddRaiseError: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:15:16' prior: 50664141!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:15:18'!
ERROR!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:15:33'!
duplicatedAccountError
	self shouldBeImplemented.! !
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 20:16:17' prior: 50664158!
duplicatedAccountError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:20'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:42'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:16:53'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:17:13' prior: 50664147!
ifCannotAddRaiseError: aCollectionAccount 
	(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ].! !

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:17:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 20:19:45'!
test17CannotAddAccountInAlreadyPortfolioAdded
	| portfolio secondPortfolio account |
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	secondPortfolio add: account.
	portfolio add: secondPortfolio.
	
	self should: [ portfolio add: account ] raise: Error withExceptionDo:[ :anError | 
		self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:19:47'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:25:38' prior: 50664179!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp xyx: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:25:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:41'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:25:42'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:42'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:25:48'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:13'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:26:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:27:17'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:32:36' prior: 50664274!
ifCannotAddRaiseError: aCollectionAccount 
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:32:55'!
ifCannotAddRaiseError: aCollectionAccount
	^(self = aCollectionAccount )! !

!methodRemoval: ReceptiveAccount #xyx: stamp: 'CJF 10/16/2023 20:32:55'!
xyx: aCollectionAccount
	^(self = aCollectionAccount )!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/16/2023 20:33:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:33:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:33:30'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:33:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:33:42'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:34:22'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:34:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:34:27'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:38:50' prior: 50664382!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^true ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:51'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:38:59'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:38:59'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:39:31'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:39:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:39'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:39:44'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/16/2023 20:40:49' prior: 50664568!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ ^false ].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:40:55'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:41:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:41:18'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:46:59'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:08'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:49:57'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:53:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 20:54:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 20:54:00'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:54:07'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 20:55:45' prior: 50664369!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:57:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 20:58:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:01:10'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:05' prior: 50664902!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	self.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:02:53' prior: 50664936!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:03:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:04:58'!
test18! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:05:30' prior: 50665030!
test18
	| portfolio |
	portfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:07:09' prior: 50665033!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:07:12'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:08:43' prior: 50664950!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^self = aCollectionAccount .
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:30'!
FAILURE!
!CollectionAccount class methodsFor: 'errors' stamp: 'CJF 10/16/2023 21:09:53'!
cannotAddPortfolioError
	^'Cant add duplicated accounts'! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:09:59'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:09:59'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:12:23' prior: 50665051!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	^(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:12:29'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:12:29'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/16/2023 21:13:17' prior: 50665144!
ifCannotAddRaiseError: aCollectionAccount 
	
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/16/2023 21:13:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/16/2023 21:16:22'!
test19
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]"! !

----SNAPSHOT----(16 October 2023 21:16:30) CuisUniversity-5981.image priorSource: 10636047!

----QUIT----(17 October 2023 00:02:06) CuisUniversity-5981.image priorSource: 10677625!

----STARTUP---- (17 October 2023 12:05:29) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 12:05:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:24:16'!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test18 stamp: 'CJF 10/17/2023 12:24:16'!
test18
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] raise: Error withExceptionDo: [ :anError | self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:26:33' prior: 50665315!
test19
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 12:27:03' prior: 50665408!
test18PortfolioCannotAddedItself
	| portfolio |
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 13:11:11' prior: 50665428!
test19"primer de agregar en un portfolio interno"
	| portfolioA account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	
	self should: [ portfolioA add: portfolioA ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

----QUIT----(17 October 2023 13:11:32) CuisUniversity-5981.image priorSource: 10677718!

----STARTUP---- (17 October 2023 13:41:23) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/17/2023 13:59:56' prior: 50665451!
test19"primer de agregar en un portfolio interno"
	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:00:04'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJF 10/17/2023 14:06:17'!
CollectionAccount subclass: #Portfolio
	instanceVariableNames: 'collectionAccounts parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:06:16' prior: 50665230!
ifCannotAddRaiseError: aCollectionAccount 
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:06:24'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:08:47' prior: 50664065!
add: aCollectionAccount
	self ifCannotAddRaiseError: aCollectionAccount.
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:08:51'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:09:05'!
defineParent: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:09:14' prior: 50665531!
defineParent: aPortfolio 
	parent := aPortfolio ! !

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:09:16'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:16'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:09:45'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/17/2023 14:09:45'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:48'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:09:48'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:10:03'!
defineParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/17/2023 14:10:06' prior: 50665695!
defineParent: aPortfolio 
	! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/17/2023 14:10:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:10'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:30'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/17/2023 14:10:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/17/2023 14:10:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/17/2023 14:10:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/17/2023 14:10:47'!
PASSED!

----QUIT----(17 October 2023 14:11:25) CuisUniversity-5981.image priorSource: 10682016!

----STARTUP---- (18 October 2023 19:44:34) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/18/2023 19:48:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/18/2023 19:48:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/18/2023 19:48:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/18/2023 19:48:06'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/18/2023 19:48:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/18/2023 19:48:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/18/2023 19:48:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/18/2023 19:48:27'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/18/2023 19:48:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/18/2023 19:48:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/18/2023 19:48:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/18/2023 19:48:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/18/2023 19:48:46'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/18/2023 19:48:48'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/18/2023 19:49:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/18/2023 19:49:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/18/2023 19:49:10'!
PASSED!

----STARTUP---- (18 October 2023 17:01:28) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!Portfolio methodsFor: 'administration' stamp: 'CJF 10/18/2023 17:14:39' prior: 50665498!
ifCannotAddRaiseError: aCollectionAccount 
	|parentsToCheck|
	parentsToCheck := self traceParents.
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/18/2023 17:15:56' prior: 50665852!
ifCannotAddRaiseError: aCollectionAccount 
	|parentsToCheck|
	parentsToCheck := self traceParents.
	parentsToCheck canAdd: aCollectionAccount.
"	parent ifCannotAddRaiseError: aCollectionAccount "
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
	"(collectionAccounts includes: aCollectionAccount) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]."! !

----STARTUP---- (19 October 2023 13:01:31) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:01:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:01:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:01:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:01:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:02:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:36:33'!
test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:36:57'!
test20PortfolioNoPuedeAgregarPortfolioRepetido
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/19/2023 13:37:30' prior: 50664725!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:38:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 13:38:18' prior: 50665471!
test19"primer de agregar en un portfolio interno"
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]"! !

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 13:38:21'!
PASSED!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:39:32' prior: 50665498!
ifCannotAddRaiseError: aCollectionAccount 
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:45:04' prior: 50665521!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	self ifCannotAddRaiseError: aCollectionAccount.
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:46:39' prior: 50666020!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	
	"self ifCannotAddRaiseError: aCollectionAccount."
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 13:46:53'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 13:46:53'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 13:46:53'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 13:46:56'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 13:47:30'!
canAdd: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:01:09' prior: 50666127!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ).
		].
	^ret.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:01:16'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:01:24'!
collectParents
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:02:50' prior: 50666144!
collectParents
	^OrderedCollection with: parent.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:00'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:03:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:03:20'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:03:20'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:03:20'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:26'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:03:26'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:07:21' prior: 50666149!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifNil: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:10:10' prior: 50666245!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifNil: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].
	^parents.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:10:32'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:10:43'!
include: aCollectionAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:14:55' prior: 50666267!
include: aCollectionAccount 
	| res |
	res := false.
	collectionAccounts do: [ :aCA |
			res := res or: (aCA include: aCollectionAccount ).
		].
	^res! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:10'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:26'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:15:26'!
ERROR!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:18:24' prior: 50666132!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ) not.
		].
	^ret.! !

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:18:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:46:20'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:46:20'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:46:20'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:25'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:46:25'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:46:52'!
include: aCollectionAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:47:14' prior: 50666393!
include: aCollectionAccount 
	self = aCollectionAccount ! !

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:16'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:47:54'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:47:54'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:47:54'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:48:03'!
ERROR!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:53:56' prior: 50666398!
include: aCollectionAccount 
	^self = aCollectionAccount ! !

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:54:00'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:54:00'!
FAILURE!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 14:55:47' prior: 50666292!
canAdd: aCollectionAccount 
	| roots ret|
	ret := false.
	roots := self collectParents.
	roots do: [ :aParent |
			ret := ret or: (aParent include: aCollectionAccount ) not.
		].
	^ret and: ((self = aCollectionAccount ) not).! !

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:57:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 14:57:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 14:57:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 14:57:46'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 14:57:46'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:07'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:18'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:19'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:29'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:00:29'!
FAILURE!

!methodRemoval: PortfolioTest #test19 stamp: 'CJF 10/19/2023 15:04:00'!
test19"primer de agregar en un portfolio interno"
"	| portfolioA portfolioB account|
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioA add: account. 
	portfolioB := Portfolio new. 
	portfolioA add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount duplicatedAccountError ]"!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:04:12'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:04:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:08:02' prior: 50666492!
include: aCollectionAccount
	( aCollectionAccount isKindOf: Portfolio ) ifTrue: [ ^aCollectionAccount include: self ].
	^self = aCollectionAccount 
	
"	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount )."! !

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:08:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 15:08:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:24:57'!
test20CannotAddPortfolioTwice
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test20PortfolioNoPuedeAgregarPortfolioRepetido stamp: 'CJF 10/19/2023 15:25:01'!
test20PortfolioNoPuedeAgregarPortfolioRepetido
	| portfolioA account portfolioB portfolioC|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	portfolioC := Portfolio new.
	portfolioC add: account.
	
	portfolioA add: portfolioB.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:28:36'!
test19PortfoliosSharingAccountCannotAddBetweenThem
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]! !

!methodRemoval: PortfolioTest #test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta stamp: 'CJF 10/19/2023 15:28:36'!
test19PortfolioConCuentaNoPuedeAgregarPortfolioConMismaCuenta
	| portfolioA account portfolioB|
	account := ReceptiveAccount new.
	Deposit register: 100 on: account .
	
	portfolioA := Portfolio new.
	portfolioA add: account.
	
	portfolioB := Portfolio new.
	portfolioB add: account.
	
	self should: [ portfolioA add: portfolioB ] 
		raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CollectionAccount cannotAddPortfolioError]!
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:28:51' prior: 50666032!
add: aCollectionAccount
	(self canAdd: aCollectionAccount ) ifFalse:[ ^self error: CollectionAccount cannotAddPortfolioError ].
	aCollectionAccount defineParent: self.
	collectionAccounts add: aCollectionAccount.! !
!Portfolio methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:29:07' prior: 50662396!
hasRegistered: anAccountTransaction
	^self transactions includes: anAccountTransaction ! !

!methodRemoval: Portfolio #ifCannotAddRaiseError: stamp: 'CJF 10/19/2023 15:30:09'!
ifCannotAddRaiseError: aCollectionAccount 
	parent ifNotNil: [ parent ifCannotAddRaiseError: aCollectionAccount ].
	collectionAccounts do:[ :temp | (temp ifCannotAddRaiseError: aCollectionAccount ) ifTrue: [ ^self error: CollectionAccount duplicatedAccountError ]. ].
	(self = aCollectionAccount) ifTrue: [ ^self error: CollectionAccount cannotAddPortfolioError ].
	^false.
!

!methodRemoval: ReceptiveAccount #ifCannotAddRaiseError: stamp: 'CJF 10/19/2023 15:30:14'!
ifCannotAddRaiseError: aCollectionAccount
	(aCollectionAccount isKindOf: Portfolio ) ifTrue:[ aCollectionAccount ifCannotAddRaiseError: self].
	^(self = aCollectionAccount ).!
!CollectionAccount methodsFor: 'no messages' stamp: 'CJF 10/19/2023 15:30:32'!
balance
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 15:32:17'!
defineParent
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 15:36:22'!
canAdd
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'administration' stamp: 'CJF 10/19/2023 15:37:07' prior: 50666715!
include: aCollectionAccount
	( aCollectionAccount isKindOf: Portfolio ) ifTrue: [ ^aCollectionAccount include: self ].
	^self = aCollectionAccount 
! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:53:57'!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:55:17' prior: 50666942!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:55:18'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:56:05'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:56:46'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:57:24'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:58:34'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfoliosSharingAccountCannotAddBetweenThem stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test20CannotAddPortfolioTwice stamp: 'CJF 10/19/2023 15:59:15'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:59:15'!
FAILURE!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 15:59:15'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 15:59:55' prior: 50666955!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	"self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]"! !
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 16:00:06' prior: 50667080!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	portfolioB add: account .
	
	"self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]"! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:07'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:30'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:00:52'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:01:10'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'CJF 10/19/2023 16:03:01' prior: 50663817 overrides: 16920235!
initialize
	collectionAccounts := OrderedCollection new.
	parent := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'CJF 10/19/2023 16:03:21' prior: 50665536!
defineParent: aPortfolio 
	parent add: aPortfolio .! !
!Portfolio methodsFor: 'add' stamp: 'CJF 10/19/2023 16:05:15' prior: 50666254!
collectParents
	| parents |
	parents := OrderedCollection new.
	parent ifEmpty: [ ^OrderedCollection with: self. ].
	parent do: [ :aParent | parents addAll: (aParent collectParents) ].
	^parents.! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 16:05:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithSingleAccountReturnBalanceOfAccount stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMultipleAccountsReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithAnEmptyPortfolioReturnBalanceZero stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioWithAccountWithdrawReturnNoZeroBalance stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithManyPortfoliosReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithAccountAndPortfolioReturnBalanceAsSumOfThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOfEmptyPortfolioIsEmptyList stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithSingleAccountHasSameTransactionsThanAccount stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioManyAccountsHasSameTransactionsCombined stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithdAccountAndPortfolioReturnTransactionsCombined stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioHasNoRegisteredTranstractions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithSingleAccountHasRegisterAccountTransactions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWIthPortfolioWithTransactionsHasSameTransactionsRegistered stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountAndPortfolioHasRegisteredAllTransactions stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCannotAddDuplicatedAccounts stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAccountInAlreadyPortfolioAdded stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCannotAddedItself stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test19PortfoliosSharingAccountCannotAddBetweenThem stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test20CannotAddPortfolioTwice stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CJF 10/19/2023 16:05:52' prior: 50667099!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]! !

!testRun: #PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:05:53'!
FAILURE!

!methodRemoval: PortfolioTest #test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents stamp: 'CJF 10/19/2023 16:13:09'!
test21CannotAddAccountInPortfolioIfTheyBelongToHierarchyParents
	| portfolioA portfolioB portfolioC account |
	account := ReceptiveAccount new.
	portfolioA := Portfolio new.
	portfolioB := Portfolio new.
	portfolioC := Portfolio new.
	
	portfolioA add: account.
	portfolioA add: portfolioB.
	portfolioC add: portfolioB.
	
	self should: [ portfolioB add: account ] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: CollectionAccount duplicatedAccountError .
			]!
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 16:13:32'!
hasRegistered: aTransaction
	self subclassResponsibility ! !
!CollectionAccount methodsFor: 'nil' stamp: 'CJF 10/19/2023 16:13:59'!
transactions
	self subclassResponsibility ! !

----SNAPSHOT----(19 October 2023 16:14:10) CuisUniversity-5981.image priorSource: 10692008!

----QUIT----(19 October 2023 16:14:31) CuisUniversity-5981.image priorSource: 10740589!

----STARTUP---- (19 October 2023 19:26:13) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


----End fileIn of C:\Users\crist\Documents\GitHub\2023-2c\06-Portfolio1\Portfolio-Solucion.st----!

!classRemoval: #Withdraw stamp: 'CJF 10/19/2023 21:14:03'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'CJF 10/19/2023 21:14:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'CJF 10/19/2023 21:14:03'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'CJF 10/19/2023 21:14:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'CJF 10/19/2023 21:14:04'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'CJF 10/19/2023 21:14:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'CJF 10/19/2023 21:14:04'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'CJF 10/19/2023 21:14:04'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #CollectionAccount stamp: 'CJF 10/19/2023 21:14:05'!
Object subclass: #CollectionAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\crist\Documents\GitHub\2023-2c\06-Portfolio1\Portfolio-Solucion.st----!

TestCase subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransfersTests category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:15:32'!
TestCase subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'no messages' stamp: 'CJF 10/19/2023 21:17:52'!
test01TransferBetweenAccountsAffectBalances
	| accountSender accountReceiver |
	accountSender := ReceptiveAccount new.
	accountReceiver := ReceptiveAccount new. ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:21:41'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:21:24' prior: 50668823!
test01TransferBetweenAccountsAffectBalances
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:22:03'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:10'!
from: originAccount to: receiverAccount withValue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: aRenameMe1 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:24' prior: 50668857!
from: originAccount to: receiverAccount withValue: transferValue 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:22:42' prior: 50668868!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:22:45'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:52'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:52'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:22:53'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:22:53'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	self shouldBeImplemented.
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:24:29' prior: 50668917!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:41'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:52'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:24:57'!
ERROR!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:26:46' prior: 50668928!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !

!methodRemoval: Transfer #initializeFrom:to:withValue: stamp: 'CJF 10/19/2023 21:26:51'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:27:02'!
ERROR!

!methodRemoval: Transfer class #from:to:withValue: stamp: 'CJF 10/19/2023 21:27:19'!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:27:26'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:27:33'!
from: originAccount to: receiverAccount withValue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: originAccount to: receiverAccount withValue: aRenameMe1 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:29:05' prior: 50668984!
from: originAccount to: receiverAccount withValue: transferValue 
	Deposit register: transferValue on: receiverAccount .
	Withdraw register: transferValue on: originAccount .
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:07'!
ERROR!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:29:12'!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	self shouldBeImplemented.
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:29:17' prior: 50669009!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	receiverAccount_CHANGE_ME := receiverAccount.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:25'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:25'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:40'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:29:40'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:37:10'!
test02ReceiverAccountKnowsWhoSendMoney

	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !

Object subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/19/2023 21:41:06'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount_CHANGE_ME receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:41:25' prior: 50669044!
test02ReceiverAccountKnowsWhoSendMoney
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:41:44'!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "! !

!methodRemoval: TransfersTests #test02ReceiverAccountKnowsWhoSendMoney stamp: 'CJF 10/19/2023 21:41:49'!
test02ReceiverAccountKnowsWhoSendMoney
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: receiverAccount "!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:42:40' prior: 50669084!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (originAccount hasRegistered: transfer).
	
	self assert: (receiverAccount hasRegistered: transfer).! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/19/2023 21:42:42' prior: 50669108!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer).! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:42:44'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:43:37'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:45:35'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/19/2023 21:46:18' prior: 50668995!
from: originAccount to: receiverAccount withValue: transferValue 
	"Deposit register: transferValue on: receiverAccount .
	Withdraw register: transferValue on: originAccount ."
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:47:11'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:47:11'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:47:27'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:47:27'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/19/2023 21:48:32' prior: 50669020!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:48:35'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:49:21'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:49:21'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:49:32'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:56:01' prior: 50668672 overrides: 50668477!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction |
			(transaction isKindOf: Transfer) ifTrue: [transaction affectBalance: currentBalance from: self]
				ifFalse:[
			transaction affectBalance: currentBalance]
		 ]! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:56:05'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:56:12'!
affectBalance: currentBalance from: aReceptiveAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:57:12' prior: 50669213!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount_CHANGE_ME ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ]
	^currentBalance + transferValue_CHANGE_ME .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:13'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'CJF 10/19/2023 21:57:26' prior: 50669219!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount_CHANGE_ME ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ].
	^currentBalance + transferValue_CHANGE_ME .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:28'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/19/2023 21:57:32'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/19/2023 21:57:32'!
PASSED!

----QUIT----(19 October 2023 22:05:23) CuisUniversity-5981.image priorSource: 10740682!

----STARTUP---- (22 October 2023 19:35:18) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:35:50'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:35:51'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:35:51'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:43:29'!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: transfer pataOrigen equals: originAccount.
	self assert: transfer pataDestino equals: receiverAccount.
	self assert: originAccount balance equals: -50.
	self assert: originAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:43:32'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:43:43'!
pataOrigen
	self shouldBeImplemented.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:45:07' prior: 50669269!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: originAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:45:09'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:15'!
isPataOrigen: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:41' prior: 50669310!
isPataOrigen: anAccount 
	^originAccount_CHANGE_ME = anAccount ! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:45:43'!
ERROR!
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:45:49'!
isPataDestino: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'pata' stamp: 'CJF 10/22/2023 19:46:07' prior: 50669322!
isPataDestino: anAccount 
	^receiverAccount_CHANGE_ME = anAccount ! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:08'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:46:28' prior: 50669292!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:46:29'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:50:41'!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: 50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:50:44'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:50:56'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:51:00'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:00'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:51:05'!
PASSED!
!Transfer class methodsFor: 'nil' stamp: 'CJF 10/22/2023 19:51:52'!
invalidTransferValueError
	^ 'Transferencia must be positve'! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 19:54:23' prior: 50669172!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ self error: Transfer invalidTransferValueError ].
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 19:54:30' prior: 50669414!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:32'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:32'!
FAILURE!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:54:38'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:55:01' prior: 50669363!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test03 stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 19:55:06'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 19:55:33'!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!methodRemoval: TransfersTests #test03 stamp: 'CJF 10/22/2023 19:55:39'!
test03
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: (transfer isPataOrigen: originAccount).
	self assert: (transfer isPataDestino: receiverAccount).
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:14:17'!
test05TransferBetweenDifferentAccount
	| anAccount transfer |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer SameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !
!Transfer class methodsFor: 'nil' stamp: 'CJF 10/22/2023 20:15:08'!
sameAccountError
	^' No es posible transferir entre la misma cuenta '! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:15:19' prior: 50669518!
test05TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:15:59' prior: 50669428!
initializeFrom: originAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( originAccount = receiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := originAccount.
	originAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:18' prior: 50669551!
initializeFrom: anOriginAccount to: receiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = receiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := receiverAccount.
	receiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:29' prior: 50669568!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount_CHANGE_ME := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:16:39'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount_CHANGE_ME transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669232!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount ) ifTrue: [ ^(currentBalance - transferValue_CHANGE_ME ) ].
	^currentBalance + transferValue_CHANGE_ME .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669315!
isPataOrigen: anAccount 
	^originAccount = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:39' prior: 50669585!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount_CHANGE_ME := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:16:48'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount transferValue_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:48' prior: 50669627!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: transferValue 
	(transferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := transferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:16:48' prior: 50669327!
isPataDestino: anAccount 
	^receiverAccount = anAccount ! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/22/2023 20:16:54' prior: 50669653!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue_CHANGE_ME := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:17:01'!
Object subclass: #Transfer
	instanceVariableNames: 'originAccount receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:17:01' prior: 50669675!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	anOriginAccount register: self.
	receiverAccount := aReceiverAccount.
	aReceiverAccount register: self.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:17:01' prior: 50669612!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originAccount ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 20:17:07'!
PASSED!

TestCase subclass: #ReportesTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportesTests category: 'Portfolio-Solucion' stamp: 'CJF 10/22/2023 20:19:55'!
TestCase subclass: #ReportesTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportesTests methodsFor: 'no messages' stamp: 'CJF 10/22/2023 20:22:54'!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:22:57'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:23:06'!
accountSummaryReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:23:24' prior: 50669768!
accountSummaryReport
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:23:25'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:23:25'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:24:43'!
test01ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:24:50'!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: ReportesTests #test01ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:24:50'!
test01ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount |
	anAccount := ReceptiveAccount new. 
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:27:52' prior: 50669796!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:27:54'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:31:26' prior: 50669773!
accountSummaryReport
	(self balance = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	^OrderedCollection with: 'Balance = 100' with: 'Depósito por 100.'.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:31:28'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:35:12'!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:38:57' prior: 50669834!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , self balance.
	printDeposit := 'Depósito por ' , (transactions at:1) value.
	^OrderedCollection with: printBalance with: 'Depósito por 100.'.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:39:29' prior: 50669867!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , self balance.
	printDeposit := 'Depósito por ' , (transactions at:1) value.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:39:30'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:39:42'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:40:20' prior: 50669880!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:40:26'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:41:01' prior: 50669923!
accountSummaryReport
	|printBalance printDeposit|
	(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString, '.'.
	^OrderedCollection with: printBalance with: printDeposit .! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:41:09'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:48:48' prior: 50669940!
accountSummaryReport
	|printBalance printDeposit printResult|
	printResult := OrderedCollection new.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance .
	^printResult.
	"(transactions size = 0) ifTrue: [^OrderedCollection with: 'Balance = 0'.].
	printBalance := 'Balance = ' , (self balance) asString.
	printDeposit := 'Depósito por ' , (transactions at:1) value asString, '.'.
	^OrderedCollection with: printBalance with: printDeposit ."! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:48:51' prior: 50669957!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:48:56'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:50:38' prior: 50669854!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:50:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 20:51:19' prior: 50669985!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
		].
 .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/22/2023 20:51:24'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:51:29'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:52:55'!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (anAccount accountSummaryReport) equals: reportPrinted.! !

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 20:53:01'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 20:59:48'!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (originAccount accountSummaryReport) equals: originReport.
	self assert: (receiverAccount accountSummaryReport) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:00:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:04:28' prior: 50670049!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] .
		].
 .
	^printResult.! !

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/22/2023 21:04:44'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:04:52'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:04:52'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'CJF 10/22/2023 21:05:26' overrides: 16902254!
value
	^transferValue ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:05:36'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:10:28'!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = -20' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:10:34'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:10:53' prior: 50670233!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:10:55'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:11:30' prior: 50670257!
test06
	| anAccount originReport  |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (anAccount accountSummaryReport) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:11:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:15:23'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount|
	anAccount := ReceptiveAccount new. 
	self assert: anAccount transferNetReport equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:25'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:15:33'!
transferNetReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:15:38' prior: 50670338!
transferNetReport
	^0! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:15:39'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:17:17'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	self assert: anAccount transferNetReport equals: 20.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:19'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:17:33'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:33'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:17:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:21:38' prior: 50670343!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^transactions at:1 value ]! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:21:46'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:22:28' prior: 50670431!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ]! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:22:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:23:21'!
test08TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:23:28'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.! !

!methodRemoval: ReportesTests #test08TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:23:28'!
test08TransferNetReportForAccountWithOutputTransfer
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	self assert: anAccount transferNetReport equals: -20.!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:23:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:26:08' prior: 50670442!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value ].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:26:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:27:27' prior: 50670517!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) affectBalance: 0].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:27:36'!
ERROR!

!methodRemoval: Transfer #affectBalance: stamp: 'CJF 10/22/2023 21:28:18'!
affectBalance: currentBalance 
	self shouldBeImplemented.!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/22/2023 21:28:56' prior: 50670531!
transferNetReport
	transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ].! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/22/2023 21:29:02'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/22/2023 21:30:50'!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	self assert: anAccount transferNetReport equals: 10.! !

----SNAPSHOT----(23 October 2023 00:30:36) CuisUniversity-5981.image priorSource: 10803225!

----QUIT----(23 October 2023 00:31:00) CuisUniversity-5981.image priorSource: 10846634!

----STARTUP---- (23 October 2023 16:31:52) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:34:41' prior: 50670549!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0]
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:34:58' prior: 50670618!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:35:03'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:35:03'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:36:26'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:38:19'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:39:06' prior: 50670636!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [^( (transactions at:1) value )].
			(aTransaction isPataOrigen: self) ifTrue: [^ ((transactions at:1) value negated)].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 16:39:08'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:39:38' prior: 50670670!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [((transactions at:1) value negated)].
		] ifEmpty: [0].
	^total
	"transactions ifEmpty: [^0].
	((transactions at:1) isPataDestino: self) ifTrue: [ ^(transactions at:1) value ].
	((transactions at:1) isPataOrigen: self) ifTrue: [ ^(transactions at:1) value negated ]."! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:42'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:39:42'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:40:23' prior: 50670719!
transferNetReport
	| total |
	total := transactions sum: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ (transactions at:1) value ].
			(aTransaction isPataOrigen: self) ifTrue: [(transactions at:1) value negated].
		] ifEmpty: [0].
	^total
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 16:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:40:30'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:40:30'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:07' prior: 50670745!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ transactions affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [transactions affectBalance: total from: self].
		] 
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:10'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:10'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:28' prior: 50670791!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ transactions affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [transactions affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:32'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:53:32'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:53:59' prior: 50670811!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [ aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [aTransaction affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:06'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:06'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:18'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:54:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:56:26' prior: 50670831!
transferNetReport
	| total |
	total := 0.
	transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [total := aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [total := aTransaction affectBalance: total from: self].
		].
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:56:30'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 16:57:39' prior: 50670859!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: Transfer) ifTrue:[ total := aTransaction affectBalance: total from: self]].
	"transactions do: [ :aTransaction |
			(aTransaction isPataDestino: self) ifTrue: [total := aTransaction affectBalance: total from: self].
			(aTransaction isPataOrigen: self) ifTrue: [total := aTransaction affectBalance: total from: self].
		]."
	^total

! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:57:44'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 16:57:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 16:57:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 16:57:46'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 18:19:35' prior: 50670876!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: Transfer) ifTrue:[ total := aTransaction affectBalance: total from: self]].
	
	^total

! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:24:33'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:27:51' prior: 50669147!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:28:00' prior: 50670980!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:32:13' prior: 50670988!
from: originAccount to: receiverAccount withValue: transferValue 
	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:33:38' prior: 50670996!
from: originAccount to: receiverAccount withValue: transferValue 

	^self new initializeFrom: originAccount to: receiverAccount withValue: transferValue ! !

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:41:09'!
Transfer subclass: #OriginTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTrasfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:41:16'!
Transfer subclass: #ReceiverTrasfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/23/2023 21:40:46' prior: 50670171!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTrasfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
			"(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] ."
		].
 .
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/23/2023 21:41:21'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:41:29'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:41:36'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:41:40'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:41:51'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:41:53'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:41:54'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:41:55'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:41:56'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:41:56'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:46:09' prior: 50671004!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTrasfer withTransfer: transfer).
	^transfer.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:46:15'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:46:15'!
PASSED!

!classRenamed: #ReceiverTrasfer as: #ReceiverTransfer stamp: 'CJF 10/23/2023 21:46:31'!
Smalltalk renameClassNamed: #ReceiverTrasfer as: #ReceiverTransfer!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJF 10/23/2023 21:46:31' prior: 50671027!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
			"(aTransaction isKindOf: Transfer) ifTrue: [
					(aTransaction isPataOrigen: self) ifTrue: [ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.'].
					(aTransaction isPataDestino: self) ifTrue: [ printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
				] ."
		].
 .
	^printResult.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'CJF 10/23/2023 21:46:31' prior: 50671138!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer).
	^transfer.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:46:47'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:46:47'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:46:51'!
ERROR!
!OriginTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:01'!
withTransfer: transfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithTransfer: transfer ! !
!OriginTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:29' prior: 50671302!
withTransfer: aTransfer
	^self new initializeWithTransfer: aTransfer ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:47:31'!
ERROR!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:47:37'!
Transfer subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OriginTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:47:37'!
initializeWithTransfer: aTransfer 
	self shouldBeImplemented.
	transfer := aTransfer.! !
!OriginTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:47:41' prior: 50671327!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:47:43'!
ERROR!
!ReceiverTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:47:50'!
withTransfer: transfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithTransfer: transfer ! !
!ReceiverTransfer class methodsFor: 'instance creation' stamp: 'CJF 10/23/2023 21:48:00' prior: 50671341!
withTransfer: aTransfer 
	^self new initializeWithTransfer: aTransfer ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:01'!
ERROR!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/23/2023 21:48:06'!
Transfer subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceiverTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:48:06'!
initializeWithTransfer: aTransfer 
	self shouldBeImplemented.
	transfer := aTransfer.! !
!ReceiverTransfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:48:11' prior: 50671366!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:13'!
ERROR!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/23/2023 21:48:23'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/23/2023 21:48:23'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:48:33'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:49:02'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:52:01' prior: 50669199 overrides: 50668477!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction |
			(transaction isKindOf: OriginTransfer ) ifTrue: [transaction affectBalance: currentBalance].
			(transaction isKindOf: ReceiverTransfer ) ifTrue: [transaction affectBalance: currentBalance ]
				ifFalse:[
			transaction affectBalance: currentBalance]
		 ]! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/23/2023 21:52:09'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:51'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:52:51'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:52:51'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:59'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:52:59'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:54:35'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:54:35'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:54:35'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:54:36'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:54:36'!
PASSED!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:55:20' prior: 50669701!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ]
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/23/2023 21:55:31' prior: 50671481!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:55:36'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:55:36'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:55:36'!
ERROR!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:55:36'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:55:36'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:55:52'!
ERROR!
!OriginTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:56:01'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:56:46' prior: 50671531!
affectBalance: currentBalance 
	^currentBalance - 	(transfer value )! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:56:47'!
ERROR!
!ReceiverTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:57:21'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'balance' stamp: 'CJF 10/23/2023 21:57:44' prior: 50671545!
affectBalance: currentBalance 
	^currentBalance + (transfer value)! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:45'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/23/2023 21:57:47'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:57:47'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:57:47'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/23/2023 21:57:58'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:58:01'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/23/2023 21:58:01'!
FAILURE!

----QUIT----(23 October 2023 22:00:41) CuisUniversity-5981.image priorSource: 10846727!

----STARTUP---- (24 October 2023 14:15:14) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!


!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:46'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 14:23:46'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:46'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 14:23:55'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:57'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:23:57'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:24:14'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:44:59' prior: 50669123!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: (transfer isOriginIn: originAccount).	
	self assert: (transfer isReceiveIn: receiverAccount).
	self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer).! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:45:12' prior: 50671629!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: (transfer isOriginIn: originAccount).	
	self assert: (transfer isReceiveIn: receiverAccount).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 14:45:19'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 14:57:18'!
Object subclass: #Transfer
	instanceVariableNames: 'origin receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50669718!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = origin ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50669622!
isPataOrigen: anAccount 
	^origin = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:18' prior: 50671496!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	origin := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 14:57:22'!
Object subclass: #Transfer
	instanceVariableNames: 'origin receiver transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:22' prior: 50671690!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	origin := anOriginAccount.
	receiver := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 14:57:22' prior: 50669670!
isPataDestino: anAccount 
	^receiver = anAccount ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:29'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:29'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:41'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:21:41'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:21:53'!
isOriginIn: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:06' prior: 50671745!
isOriginIn: originAccount 
	originAccount hasRegistered: self.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:12'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:17'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:23'!
isReceiveIn: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:32:33' prior: 50671761!
isReceiveIn: receiverAccount 
	receiverAccount hasRegistered: self.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:34'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:36'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:39'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:32:39'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:37:48' prior: 50668679 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := true.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ aTransaction isTransfer: transaction ].
			(aTransaction isKindOf: ReceiverTransfer ) 
				ifTrue: [aTransaction isTransfer: transaction ] 
				ifFalse: [ aTransaction = transaction ].
		].
	
	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:39:31' prior: 50671785 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := false.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ ret := ret or: (aTransaction isTransfer: transaction) ].
			(aTransaction isKindOf: ReceiverTransfer ) 
				ifTrue: [ret := ret or: (aTransaction isTransfer: transaction )] 
				ifFalse: [ ret := ret or: (aTransaction = transaction) ].
		].
	^ret.
	"^ transactions includes: aTransaction "
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:39:33'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:39:54'!
isTransfer: transaction 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 15:40:08' prior: 50671820!
isTransfer: transaction 
	^self = transaction ! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:09'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:13'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 15:40:23'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJF 10/24/2023 15:41:13' prior: 50671801 overrides: 50668469!
hasRegistered: aTransaction
	|ret|
	ret := false.
	transactions do: [ :transaction | 
			(transaction isKindOf: OriginTransfer) ifTrue: [ ret := ret or: (aTransaction isTransfer: transaction) ].
			(transaction isKindOf: ReceiverTransfer ) 
				ifTrue: [ret := ret or: (aTransaction isTransfer: transaction )] 
				ifFalse: [ ret := ret or: (aTransaction = transaction) ].
		].
	^ret.
	"^ transactions includes: aTransaction "
! !

----STARTUP---- (24 October 2023 15:50:06) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:04:26' prior: 50671249!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	"originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer)."
	^transfer.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:04:51' prior: 50671496!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originAccount := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:05:00'!
Object subclass: #Transfer
	instanceVariableNames: 'originTransfer receiverAccount transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50669718!
affectBalance: currentBalance from: aReceptiveAccount 
	(aReceptiveAccount = originTransfer ) ifTrue: [ ^(currentBalance - transferValue ) ].
	^currentBalance + transferValue .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50669622!
isPataOrigen: anAccount 
	^originTransfer = anAccount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:00' prior: 50671609!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := anOriginAccount.
	receiverAccount := aReceiverAccount.
	transferValue := aTransferValue.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:05:12'!
Object subclass: #Transfer
	instanceVariableNames: 'originTransfer receiverTransfer transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:12' prior: 50671647!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := anOriginAccount.
	receiverTransfer := aReceiverAccount.
	transferValue := aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:05:12' prior: 50669670!
isPataDestino: anAccount 
	^receiverTransfer = anAccount ! !

Object subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:09:16'!
Object subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:09:24'!
Object subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:09:55'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:10:26' prior: 50671596!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer).
	^transfer.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:10:41'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 16:11:27' prior: 50671720!
from: originAccount to: receiverAccount withValue: transferValue 
	|transfer|
	transfer := self new initializeFrom: originAccount to: receiverAccount withValue: transferValue .
	"originAccount register: (OriginTransfer withTransfer: transfer).
	receiverAccount register: (ReceiverTransfer withTransfer: transfer)."
	^transfer.! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:14:14' prior: 50671671!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	transferValue := aTransferValue.
! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:16:35' prior: 50669123!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOrigin: originAccount ).
	self assert: ( transfer isReceiver: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:18:47' prior: 50671750!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	anOriginAccount register: originTransfer.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	aReceiverAccount register: originTransfer.
	transferValue := aTransferValue.
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:19:01'!
ERROR!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:19:07'!
FAILURE!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:19:07'!
FAILURE!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:19:34'!
isOrigin: originAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:20:32' prior: 50671814!
isOrigin: originAccount 
	originAccount hasRegistered: originTransfer.! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:20:36'!
ERROR!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:20:57'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:23:34' prior: 50671819!
isOrigin: originAccount 
	^originAccount hasRegistered: originTransfer.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:23:52'!
isReceiver: receiverAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:24:11' prior: 50671836!
isReceiver: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:13'!
FAILURE!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:16'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:23'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'CJF 10/24/2023 16:24:51' prior: 50671785!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue 
	(aTransferValue > 0) ifFalse: [ ^self error: Transfer invalidTransferValueError ].
	( anOriginAccount = aReceiverAccount ) ifTrue: [ ^self error: Transfer sameAccountError ] "hacer un assert"
.	originTransfer := OriginTransfer withTransfer: self.
	anOriginAccount register: originTransfer.
	receiverTransfer := ReceiverTransfer withTransfer: self.
	aReceiverAccount register: receiverTransfer .
	transferValue := aTransferValue.
! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:24:56'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:24:59'!
PASSED!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:01'!
FAILURE!

!testRun: #TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:01'!
FAILURE!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:25:50' prior: 50669485!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.! !

!methodRemoval: TransfersTests #test03TransferRecognizeAccounts stamp: 'CJF 10/24/2023 16:25:54'!
test03TransferRecognizeAccounts
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	self assert: originAccount balance equals: -50.
	self assert: receiverAccount balance equals: 50.!

!testRun: #TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:26:00'!
PASSED!

!testRun: #TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:26:03'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:26:09'!
test03TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]! !

!methodRemoval: TransfersTests #test04TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:26:09'!
test04TransferMustNotBeNegative
	| originAccount receiverAccount  |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	self should: [
			Transfer from: originAccount to: receiverAccount withValue: -50.] 
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer invalidTransferValueError.
				self assert: originAccount balance equals: 0.
				self assert: receiverAccount balance equals: 0.
			]!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:26:14'!
test04TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]! !

!methodRemoval: TransfersTests #test05TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:26:14'!
test05TransferBetweenDifferentAccount
	| anAccount |
	anAccount := ReceptiveAccount new.
	self should: [ Transfer from: anAccount to: anAccount  withValue: 50 ]
		raise: Error withExceptionDo: [ :anError |
				self assert: anError messageText equals: Transfer sameAccountError.
				self assert: anAccount balance equals: 0.
			 ]!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:28:33'!
test05
	| originAccount receiverAccount transfer |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	"self assert: transfer origin"! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:37:00' prior: 50671986!
test05
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:10'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:18'!
originTransfer
	self shouldBeImplemented.
	^originTransfer! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:25' prior: 50672015!
originTransfer
	^originTransfer! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:27'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:32'!
receiverTrasnfer
	self shouldBeImplemented.! !
!Transfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:44' prior: 50672026!
receiverTrasnfer
	^receiverTransfer ! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:37:46'!
ERROR!
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:37:54'!
isContraryTransfer: receiver 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:02' prior: 50672038!
isContraryTransfer: pata 
	^transfer receiverTrasnfer = pata.! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:03'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:10'!
isContraryTransfer: origin 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:39:30' prior: 50672050!
isContraryTransfer: pata 
	^transfer originTransfer = pata.! !

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:30'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!

!testRun: #TransfersTests #test05 stamp: 'CJF 10/24/2023 16:39:31'!
PASSED!
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:40:21'!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!methodRemoval: TransfersTests #test05 stamp: 'CJF 10/24/2023 16:40:24'!
test05
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTrasnfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 16:40:27'!
PASSED!

AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:41:34'!
AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 16:41:42'!
AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:04'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:42:04'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:42:04'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:42:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:42:27' prior: 50671210!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.'].
		].
 .
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:45'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:42:45'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:42:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:42:45'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:50'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:42:50'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:43:03'!
ERROR!
!ReceiverTransfer methodsFor: 'nil' stamp: 'CJF 10/24/2023 16:43:54' overrides: 50668707!
value
	^ transfer value! !
!OriginTransfer methodsFor: 'nil' stamp: 'CJF 10/24/2023 16:44:02' overrides: 50668707!
value
	^ transfer value! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:44:06'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:44:09'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:44:09'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:44:41'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:45:02'!
FAILURE!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:45:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:47:11' prior: 50670934!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction |  total :=  (aTransaction affectTransferNet: total) ].
	
	^total

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 16:47:15'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:18'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:27'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:47' prior: 50672363!
affectTransferNet: total 
	total + transfer value! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:47:51' prior: 50672368!
affectTransferNet: total 
	^total + transfer value! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:47:55'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:47:56'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:47:59'!
ERROR!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:47:59'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:48:08'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:48:24' prior: 50672396!
affectTransferNet: total 
	^total - transfer value.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:48:25'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:48:30'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:49:55'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	self assert: anAccount transferNetReport equals: 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:49:56'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:09'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:17' prior: 50672433!
affectTransferNet: total ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:50:18'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:31'!
affectTransferNet: total 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:35' prior: 50672446!
affectTransferNet: total 
! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:50:36'!
FAILURE!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:50:56' prior: 50672438!
affectTransferNet: total 
	^0! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:51:10' prior: 50672451!
affectTransferNet: total 
	^total! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:51:16' prior: 50672460!
affectTransferNet: total 
	^total! !

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:51:20'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:51:24'!
FAILURE!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:51:24'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 16:53:11' prior: 50672414!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	self assert: anAccount transferNetReport equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:53:12'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 16:55:22' prior: 50672191!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report
			"(aTransaction isKindOf: Deposit) ifTrue: [ printResult addLast: 'Depósito por ' , (aTransaction ) value asString, '.' ].
			(aTransaction isKindOf: Withdraw ) ifTrue: [ printResult addLast: 'Extracción por ', (aTransaction ) value asString, '.'].
			(aTransaction isKindOf: OriginTransfer) ifTrue:[ printResult addLast: 'Salida por transferencia de ' , aTransaction value asString , '.' ].
			(aTransaction isKindOf: ReceiverTransfer) ifTrue:[printResult addLast: 'Entrada por transferencia de ', aTransaction value asString , '.']".
		].
 .
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:55:32'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:55:33'!
ERROR!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:55:33'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:55:41'!
report
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:56:27' prior: 50672587!
report
	^'Depósito por ' , value asString, '.' ! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:56:29'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:56:46'!
ERROR!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:56:46'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:56:52'!
report
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:57:19' prior: 50672608!
report
	^'Extracción por ', value asString, '.'! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:57:20'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:57:23'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:57:26'!
ERROR!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:57:26'!
ERROR!
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:57:32'!
report
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:01' prior: 50672631!
report
	^ 'Salida por transferencia de ' , transfer value asString , '.' ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:02'!
ERROR!
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:09'!
report
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'category-name' stamp: 'CJF 10/24/2023 16:58:32' prior: 50672645!
report
	^'Entrada por transferencia de ', transfer value asString , '.'! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:34'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 16:58:36'!
PASSED!

----SNAPSHOT----(24 October 2023 17:01:38) CuisUniversity-5981.image priorSource: 10877995!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:30' prior: 50672547!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
 .
	^printResult.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:34' prior: 50672703!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.! !

----SNAPSHOT----(24 October 2023 17:04:15) CuisUniversity-5981.image priorSource: 10913565!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:07:49'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:08:31'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'CJF 10/24/2023 17:09:11'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:22:10' prior: 50672715!
accountSummaryReport
	|printBalance printResult  accountSummaryReport  |
	accountSummaryReport := AccountSummary new.
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: (accountSummaryReport giveMeReportFor: aTransaction)].
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 17:22:19'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:22:34'!
ERROR!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:22:34'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:22:49'!
giveMeReportFor: aTransaction 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:24:17' prior: 50672807!
giveMeReportFor: aTransaction 
! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:31:03' prior: 50672812!
giveMeReportFor: aTransaction 
	^aTransaction report
! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:31:08'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:31:10'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:31:13'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:31:14'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:31:17'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:32:56' prior: 50672761!
accountSummaryReport
	|printBalance printResult  accountSummaryReport  |
	accountSummaryReport := AccountSummary new.
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | (accountSummaryReport giveMeReportFor: aTransaction with: printResult)].
	^printResult.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 17:32:59'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:33:05'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:06'!
ERROR!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:06'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:10'!
giveMeReportFor: aTransaction with: printResult 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:49' prior: 50672933!
giveMeReportFor: aTransaction with: printResult 
	printResult addLast: aTransaction ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:33:55' prior: 50672939!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction ! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:33:59'!
FAILURE!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:33:59'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:34:57'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:35:08'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:24'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:31'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:31'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:36:54' prior: 50672945!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction report! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:56'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:36:59'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:37:02'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 17:02:34' prior: 50672880!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 17:40:26'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:41:23' prior: 50669755!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount |
	anAccount := ReceptiveAccount new. 
	AccountSummary for: anAccount.
	self assert: (anAccount accountSummaryReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:42:19' prior: 50673131!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport report) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:22'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 17:42:30'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 17:42:37' prior: 50673157!
for: anAccount 
	^self new initializeFor: anAccount ! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:40'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 17:42:47'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:42:47'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:42:56' prior: 50673181!
initializeFor: anAccount 
	account := anAccount.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:42:57'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:03'!
report
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:34' prior: 50673195!
report
	^'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:43:35'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 17:43:59' prior: 50673200!
report
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 17:44:00'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:45:53' prior: 50669817!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (summaryReport report) equals: reportPrinted.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 17:45:56' prior: 50673217!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 17:45:58'!
FAILURE!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:05:22' prior: 50673208!
report
	
	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:33:52' prior: 50673251!
report

	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:36:31' prior: 50673256!
report
	| report |
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:01'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:37:13'!
startSummaryReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:37:36' prior: 50673273!
startSummaryReport: report with: anAccountSummary 
	^report! !

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:40'!
FAILURE!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 18:37:40'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:40'!
FAILURE!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:37:48'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:57'!
FAILURE!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:37:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:40:52' prior: 50673279!
startSummaryReport: report with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReport: report with: anAccountSummary].
	"^report"! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:40:57'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:41:07'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:42:48' prior: 50673358!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReport: report forDeposit: self.! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:42:52'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:43:04'!
fillReport: report forDeposit: aDeposit 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 18:44:39' prior: 50673373!
fillReport: report forDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:44:41'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:44:48'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 18:44:54'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 18:45:00'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 18:45:05'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:23:32'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 19:26:36' prior: 50670031!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:26:37'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:26:45'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:33:26' prior: 50673429!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReport: report forWithdraw: self. ! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:33:29'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:33:36'!
fillReport: report forWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 19:46:08' prior: 50673445!
fillReport: report forWithdraw: aWithdraw 
	report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 19:46:21'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 19:46:25'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:17:46' prior: 50670110!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport report) equals: reportPrinted.! !

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:17:48'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:17:53'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:18:18'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:19:36' prior: 50670146!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryReport := AccountSummary for: originAccount .
	summaryReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (originAccount accountSummaryReport) equals: originReport.
	self assert: (receiverAccount accountSummaryReport) equals: receiverReport.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:21:44' prior: 50673578!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport ) equals: originReport.
	self assert: (summaryReceiverReport ) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:21:48'!
FAILURE!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:21:48'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:00' prior: 50673604!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport report ) equals: originReport.
	self assert: (summaryReceiverReport report ) equals: receiverReport.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:24:02'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:07'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:24:43' prior: 50673667!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReport: report forOriginTransfer: self ! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:24:46'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:24:56'!
fillReport: report forOriginTransfer: anOriginTransfer 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:26:43' prior: 50673682!
fillReport: report forOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:26:45'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:26:51'!
fillReport: report with: anAccountSummary 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:27:23' prior: 50673699!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReport: report forReceiverTransfer: self.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:27:27'!
ERROR!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:27:34'!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:28:11' prior: 50673714!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 20:28:15' prior: 50673720!
fillReport: report forReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:28:16'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:28:21'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:30:38'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:32:29' prior: 50670281!
test06
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	! !

!testRun: #ReportesTests #test06 stamp: 'CJF 10/24/2023 20:32:33'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:32:56'!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	! !

!methodRemoval: ReportesTests #test06 stamp: 'CJF 10/24/2023 20:32:59'!
test06
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport report) equals: originReport.
	!

!methodRemoval: ReceptiveAccount #accountSummaryReport stamp: 'CJF 10/24/2023 20:34:47'!
accountSummaryReport
	|printBalance printResult|
	printResult := OrderedCollection new.
	printBalance := 'Balance = ' , (self balance) asString.
	printResult addLast: printBalance.
	transactions do: [ :aTransaction | printResult addLast: aTransaction report].
	^printResult.!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 20:40:37'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:40:25' prior: 50670327!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: transferReport equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:40:47'!
ERROR!
!TransferNet class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 20:40:56'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!TransferNet class methodsFor: 'instance creation' stamp: 'CJF 10/24/2023 20:41:04' prior: 50673933!
for: anAccount 
	^self new initializeFor: anAccount ! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:05'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 20:41:14'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'CJF 10/24/2023 20:41:14'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TransferNet methodsFor: 'initialization' stamp: 'CJF 10/24/2023 20:41:17' prior: 50673957!
initializeFor: anAccount 
	account := anAccount.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:18'!
FAILURE!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:41:33' prior: 50673920!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:34'!
ERROR!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:41:42'!
report
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:41:48' prior: 50673985!
report
	^0! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 20:41:58'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 20:43:14' prior: 50670376!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 20:43:15'!
FAILURE!

!methodRemoval: AccountSummary #giveMeReportFor: stamp: 'CJF 10/24/2023 20:47:17'!
giveMeReportFor: aTransaction 
	^aTransaction report
!

!methodRemoval: AccountSummary #giveMeReportFor:with: stamp: 'CJF 10/24/2023 20:47:41'!
giveMeReportFor: aTransaction with: printResult 
	^printResult addLast: aTransaction report!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 20:58:52' prior: 50673989!
report
	|report|
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:00:10'!
ERROR!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:00:10'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:00:32'!
startTransferNetReport: report with: aTransferNet 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:06:09' prior: 50674082!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNet: aTotalTransfer with: aTransferNet ] .
	^aTotalTransfer ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:06:24' prior: 50674088!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNet: aTotalTransfer with: aTransferNet ] .
	^aTotalTransfer ! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:11'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:23'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:08:51'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:08:54'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:08:54'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:09:09'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:10:10'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:10:10'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:16:22' prior: 50674124!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAs: self.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:16:30'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:16:42'!
affectTotalTransferAs: aReceiverTransfer 
	self shouldBeImplemented.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:18:35'!
Object subclass: #TransferNet
	instanceVariableNames: 'account totalTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:18:32' prior: 50674148!
affectTotalTransferAs: aReceiverTransfer 
	totalTransfer := aReceiverTransfer affectTransferNet: totalTransfer.! !

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:18:50'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:19:36' prior: 50674069!
report
	 
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:19:36'!
Object subclass: #TransferNet
	instanceVariableNames: 'account totalTransfer report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 21:19:41' prior: 50674173!
report
	report := 0.
	account startTransferNetReport: report with: self.
	^report.! !

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:19:50'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:19:54'!
ERROR!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:19:54'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:22:36' prior: 50674162!
affectTotalTransferAs: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:22:48'!
Object subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:22:54'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:22:57'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:23:52' prior: 50670492!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:24:00'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:24:04'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:25:04' prior: 50674242!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAs: self! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:26:13' prior: 50674248!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:26:26'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:26:32'!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:27:11' prior: 50674265!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).! !

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:27:13'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:28:36' prior: 50672486!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport := TransferNet anAccount .
	self assert: (transferReport report )equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:28:39'!
ERROR!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:29:37' prior: 50674324!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:29:40'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:29:48'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:16' prior: 50674367!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:30:19'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:29'!
affectTotalTransferAsDeposit: aDeposit 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:49' prior: 50674384!
affectTotalTransferAsDeposit: aDeposit 
	report := report + 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:30:51'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:30:57'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:21' prior: 50674399!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self ! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:24'!
ERROR!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:28'!
affectTotalTransferAsWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:31:44' prior: 50674416!
affectTotalTransferAsWithdraw: aWithdraw 
	report := report + 0.! !

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:31:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:03'!
PASSED!
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:32:34' prior: 50670596!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !
!ReportesTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:32:41'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: ReportesTests #test10TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:41'!
test10TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:43'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:32:47'!
PASSED!
!TransferNet methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:33:40'!
affectTotalTransferAsReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:33:40' prior: 50674138!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAs: stamp: 'CJF 10/24/2023 21:33:40'!
affectTotalTransferAs: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.!

!testRun: #ReportesTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!testRun: #ReportesTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:33:45'!
PASSED!

!classRenamed: #ReportesTests as: #ReportTests stamp: 'CJF 10/24/2023 21:34:05'!
Smalltalk renameClassNamed: #ReportesTests as: #ReportTests!

TestCase subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:34:20'!
TestCase subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TransferNetReport as: #TransferNetTests stamp: 'CJF 10/24/2023 21:35:27'!
Smalltalk renameClassNamed: #TransferNetReport as: #TransferNetTests!

TestCase subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:35:40'!
TestCase subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:35:56'!
Transfer subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:36:05'!
Reports subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:36:22'!
Reports subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTests methodsFor: 'no messages' stamp: 'CJF 10/24/2023 21:37:08'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:20'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:33'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:41'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:37:51'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: ReportTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:37:55'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.!

!methodRemoval: ReportTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:37:57'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!methodRemoval: ReportTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:37:58'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.!

!methodRemoval: ReportTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:37:59'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.!

!methodRemoval: ReportTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:38:00'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:06'!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.! !

!methodRemoval: TransferNetTests #test07TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:38:06'!
test07TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 0.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:10'!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.! !

!methodRemoval: TransferNetTests #test08TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:38:10'!
test08TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 20.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:15'!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.! !

!methodRemoval: TransferNetTests #test09TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:38:15'!
test09TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: -20.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:28'!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.! !

!methodRemoval: TransferNetTests #test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:38:28'!
test10TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport report )equals: 10.!
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:38:34'!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.! !

!methodRemoval: TransferNetTests #test11TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:38:34'!
test11TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport report) equals: 10.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:40:04'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 21:40:07'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 21:40:11'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 21:40:15'!
PASSED!

TestCase subclass: #Tests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Tests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:40:45'!
TestCase subclass: #Tests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(24 October 2023 21:41:28) CuisUniversity-5981.image priorSource: 10914421!

Tests subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:41:39'!
Tests subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:17'!
Tests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransfersTests category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:25'!
Tests subclass: #TransfersTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Tests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:42:34'!
Tests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:49:53' prior: 50674097!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
	^aTotalTransfer ! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:13'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:13'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:50:13'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:50:17'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:50:17'!
ERROR!
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:52:15'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:52:47' prior: 50675202!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.! !

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:52:52'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:53:03'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:53:10'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:53:10'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:53:10'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:15'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:15'!
ERROR!
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:53:22'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:53:43' prior: 50675270!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.! !

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:53:47'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:12'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:18'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:35' prior: 50675314!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. ! !

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:36'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:42'!
addToTransferNetWith: aTransferNet 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:54:54' prior: 50675329!
addToTransferNetWith: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self ! !

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:54:57'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 21:55:02'!
PASSED!

!methodRemoval: Withdraw #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:22'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsWithdraw: self !

!methodRemoval: ReceiverTransfer #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:33'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsReceiverTransfer: self.!

!methodRemoval: OriginTransfer #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:39'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsOriginTransfer: self.!

!methodRemoval: Deposit #addToTransferNet:with: stamp: 'CJF 10/24/2023 21:55:47'!
addToTransferNet: aTotalTransfer with: aTransferNet 
	aTransferNet affectTotalTransferAsDeposit: self. !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:34' prior: 50673379!
fillReport: aReport forDeposit: aDeposit 
	^aReport addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:44' prior: 50673688!
fillReport: aReport forOriginTransfer: anOriginTransfer 
	^aReport addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:57:55' prior: 50673728!
fillReport: aReport forReceiverTransfer: aReceiverTransfer 
	^aReport addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:58:01' prior: 50673451!
fillReport: aReport forWithdraw: aWithdraw 
	aReport addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 21:58:19' prior: 50673261!
report
	 
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 21:58:19'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 21:58:51' prior: 50675419!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReport: report with: self.
	^report.! !

----SNAPSHOT----(24 October 2023 22:06:18) CuisUniversity-5981.image priorSource: 10990352!
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:04'!
fillReportForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:20'!
fillReportForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:35'!
fillReportForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:11:53'!
fillReportForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:12:22' prior: 50673363!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:12:43' prior: 50673673!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self ! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:12:57' prior: 50673705!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:13:16' prior: 50673435!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:14:33' prior: 50673346!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReport: aReport with: anAccountSummary].
	"^report"! !
!Deposit methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:15:48'!
fillReportWith: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:16:00'!
fillReportWith: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self ! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'CJF 10/24/2023 22:16:11'!
fillReportWith: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.! !
!Withdraw methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:16:21'!
fillReportWith: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. ! !

!methodRemoval: Withdraw #fillReport:with: stamp: 'CJF 10/24/2023 22:18:17'!
fillReport: report with: anAccountSummary 
	^ anAccountSummary fillReportForWithdraw: self. !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'CJF 10/24/2023 22:18:51' prior: 50675498!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"! !

!methodRemoval: Deposit #fillReport:with: stamp: 'CJF 10/24/2023 22:19:00'!
fillReport: report with: anAccountSummary 
	^anAccountSummary fillReportForDeposit: self.!

!methodRemoval: OriginTransfer #fillReport:with: stamp: 'CJF 10/24/2023 22:19:06'!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForOriginTransfer: self !

!methodRemoval: ReceiverTransfer #fillReport:with: stamp: 'CJF 10/24/2023 22:19:12'!
fillReport: report with: anAccountSummary 
	anAccountSummary fillReportForReceiverTransfer: self.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 22:19:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 22:19:31'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 22:19:34'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 22:19:40'!
PASSED!

!methodRemoval: ReceptiveAccount #transferNetReport stamp: 'CJF 10/24/2023 22:21:31'!
transferNetReport
	| total |
	total := 0.
	transactions do: [:aTransaction |  total :=  (aTransaction affectTransferNet: total) ].
	
	^total

!

!methodRemoval: AccountSummary #fillReport:forDeposit: stamp: 'CJF 10/24/2023 22:22:18'!
fillReport: aReport forDeposit: aDeposit 
	^aReport addLast: 'Depósito por ' , aDeposit value asString, '.'. !

!methodRemoval: AccountSummary #fillReport:forOriginTransfer: stamp: 'CJF 10/24/2023 22:22:20'!
fillReport: aReport forOriginTransfer: anOriginTransfer 
	^aReport addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'!

!methodRemoval: AccountSummary #fillReport:forReceiverTransfer: stamp: 'CJF 10/24/2023 22:22:21'!
fillReport: aReport forReceiverTransfer: aReceiverTransfer 
	^aReport addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.!

!methodRemoval: AccountSummary #fillReport:forWithdraw: stamp: 'CJF 10/24/2023 22:22:22'!
fillReport: aReport forWithdraw: aWithdraw 
	aReport addLast: 'Extracción por ' , aWithdraw value asString , '.'!

!methodRemoval: Deposit #report stamp: 'CJF 10/24/2023 22:29:03'!
report
	^'Depósito por ' , value asString, '.' !

!methodRemoval: OriginTransfer #report stamp: 'CJF 10/24/2023 22:29:33'!
report
	^ 'Salida por transferencia de ' , transfer value asString , '.' !

!methodRemoval: ReceiverTransfer #report stamp: 'CJF 10/24/2023 22:29:47'!
report
	^'Entrada por transferencia de ', transfer value asString , '.'!

!methodRemoval: Withdraw #report stamp: 'CJF 10/24/2023 22:29:50'!
report
	^'Extracción por ', value asString, '.'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:31:50'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:09'!
TransferTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:22'!
TransferTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RegularTransaction category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:46'!
AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

RegularTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:32:54'!
RegularTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

RegularTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'CJF 10/24/2023 22:33:02'!
RegularTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'CJF 10/24/2023 22:33:33'!
isContraryTransfer: pata 
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 22:39:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 22:39:29'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 22:39:32'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 22:39:33'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 22:39:35'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'CJF 10/24/2023 22:39:39'!
PASSED!

----QUIT----(24 October 2023 23:05:52) CuisUniversity-5981.image priorSource: 11001331!

----STARTUP---- (24 October 2023 23:17:48) as C:\Users\crist\Desktop\Inge1 2c 2023\cuis para tdd\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:18:49'!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:20'!
startTransferNetReportWith: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:30' prior: 50675972!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
! !
!AccountSummary methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:44' prior: 50675435!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'CJF 10/24/2023 23:19:56' prior: 50674187!
report
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !

!methodRemoval: ReceptiveAccount #startTransferNetReport:with: stamp: 'CJF 10/24/2023 23:20:06'!
startTransferNetReport: aTotalTransfer with: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
	^aTotalTransfer !

!methodRemoval: ReceptiveAccount #startSummaryReport:with: stamp: 'CJF 10/24/2023 23:20:10'!
startSummaryReport: aReport with: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
	"^report"!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CJF 10/24/2023 23:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJF 10/24/2023 23:20:21'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'CJF 10/24/2023 23:20:24'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'CJF 10/24/2023 23:20:29'!
PASSED!

----QUIT----(24 October 2023 23:20:57) CuisUniversity-5981.image priorSource: 11018068!

----STARTUP---- (25 October 2023 20:13:57) as /home/camila/Desktop/CUIS PORTFOLIO 2/CuisUniversity-5981.image!


!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:15:40'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:15:43'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:15:45'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:15:47'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:15:49'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:15:51'!
PASSED!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:18:41'!
executeForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:18:41' prior: 50675506!
fillReportWith: anAccountSummary 
	^anAccountSummary executeForDeposit: self.! !

!methodRemoval: AccountSummary #fillReportForDeposit: stamp: 'camila 10/25/2023 20:18:41'!
fillReportForDeposit: aDeposit 
	^report addLast: 'Depósito por ' , aDeposit value asString, '.'. !
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:18:59'!
executeForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:18:59' prior: 50675512!
fillReportWith: anAccountSummary 
	anAccountSummary executeForOriginTransfer: self ! !

!methodRemoval: AccountSummary #fillReportForOriginTransfer: stamp: 'camila 10/25/2023 20:18:59'!
fillReportForOriginTransfer: anOriginTransfer 
	^report addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:19:17'!
executeForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:19:17' prior: 50675518!
fillReportWith: anAccountSummary 
	anAccountSummary executeForReceiverTransfer: self.! !

!methodRemoval: AccountSummary #fillReportForReceiverTransfer: stamp: 'camila 10/25/2023 20:19:17'!
fillReportForReceiverTransfer: aReceiverTransfer 
	^report addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.!
!AccountSummary methodsFor: 'fillReport' stamp: 'camila 10/25/2023 20:19:39'!
executeForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:19:39' prior: 50675524!
fillReportWith: anAccountSummary 
	^ anAccountSummary executeForWithdraw: self. ! !

!methodRemoval: AccountSummary #fillReportForWithdraw: stamp: 'camila 10/25/2023 20:19:39'!
fillReportForWithdraw: aWithdraw 
	^report addLast: 'Extracción por ' , aWithdraw value asString , '.'!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:19:57'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:19:57'!
PASSED!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:14'!
executeForDeposit: aDeposit 
	report := report + 0.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:14' prior: 50675319!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForDeposit: self. ! !

!methodRemoval: TransferNet #affectTotalTransferAsDeposit: stamp: 'camila 10/25/2023 20:20:14'!
affectTotalTransferAsDeposit: aDeposit 
	report := report + 0.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:29'!
executeForWithdraw: aWithdraw 
	report := report + 0.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:29' prior: 50675334!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForWithdraw: self ! !

!methodRemoval: TransferNet #affectTotalTransferAsWithdraw: stamp: 'camila 10/25/2023 20:20:29'!
affectTotalTransferAsWithdraw: aWithdraw 
	report := report + 0.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:20:44'!
executeForReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:20:44' prior: 50675208!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForReceiverTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAsReceiverTransfer: stamp: 'camila 10/25/2023 20:20:44'!
affectTotalTransferAsReceiverTransfer: aReceiverTransfer 
	report := aReceiverTransfer affectTransferNet: report.!
!TransferNet methodsFor: 'affect Transfer Report' stamp: 'camila 10/25/2023 20:21:06'!
executeForOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:21:06' prior: 50675276!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForOriginTransfer: self.! !

!methodRemoval: TransferNet #affectTotalTransferAsOriginTransfer: stamp: 'camila 10/25/2023 20:21:06'!
affectTotalTransferAsOriginTransfer: anOriginTransfer 
	report := report - (anOriginTransfer value).!

Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:07'!
Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:18'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:25:23'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:25:37'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:25:39'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:25:39'!
PASSED!
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:37'!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:46'!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:27:54'!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'execute' stamp: 'camila 10/25/2023 20:28:01'!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:28:11'!
initializeFor: anAccount

	self subclassResponsibility! !
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:28:24'!
report

	self subclassResponsibility! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:28:44'!
PASSED!

!methodRemoval: AccountSummary #initializeFor: stamp: 'camila 10/25/2023 20:28:52'!
initializeFor: anAccount 
	account := anAccount.!

!methodRemoval: TransferNet #initializeFor: stamp: 'camila 10/25/2023 20:28:56'!
initializeFor: anAccount 
	account := anAccount.!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:29:00'!
ERROR!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ' report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:31'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: ' report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:35'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:29:41'!
Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:29:50' prior: 50676453!
initializeFor: anAccount

	account := anAccount .! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:29:53'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:29:54'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:29:54'!
PASSED!
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54'!
buildReport

	self subclassResponsibility! !
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54' overrides: 50676624!
buildReport
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 20:31:54' overrides: 50676624!
buildReport
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673637!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport buildReport ) equals: originReport.
	self assert: (summaryReceiverReport buildReport ) equals: receiverReport.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673854!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildReport) equals: originReport.
	! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673508!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport buildReport) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674856!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673232!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildReport) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674942!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674836!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674881!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50674906!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 10.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673142!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildReport) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:31:54' prior: 50673410!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildReport) equals: reportPrinted.! !

!methodRemoval: AccountFunctionality #report stamp: 'camila 10/25/2023 20:31:54'!
report

	self subclassResponsibility!

!methodRemoval: AccountSummary #report stamp: 'camila 10/25/2023 20:31:54'!
report
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.!

!methodRemoval: TransferNet #report stamp: 'camila 10/25/2023 20:31:54'!
report
	report := 0.
	account startTransferNetReportWith: self.
	^report.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:32:04'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:32:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'camila 10/25/2023 20:32:12'!
PASSED!

----SNAPSHOT----(25 October 2023 20:33:09) CuisUniversity-5981.image priorSource: 11023917!
!TransferTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:10'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:45'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'balance' stamp: 'camila 10/25/2023 20:37:50' overrides: 50668711!
affectBalance: aBalance

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:37:57'!
affectTransferNet: total

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:38:16'!
fillReportWith: anAccountSummary

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:38:21'!
initializeFor: aValue

	self subclassResponsibility! !
!RegularTransaction methodsFor: 'value' stamp: 'camila 10/25/2023 20:38:27' overrides: 50668707!
value

	self subclassResponsibility! !

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:38:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:38:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OriginTransfer category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:39:06'!
AccountTransaction subclass: #OriginTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceiverTransfer category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:39:10'!
AccountTransaction subclass: #ReceiverTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #RegularTransaction stamp: 'camila 10/25/2023 20:39:21'!
AccountTransaction subclass: #RegularTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'camila 10/25/2023 20:39:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:39:31'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:39:33'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:39:33'!
PASSED!
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:39:49'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'balance' stamp: 'camila 10/25/2023 20:39:53' prior: 50668711!
affectBalance: aBalance

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:39:56'!
affectTransferNet: total

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 20:40:01'!
fillReportWith: anAccountSummary

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'initialization' stamp: 'camila 10/25/2023 20:40:05'!
initializeFor: aValue

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'value' stamp: 'camila 10/25/2023 20:40:11' prior: 50668707 overrides: 16902254!
value

	self subclassResponsibility! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:40:51'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:40:53'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:45:32'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:46:32'!
test02TransferNetReportForAccountWithReceiverTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.! !

!methodRemoval: TransferNetTests #test02TransferNetReportForAccountWithInputTransfer stamp: 'camila 10/25/2023 20:46:32'!
test02TransferNetReportForAccountWithInputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: 20.!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:46:43'!
test03TransferNetReportForAccountWithOriginTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.! !

!methodRemoval: TransferNetTests #test03TransferNetReportForAccountWithOutputTransfer stamp: 'camila 10/25/2023 20:46:43'!
test03TransferNetReportForAccountWithOutputTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildReport) equals: -20.!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:47:30'!
test06TransferNetReportWithDeposit
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 0.! !

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:47:31'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:47:31'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 20:48:21'!
test07TransferNetReportWithWithdraw
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildReport )equals: 0.! !

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:48:23'!
PASSED!

!methodRemoval: OriginTransfer #affectTransferNet: stamp: 'camila 10/25/2023 20:50:39'!
affectTransferNet: total 
	^total - transfer value.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:50:43'!
PASSED!

!methodRemoval: ReceiverTransfer #affectTransferNet: stamp: 'camila 10/25/2023 20:50:59'!
affectTransferNet: total 
	^total + transfer value!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:51:02'!
ERROR!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:51:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:51:06'!
ERROR!
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 20:52:09' prior: 50676311 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	report := report + (aReceiverTransfer value).! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:52:13'!
PASSED!

!methodRemoval: Deposit #affectTransferNet: stamp: 'camila 10/25/2023 20:52:22'!
affectTransferNet: total 
	^total!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'camila 10/25/2023 20:52:29'!
affectTransferNet: total 
	^total!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:52:32'!
PASSED!

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'camila 10/25/2023 20:52:38'!
affectTransferNet: total

	self subclassResponsibility!
!ReceiverTransfer methodsFor: 'initialize' stamp: 'camila 10/25/2023 20:53:34' overrides: 50677112!
initializeFor: aTransfer 
	transfer := aTransfer.! !
!ReceiverTransfer class methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:53:34' prior: 50671350!
withTransfer: aTransfer 
	^self new initializeFor: aTransfer ! !

!methodRemoval: ReceiverTransfer #initializeWithTransfer: stamp: 'camila 10/25/2023 20:53:34'!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 20:53:44'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 20:53:44'!
PASSED!
!OriginTransfer methodsFor: 'initialize' stamp: 'camila 10/25/2023 20:54:03' overrides: 50677112!
initializeFor: aTransfer 
	transfer := aTransfer.! !
!OriginTransfer class methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:54:03' prior: 50671311!
withTransfer: aTransfer
	^self new initializeFor: aTransfer ! !

!methodRemoval: OriginTransfer #initializeWithTransfer: stamp: 'camila 10/25/2023 20:54:03'!
initializeWithTransfer: aTransfer 
	transfer := aTransfer.!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 20:54:06'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:54:09'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:54:09'!
PASSED!
!AccountFunctionality methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18'!
buildResult

	self subclassResponsibility! !
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18' overrides: 50677536!
buildResult
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 20:55:18' overrides: 50677536!
buildResult
	report := 0.
	account startTransferNetReportWith: self.
	^report.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676757!
test01TransferNetReportForNewAccountReturnZero
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 0.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677257!
test07TransferNetReportWithWithdraw
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676811!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677194!
test03TransferNetReportForAccountWithOriginTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: -20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676742!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 10.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676781!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 10.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676726!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677169!
test02TransferNetReportForAccountWithReceiverTransfer
	|anAccount transferReport|
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50677219!
test06TransferNetReportWithDeposit
	|anAccount transferReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676799!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport|
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676695!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	summaryReport := AccountSummary for: anAccount .
	
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676643!
test05ReportPrintTransferOutput
	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	self assert: (summaryOriginReport buildResult ) equals: originReport.
	self assert: (summaryReceiverReport buildResult ) equals: receiverReport.! !
!ReportTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 20:55:18' prior: 50676670!
test06ReportPrintAllTransactions
	| anAccount originReport  summaryReport|
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	summaryReport := AccountSummary for: anAccount .
	
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildResult) equals: originReport.
	! !

!methodRemoval: AccountFunctionality #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport

	self subclassResponsibility!

!methodRemoval: AccountSummary #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport
	report := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^report.!

!methodRemoval: TransferNet #buildReport stamp: 'camila 10/25/2023 20:55:19'!
buildReport
	report := 0.
	account startTransferNetReportWith: self.
	^report.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 20:55:30'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 20:55:32'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 20:55:32'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'camila 10/25/2023 20:56:44'!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountFunctionality].
! !

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 20:59:47'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:03'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:13'!
AccountFunctionality subclass: #TransferNet
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:00:18'!
AccountFunctionality subclass: #AccountSummary
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:00:27' prior: 50677541 overrides: 50677536!
buildResult
	result := OrderedCollection with: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^result.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:00:34' prior: 50677549 overrides: 50677536!
buildResult
	result := 0.
	account startTransferNetReportWith: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:00:43'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:00:43'!
ERROR!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:00:52'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:00:52'!
ERROR!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:00:52'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' overrides: 50676576!
initializeFor: anAccount

	account := anAccount .! !
!AccountSummary methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' overrides: 50676576!
initializeFor: anAccount

	account := anAccount .! !
!AccountFunctionality methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:21' prior: 50676576!
initializeFor: anAccount

	self subclassResponsibility! !
!AccountSummary methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:39' prior: 50677957 overrides: 50677962!
initializeFor: anAccount

	account := anAccount .
	result := OrderedCollection new.! !
!TransferNet methodsFor: 'initialization' stamp: 'camila 10/25/2023 21:01:54' prior: 50677952 overrides: 50677962!
initializeFor: anAccount

	account := anAccount .
	result := 0.! !

Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:02:01'!
Object subclass: #AccountFunctionality
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountFunctionality category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 21:02:16'!
Object subclass: #AccountFunctionality
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:02:19'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:02:19'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:02:21'!
ERROR!
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:41' prior: 50676177 overrides: 50676433!
executeForDeposit: aDeposit 
	^result addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:46' prior: 50676195 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	^result addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:49' prior: 50676216 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	^result addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:53' prior: 50676237 overrides: 50676448!
executeForWithdraw: aWithdraw 
	^result addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:02:59' prior: 50676279 overrides: 50676433!
executeForDeposit: aDeposit 
	result := result + 0.! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:04' prior: 50676331 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	result := result - (anOriginTransfer value).! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:12' prior: 50677368 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	result := result + (aReceiverTransfer value).! !
!TransferNet methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:18' prior: 50676295 overrides: 50676448!
executeForWithdraw: aWithdraw 
	result := result + 0.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:27' prior: 50678048 overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer 
	result addLast: 'Entrada por transferencia de ' , aReceiverTransfer value asString , '.'.! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:30' prior: 50678056 overrides: 50676448!
executeForWithdraw: aWithdraw 
	result addLast: 'Extracción por ' , aWithdraw value asString , '.'! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:34' prior: 50678033 overrides: 50676433!
executeForDeposit: aDeposit 
	result addLast: 'Depósito por ' , aDeposit value asString, '.'. ! !
!AccountSummary methodsFor: 'execute' stamp: 'camila 10/25/2023 21:03:38' prior: 50678040 overrides: 50676438!
executeForOriginTransfer: anOriginTransfer 
	result addLast: 'Salida por transferencia de ' , anOriginTransfer value asString , '.'! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:03:44'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:03:46'!
PASSED!

----SNAPSHOT----(25 October 2023 21:03:55) CuisUniversity-5981.image priorSource: 11049376!
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:04:16' prior: 50677896 overrides: 50677536!
buildResult
	account startTransferNetReportWith: self.
	^result.! !

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:04:24'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:04:24'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:04:53' prior: 50677888 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account startSummaryReportWith: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:04:56'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:04:56'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:24' prior: 50677827!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
! !
!Deposit methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:36' prior: 50676184 overrides: 50677107!
fillReportWith: anAccountSummary 
	anAccountSummary executeForDeposit: self.! !
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:05:50' prior: 50676244 overrides: 50677107!
fillReportWith: anAccountSummary 
	anAccountSummary executeForWithdraw: self. ! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:06:00'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:06:02'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:06:02'!
PASSED!
!Deposit methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:20'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!OriginTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:36'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!ReceiverTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:41'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:06:47'!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForDeposit: self. ! !

!methodRemoval: ReceptiveAccount #startSummaryReportWith: stamp: 'camila 10/25/2023 21:07:07'!
startSummaryReportWith: anAccountSummary 
	transactions do: [ :aTransaction | aTransaction fillReportWith: anAccountSummary].
!

!methodRemoval: ReceptiveAccount #startTransferNetReportWith: stamp: 'camila 10/25/2023 21:07:09'!
startTransferNetReportWith: aTransferNet 
	transactions do: [ :aTransaction | aTransaction addToTransferNetWith: aTransferNet ] .
!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:07:23'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:25'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:33'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:07:40'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:41'!
ERROR!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:07:50'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'camila 10/25/2023 21:08:01' prior: 50678206 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account startFunctionalityResult: self.
	^result.! !
!TransferNet methodsFor: 'report' stamp: 'camila 10/25/2023 21:08:07' prior: 50678172 overrides: 50677536!
buildResult
	account startFunctionalityResult: self.
	^result.! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:08:12'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:08:12'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:08:12'!
FAILURE!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:08:14'!
FAILURE!
!Withdraw methodsFor: 'report' stamp: 'camila 10/25/2023 21:09:01' prior: 50678324!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForWithdraw: self. ! !

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:09:03'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:09:07'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:07'!
FAILURE!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:09:07'!
FAILURE!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:12'!
FAILURE!
!OriginTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:09:49' prior: 50678312!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForOriginTransfer: self. ! !

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:09:51'!
FAILURE!
!ReceiverTransfer methodsFor: 'report' stamp: 'camila 10/25/2023 21:10:18' prior: 50678318!
executeFunctionality: anAccountFuncionality 
	anAccountFuncionality executeForReceiverTransfer: self. ! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:10:40'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:10:42'!
PASSED!

!methodRemoval: Deposit #addToTransferNetWith: stamp: 'camila 10/25/2023 21:10:47'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForDeposit: self. !

!methodRemoval: Deposit #fillReportWith: stamp: 'camila 10/25/2023 21:10:50'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForDeposit: self.!

!methodRemoval: OriginTransfer #addToTransferNetWith: stamp: 'camila 10/25/2023 21:10:54'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForOriginTransfer: self.!

!methodRemoval: OriginTransfer #fillReportWith: stamp: 'camila 10/25/2023 21:10:56'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForOriginTransfer: self !

!methodRemoval: ReceiverTransfer #addToTransferNetWith: stamp: 'camila 10/25/2023 21:11:02'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForReceiverTransfer: self.!

!methodRemoval: ReceiverTransfer #fillReportWith: stamp: 'camila 10/25/2023 21:11:05'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForReceiverTransfer: self.!

!methodRemoval: Withdraw #addToTransferNetWith: stamp: 'camila 10/25/2023 21:11:10'!
addToTransferNetWith: aTransferNet 
	aTransferNet executeForWithdraw: self !

!methodRemoval: Withdraw #fillReportWith: stamp: 'camila 10/25/2023 21:11:12'!
fillReportWith: anAccountSummary 
	anAccountSummary executeForWithdraw: self. !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:11:17'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:11:18'!
PASSED!

!methodRemoval: AccountTransaction #addToTransferNetWith: stamp: 'camila 10/25/2023 21:12:16'!
addToTransferNetWith: aTransferNet

	self subclassResponsibility!

!methodRemoval: AccountTransaction #fillReportWith: stamp: 'camila 10/25/2023 21:12:19'!
fillReportWith: anAccountSummary

	self subclassResponsibility!
!AccountTransaction methodsFor: 'report' stamp: 'camila 10/25/2023 21:12:27'!
executeFunctionality: anAccountFuncionality

	self subclassResponsibility! !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:12:47'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:12:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'camila 10/25/2023 21:12:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'camila 10/25/2023 21:12:51'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:12:52'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:12:52'!
PASSED!
!ReceptiveAccount methodsFor: 'functionality' stamp: 'camila 10/25/2023 21:15:10'!
buildFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:15:10' prior: 50678405 overrides: 50677536!
buildResult
	result addLast: 'Balance = ' , (account balance asString ). 
	account buildFunctionalityResult: self.
	^result.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:15:10' prior: 50678413 overrides: 50677536!
buildResult
	account buildFunctionalityResult: self.
	^result.! !

!methodRemoval: ReceptiveAccount #startFunctionalityResult: stamp: 'camila 10/25/2023 21:15:10'!
startFunctionalityResult: anAccountFunctionality 
	transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality].
!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:15:17'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:15:18'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:15:18'!
PASSED!
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:16:26'!
isReceiverLeg: anAccount 
	^receiverTransfer = anAccount ! !

!methodRemoval: Transfer #isPataDestino: stamp: 'camila 10/25/2023 21:16:26'!
isPataDestino: anAccount 
	^receiverTransfer = anAccount !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:16:34'!
isOriginLeg: anAccount 
	^originTransfer = anAccount ! !

!methodRemoval: Transfer #isPataOrigen: stamp: 'camila 10/25/2023 21:16:34'!
isPataOrigen: anAccount 
	^originTransfer = anAccount !

!methodRemoval: Transfer #pataOrigen stamp: 'camila 10/25/2023 21:16:47'!
pataOrigen
	self shouldBeImplemented.!

!methodRemoval: Transfer #isReceiverLeg: stamp: 'camila 10/25/2023 21:16:50'!
isReceiverLeg: anAccount 
	^receiverTransfer = anAccount !

!methodRemoval: Transfer #isOriginLeg: stamp: 'camila 10/25/2023 21:16:51'!
isOriginLeg: anAccount 
	^originTransfer = anAccount !

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 21:16:58'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:16:59'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:16:59'!
PASSED!
!Transfer methodsFor: 'category-name' stamp: 'camila 10/25/2023 21:17:16'!
isOriginLeg: originAccount 
	^originAccount hasRegistered: originTransfer.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:16' prior: 50671767!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiver: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!methodRemoval: Transfer #isOrigin: stamp: 'camila 10/25/2023 21:17:16'!
isOrigin: originAccount 
	^originAccount hasRegistered: originTransfer.!
!Transfer methodsFor: 'category-name' stamp: 'camila 10/25/2023 21:17:26'!
isReceiverLeg: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .! !

!methodRemoval: Transfer #isReceiver: stamp: 'camila 10/25/2023 21:17:26'!
isReceiver: receiverAccount 
	^receiverAccount hasRegistered: receiverTransfer .!
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:17:52'!
receiverTransfer
	^receiverTransfer ! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:52' prior: 50672043!
isContraryTransfer: pata 
	^transfer receiverTransfer = pata.! !
!TransfersTests methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:17:52' prior: 50672078!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransfer.
	receiver := transfer receiverTransfer. 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!methodRemoval: Transfer #receiverTrasnfer stamp: 'camila 10/25/2023 21:17:52'!
receiverTrasnfer
	^receiverTransfer !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:18:05'!
receiverTransferLeg
	^receiverTransfer ! !
!OriginTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:18:05' prior: 50679004!
isContraryTransfer: pata 
	^transfer receiverTransferLeg = pata.! !

!methodRemoval: Transfer #receiverTransfer stamp: 'camila 10/25/2023 21:18:05'!
receiverTransfer
	^receiverTransfer !
!Transfer methodsFor: 'legs' stamp: 'camila 10/25/2023 21:18:15'!
originTransferLeg
	^originTransfer! !
!ReceiverTransfer methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:18:15' prior: 50672055!
isContraryTransfer: pata 
	^transfer originTransferLeg = pata.! !

!methodRemoval: Transfer #originTransfer stamp: 'camila 10/25/2023 21:18:15'!
originTransfer
	^originTransfer!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:18:25'!
ERROR!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:18:25'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:18:25'!
ERROR!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:18:49' prior: 50679010!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver|
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	
	origin := transfer originTransferLeg .
	receiver := transfer receiverTransferLeg . 
	
	self assert: (origin isContraryTransfer: receiver).
	self assert: (receiver isContraryTransfer: origin). ! !

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:18:50'!
PASSED!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:18:56' prior: 50678967!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiverLeg: receiverAccount ).
	"self assert: (originAccount hasRegistered: transfer).
	self assert: (receiverAccount hasRegistered: transfer)."! !

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:18:57'!
PASSED!

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:19:02'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:19:02'!
PASSED!
!ReceiverTransfer methodsFor: 'transferVerification' stamp: 'camila 10/25/2023 21:19:30' prior: 50679048!
isContraryTransfer: aTransferLeg 
	^transfer originTransferLeg = aTransferLeg.! !
!OriginTransfer methodsFor: 'transferVerification' stamp: 'camila 10/25/2023 21:19:38' prior: 50679035!
isContraryTransfer: aTransferLeg 
	^transfer receiverTransferLeg = aTransferLeg.! !

!testRun: #TransfersTests #test01TransferBetweenAccountsAffectBalances stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test02AccountsRegisterTransfer stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test03TransferMustNotBeNegative stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test04TransferBetweenDifferentAccount stamp: 'camila 10/25/2023 21:19:42'!
PASSED!

!testRun: #TransfersTests #test05NavigationBetweenTransferLegs stamp: 'camila 10/25/2023 21:19:42'!
PASSED!
!TransfersTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:19:51' prior: 50679095!
test02AccountsRegisterTransfer
	| originAccount receiverAccount  transfer |
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	self assert: ( transfer isOriginLeg: originAccount ).
	self assert: ( transfer isReceiverLeg: receiverAccount ).! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:08' prior: 50677680!
test01ReportForNewReceptiveAccountPrintBalanceZero

	| anAccount summaryReport|
	
	anAccount := ReceptiveAccount new. 
	summaryReport  := AccountSummary for: anAccount.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:24' prior: 50677640!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:33' prior: 50677578!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:38' prior: 50679188!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:50' prior: 50677692!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance

	| anAccount reportPrinted summaryReport|
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 50' with: 'Depósito por 100.' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:54' prior: 50679203!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount.
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:20:58' prior: 50679218!
test02ReportForReceptiveAccountWithDepositPrintDespositValue

	| anAccount reportPrinted summaryReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	
	summaryReport := AccountSummary for: anAccount .
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:21:15' prior: 50677710!
test05ReportPrintTransferOutput

	| originAccount originReport  receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	summaryOriginReport := AccountSummary for: originAccount .
	summaryReceiverReport := AccountSummary for: receiverAccount .
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryOriginReport buildResult ) equals: originReport.
	self assert: (summaryReceiverReport buildResult ) equals: receiverReport.! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 21:21:43' prior: 50677737!
test06ReportPrintAllTransactions

	| anAccount originReport  summaryReport|
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	summaryReport := AccountSummary for: anAccount .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
								
	self assert: (summaryReport buildResult) equals: originReport.
	! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:21:53' prior: 50677555!
test01TransferNetReportForNewAccountReturnZero

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:05' prior: 50677656!
test02TransferNetReportForAccountWithReceiverTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:08' prior: 50679343!
test02TransferNetReportForAccountWithReceiverTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: ReceptiveAccount new to: anAccount  withValue: 20.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:16' prior: 50677594!
test03TransferNetReportForAccountWithOriginTransfer
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: -20.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:27' prior: 50677622!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	Deposit register: 10 on: anAccount .
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 10.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:35' prior: 50677607!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	
	|anAccount transferReport|
	
	anAccount := ReceptiveAccount new. 
	Transfer from: anAccount to: ReceptiveAccount new  withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	transferReport := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult) equals: 10.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:41' prior: 50677669!
test06TransferNetReportWithDeposit
	
	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 10 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:49' prior: 50677566!
test07TransferNetReportWithWithdraw

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:22:59' prior: 50679426!
test07TransferNetReportWithWithdraw

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !

----SNAPSHOT----(25 October 2023 21:23:46) CuisUniversity-5981.image priorSource: 11088562!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:54:06'!
test08TransferNetReportForNewPortfolioReturnsZero

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:55:11' prior: 50679451!
test08TransferNetReportForNewPortfolioReturnsZero

	|aPortfolio transferReport |
	
	aPortfolio := Portfolio new.
	
	transferReport  := TransferNet for: aPortfolio .
	
	self assert: (transferReport buildResult )equals: 0.! !

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 21:55:44'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:56:32'!
buildFunctionalityResult: aTransferNet 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:56:53' prior: 50679477!
buildFunctionalityResult: aTransferNet 
	! !

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 21:56:55'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 21:56:55'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:59:14'!
test09TransferNetReportForPortfolioWithAccount

	|aPortfolio transferReport anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
		
	
	
	transferReport  := TransferNet for: aPortfolio .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:02:44' prior: 50679523!
test09TransferNetReportForPortfolioWithAccount

	| account portfolio deposit transferReport |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.! !

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:02:47'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:02:47'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:04:34' prior: 50679535!
test09TransferNetReportForPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:05:24'!
test09TransferNetReportForPortfolioWithOriginAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: -50.! !

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:05:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:06:41' prior: 50679483!
buildFunctionalityResult: aTransferNet 

	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:06:50' prior: 50679625!
buildFunctionalityResult: aFunctionality 

	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:07:35' prior: 50679633!
buildFunctionalityResult: aFunctionality 
	accounts do: [:anAccount | anAccount buildFunctionalityResult: aFunctionality ].
	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:07:43'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:08:05'!
test10TransferNetReportForPortfolioWithReceiverAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: receiverAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 50.! !

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:08:08'!
FAILURE!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:08:08'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:08:08'!
FAILURE!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:08:20'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:08:26'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:08:29'!
FAILURE!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:08:29'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:08:29'!
FAILURE!

!methodRemoval: TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 22:08:42'!
test09TransferNetReportForPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:09:38'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:09:38'!
PASSED!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:09:58'!
test11TransferNetReportForPortfolioWithPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: receiverAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 50.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:11:00' prior: 50679839!
test11TransferNetReportForPortfolioWithPortfolioWithAccount

	| originAccount receiverAccount portfolioToTest extraPortfolio transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	Transfer from: originAccount to: receiverAccount withValue: 50.
	extraPortfolio := Portfolio with: receiverAccount.
	portfolioToTest := Portfolio with: extraPortfolio .
	
	transferReport  := TransferNet for: portfolioToTest .
	
	self assert: (transferReport buildResult ) equals: 50.! !

!testRun: #TransferNetTests #test11TransferNetReportForPortfolioWithPortfolioWithAccount stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test11TransferNetReportForPortfolioWithPortfolioWithAccount stamp: 'camila 10/25/2023 22:11:01'!
PASSED!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:11:06'!
PASSED!

!testRun: #TransferNetTests #test11TransferNetReportForPortfolioWithPortfolioWithAccount stamp: 'camila 10/25/2023 22:11:06'!
PASSED!
!Portfolio methodsFor: 'functionality' stamp: 'camila 10/25/2023 22:11:39' prior: 50679641!
buildFunctionalityResult: aFunctionality 
	accounts do: [:anAccount | anAccount buildFunctionalityResult: aFunctionality ].! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:13:03'!
test07ReportForNewPortfolio

	| aPortfolio summaryReport|
	 
	aPortfolio := Portfolio new.
	summaryReport  := AccountSummary for: aPortfolio.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:13:04'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:13:12'!
PASSED!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:13:40'!
test08ReportForPortfolioWithAccountWithDeposit

	| aPortfolio summaryReport|
	 
	aPortfolio := Portfolio new.
	summaryReport  := AccountSummary for: aPortfolio.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:14:38' prior: 50680016!
test08ReportForPortfolioWithAccountWithDeposit

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:14:46'!
PASSED!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:03'!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:41' prior: 50680047!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:15:42'!
FAILURE!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:54' prior: 50680064!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:15:54'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:15:57'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:16:01'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:16:01'!
PASSED!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:16'!
test09ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:21'!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !

!methodRemoval: ReportTests #test09ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 22:16:24'!
test09ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:41' prior: 50680224!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted originReport receiverReport |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:12' prior: 50680258!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:48' prior: 50680279!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport reportPrinted originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:55' prior: 50680303!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:18:13'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:18:51' prior: 50680328!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:18:55'!
ERROR!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 22:18:55'!
PASSED!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:18:55'!
ERROR!

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:19:17'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:23'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 22:19:25'!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:19:27'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:19:30'!
PASSED!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:19:30'!
PASSED!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:44'!
test10ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:50'!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:19:52'!
test10ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:20:17' prior: 50680573!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = 20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!testRun: #ReportTests #test11ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:20:18'!
FAILURE!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:20:59' prior: 50680616!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithReceiver summaryReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithReceiver := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithReceiver.
	
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !

!testRun: #ReportTests #test11ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:21:00'!
PASSED!

!testRun: #ReportTests #test11ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:21:00'!
PASSED!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:03'!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport receiverReport summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	summaryReport := AccountSummary for: anAccount .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:33' prior: 50680707!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport receiverReport summaryReport portfolio |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	portfolio := Portfolio with: anAccount .
	
	summaryReport := AccountSummary for: portfolio .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:43' prior: 50680732!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport summaryReport portfolio |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	portfolio := Portfolio with: anAccount .
	
	summaryReport := AccountSummary for: portfolio .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!testRun: #ReportTests #test12ReportForPortfolioWithPortfolio stamp: 'camila 10/25/2023 22:24:51'!
PASSED!

!testRun: #ReportTests #test01ReportForNewReceptiveAccountPrintBalanceZero stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test02ReportForReceptiveAccountWithDepositPrintDespositValue stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test05ReportPrintTransferOutput stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test06ReportPrintAllTransactions stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test07ReportForNewPortfolio stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test08ReportForPortfolioWithAccountWithDeposit stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test09ReportForPortfolioWithAccountWithWithdraw stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test11ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!testRun: #ReportTests #test12ReportForPortfolioWithPortfolio stamp: 'camila 10/25/2023 22:24:54'!
PASSED!

!classRenamed: #Reports as: #ReportsTest stamp: 'camila 10/25/2023 22:33:07'!
Smalltalk renameClassNamed: #Reports as: #ReportsTest!

!classRenamed: #ReportTests as: #AccountSummaryTest stamp: 'camila 10/25/2023 22:33:20'!
Smalltalk renameClassNamed: #ReportTests as: #AccountSummaryTest!

!classRenamed: #AccountFunctionality as: #Reports stamp: 'camila 10/25/2023 22:33:33'!
Smalltalk renameClassNamed: #AccountFunctionality as: #Reports!

!classRenamed: #Reports as: #Report stamp: 'camila 10/25/2023 22:33:40'!
Smalltalk renameClassNamed: #Reports as: #Report!

ReportsTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:35:10'!
ReportsTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioReportTest as: #PortfolioTreeReportTest stamp: 'camila 10/25/2023 22:35:24'!
Smalltalk renameClassNamed: #PortfolioReportTest as: #PortfolioTreeReportTest!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucio' stamp: 'camila 10/25/2023 22:39:24'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucio'!
!PortfolioTreeReportTest methodsFor: 'no messages' stamp: 'camila 10/25/2023 22:38:51'!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !

!classRemoval: #PortfolioTreeReport stamp: 'camila 10/25/2023 22:39:31'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucio'!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:39:40'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:39:47'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:39:59'!
named: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:40:07' prior: 50680902!
named: aRenameMe1 
	^self new initializeNamed: aRenameMe1 ! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:40:11'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:40:41' prior: 50680911!
named: aName 
	^self new initializeNamed: aName ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:41:15'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents portfolioName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:41:14'!
initializeNamed: name

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	portfolioName := name.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:44:19'!
ERROR!

Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:44:59'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:45:33'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:45:48'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:46:43' overrides: 50677536!
buildResult

	self subclassResponsibility! !
!Report methodsFor: 'result' stamp: 'camila 10/25/2023 22:46:43' prior: 50677536!
buildResult

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:46:51' overrides: 50676433!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:46:51' prior: 50676433!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:00' overrides: 50676438!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:00' prior: 50676438!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:06' overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:06' prior: 50676443!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:12' overrides: 50676448!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:12' prior: 50676448!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:47:18' overrides: 50677962!
initializeFor: anAccount

	self subclassResponsibility! !
!Report methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:47:18' prior: 50677962!
initializeFor: anAccount

	self subclassResponsibility! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:47:33'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:47:42'!
ERROR!
!PortfolioTreeReport methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:48:45' prior: 50681039 overrides: 50681044!
initializeFor: anAccount

	account := anAccount .
	result := OrderedCollection new.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:49:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:49:00'!
ERROR!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:49:20' prior: 50680877!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:49:21'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:49:27'!
ERROR!
!PortfolioTreeReport class methodsFor: 'no messages' stamp: 'camila 10/25/2023 22:50:16'!
for: anAccount 
	^self new initializeFor: anAccount ! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:50:23'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:50:23'!
ERROR!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:51:11' prior: 50680985 overrides: 50680989!
buildResult

	^ result.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:51:16'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:51:16'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:51:43' prior: 50681097 overrides: 50680989!
buildResult

	^ account name.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:51:52'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:51:52'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:52:16' prior: 50681108 overrides: 50680989!
buildResult
	result addLast: account name.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:52:18'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:52:18'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'camila 10/25/2023 22:53:17' overrides: 16903442!
name
	^portfolioName .! !
!Portfolio methodsFor: 'accounts management' stamp: 'camila 10/25/2023 22:53:20' prior: 50681130 overrides: 16903442!
name
	^portfolioName copy.! !

!testRun: #PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:53:26'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:53:39'!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !

!methodRemoval: PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 22:53:43'!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/25/2023 22:53:45'!
PASSED!

Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 22:54:29'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/25/2023 22:54:34'!
PASSED!

!methodRemoval: PortfolioTreeReport #executeForDeposit: stamp: 'camila 10/25/2023 22:54:46'!
executeForDeposit: aDeposit

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForOriginTransfer: stamp: 'camila 10/25/2023 22:54:48'!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForReceiverTransfer: stamp: 'camila 10/25/2023 22:54:50'!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForWithdraw: stamp: 'camila 10/25/2023 22:54:51'!
executeForWithdraw: aWithdraw

	self subclassResponsibility!

!testRun: #TransferNetTests #test01TransferNetReportForNewAccountReturnZero stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test02TransferNetReportForAccountWithReceiverTransfer stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test03TransferNetReportForAccountWithOriginTransfer stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test05TransferNetReportWithMultipleTransferReturnSumOfThem stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test06TransferNetReportWithDeposit stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test07TransferNetReportWithWithdraw stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test08TransferNetReportForNewPortfolioReturnsZero stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test09TransferNetReportForPortfolioWithOriginAccount stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test10TransferNetReportForPortfolioWithReceiverAccount stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #TransferNetTests #test11TransferNetReportForPortfolioWithPortfolioWithAccount stamp: 'camila 10/25/2023 22:55:00'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/25/2023 22:55:03'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 23:01:46' prior: 50681142!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

----STARTUP---- (25 October 2023 23:49:54) as /home/camila/Desktop/CUIS PORTFOLIO 2/CuisUniversity-5981.image!

!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:54:06'!
test08TransferNetReportForNewPortfolioReturnsZero

	|anAccount transferReport |
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 20 on: anAccount .
	
	transferReport  := TransferNet for: anAccount .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:55:11' prior: 50681273!
test08TransferNetReportForNewPortfolioReturnsZero

	|aPortfolio transferReport |
	
	aPortfolio := Portfolio new.
	
	transferReport  := TransferNet for: aPortfolio .
	
	self assert: (transferReport buildResult )equals: 0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:56:32'!
buildFunctionalityResult: aTransferNet 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 21:56:53' prior: 50681295!
buildFunctionalityResult: aTransferNet 
	! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 21:59:14'!
test09TransferNetReportForPortfolioWithAccount

	|aPortfolio transferReport anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
		
	
	
	transferReport  := TransferNet for: aPortfolio .
	
	self assert: (transferReport buildResult )equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:02:44' prior: 50681305!
test09TransferNetReportForPortfolioWithAccount

	| account portfolio deposit transferReport |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:04:34' prior: 50681317!
test09TransferNetReportForPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:05:24'!
test09TransferNetReportForPortfolioWithOriginAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: -50.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:06:41' prior: 50681301!
buildFunctionalityResult: aTransferNet 

	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:06:50' prior: 50681364!
buildFunctionalityResult: aFunctionality 

	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:07:35' prior: 50681372!
buildFunctionalityResult: aFunctionality 
	accounts do: [:anAccount | anAccount buildFunctionalityResult: aFunctionality ].
	"transactions do: [ :aTransaction | aTransaction executeFunctionality: anAccountFunctionality]."! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:08:05'!
test10TransferNetReportForPortfolioWithReceiverAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: receiverAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 50.! !

!methodRemoval: TransferNetTests #test09TransferNetReportForPortfolioWithAccount stamp: 'camila 10/25/2023 23:49:56'!
test09TransferNetReportForPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: originAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 0.!
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:09:58'!
test11TransferNetReportForPortfolioWithPortfolioWithAccount

	| originAccount receiverAccount portfolio transfer transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	transfer := Transfer from: originAccount to: receiverAccount withValue: 50.
	portfolio := Portfolio with: receiverAccount.
	
	transferReport  := TransferNet for: portfolio .
	
	self assert: (transferReport buildResult ) equals: 50.! !
!TransferNetTests methodsFor: 'test' stamp: 'camila 10/25/2023 22:11:00' prior: 50681424!
test11TransferNetReportForPortfolioWithPortfolioWithAccount

	| originAccount receiverAccount portfolioToTest extraPortfolio transferReport |
	
	originAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new. 
	
	Transfer from: originAccount to: receiverAccount withValue: 50.
	extraPortfolio := Portfolio with: receiverAccount.
	portfolioToTest := Portfolio with: extraPortfolio .
	
	transferReport  := TransferNet for: portfolioToTest .
	
	self assert: (transferReport buildResult ) equals: 50.! !
!Portfolio methodsFor: 'functionality' stamp: 'camila 10/25/2023 22:11:39' prior: 50681380!
buildFunctionalityResult: aFunctionality 
	accounts do: [:anAccount | anAccount buildFunctionalityResult: aFunctionality ].! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:13:03'!
test07ReportForNewPortfolio

	| aPortfolio summaryReport|
	 
	aPortfolio := Portfolio new.
	summaryReport  := AccountSummary for: aPortfolio.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:13:40'!
test08ReportForPortfolioWithAccountWithDeposit

	| aPortfolio summaryReport|
	 
	aPortfolio := Portfolio new.
	summaryReport  := AccountSummary for: aPortfolio.
	
	self assert: (summaryReport buildResult) equals: (OrderedCollection with: 'Balance = 0').! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:14:38' prior: 50681478!
test08ReportForPortfolioWithAccountWithDeposit

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:03'!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = 100' with: 'Depósito por 100.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:41' prior: 50681505!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 100 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:15:54' prior: 50681522!
test09ReportForPortfolioWithAccountWithWithdraw

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:16'!
test09ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:21'!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !

!methodRemoval: ReportTests #test09ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 23:49:56'!
test09ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	reportPrinted := OrderedCollection with:'Balance = -50' with: 'Extracción por 50.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:16:41' prior: 50681571!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted originReport receiverReport |
	
	
	anAccount := ReceptiveAccount new. 
	Withdraw register: 50 on: anAccount.
	 
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:12' prior: 50681605!
test10ReportForPortfolioWithAccountWithTransfer

	| aPortfolio summaryReport anAccount reportPrinted originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	aPortfolio := Portfolio with: anAccount.
	summaryReport  := AccountSummary for: aPortfolio.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:48' prior: 50681626!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport reportPrinted originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: reportPrinted.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:17:55' prior: 50681650!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:18:13'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:18:51' prior: 50681675!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithOriginTransfer stamp: 'camila 10/25/2023 23:49:56'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:23'!
test10ReportForPortfolioWithAccountWithOriginTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithTransfer stamp: 'camila 10/25/2023 23:49:56'!
test10ReportForPortfolioWithAccountWithTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: originAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:44'!
test10ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:19:50'!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!methodRemoval: ReportTests #test10ReportForPortfolioWithAccountWithReceiverTransfer stamp: 'camila 10/25/2023 23:49:56'!
test10ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = -20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	!
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:20:17' prior: 50681831!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithOrigin := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithOrigin.
	
	originReport := OrderedCollection with:'Balance = 20' with: 'Salida por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:20:59' prior: 50681874!
test11ReportForPortfolioWithAccountWithReceiverTransfer

	| portfolioWithReceiver summaryReport receiverReport originAccount receiverAccount |
	
	
	originAccount := ReceptiveAccount new. 
	receiverAccount := ReceptiveAccount new.
	Transfer from: originAccount to: receiverAccount withValue: 20.
	
	portfolioWithReceiver := Portfolio with: receiverAccount.
	summaryReport  := AccountSummary for: portfolioWithReceiver.
	
	receiverReport := OrderedCollection with: 'Balance = 20' with: 'Entrada por transferencia de 20.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:03'!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport receiverReport summaryReport |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	summaryReport := AccountSummary for: anAccount .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:33' prior: 50681916!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport receiverReport summaryReport portfolio |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	portfolio := Portfolio with: anAccount .
	
	summaryReport := AccountSummary for: portfolio .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: receiverReport.
	
	
	! !
!ReportTests methodsFor: 'tests' stamp: 'camila 10/25/2023 22:24:43' prior: 50681941!
test12ReportForPortfolioWithPortfolio

		
	| anAccount originReport summaryReport portfolio |
	anAccount := ReceptiveAccount new. 
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer from: anAccount to: ReceptiveAccount new withValue: 20.
	Transfer from: ReceptiveAccount new to: anAccount withValue: 30.
	
	portfolio := Portfolio with: anAccount .
	
	summaryReport := AccountSummary for: portfolio .
	originReport := OrderedCollection with:'Balance = 60' 
								with: 'Depósito por 100.' 
								with:'Extracción por 50.' 
								with: 'Salida por transferencia de 20.' 
								with: 'Entrada por transferencia de 30.'.
	
	self assert: (summaryReport buildResult) equals: originReport.
	
	
	! !

!classRenamed: #Reports as: #ReportsTest stamp: 'camila 10/25/2023 23:49:56'!
Smalltalk renameClassNamed: #Reports as: #ReportsTest!

!classRenamed: #ReportTests as: #AccountSummaryTest stamp: 'camila 10/25/2023 23:49:56'!
Smalltalk renameClassNamed: #ReportTests as: #AccountSummaryTest!

!classRenamed: #AccountFunctionality as: #Reports stamp: 'camila 10/25/2023 23:49:56'!
Smalltalk renameClassNamed: #AccountFunctionality as: #Reports!

!classRenamed: #Reports as: #Report stamp: 'camila 10/25/2023 23:49:56'!
Smalltalk renameClassNamed: #Reports as: #Report!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:56'!
ReportsTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:56'!
ReportsTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioReportTest as: #PortfolioTreeReportTest stamp: 'camila 10/25/2023 23:49:56'!
Smalltalk renameClassNamed: #PortfolioReportTest as: #PortfolioTreeReportTest!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucio' stamp: 'camila 10/25/2023 23:49:56'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucio'!
!PortfolioTreeReportTest methodsFor: 'no messages' stamp: 'camila 10/25/2023 22:38:51'!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !

!classRemoval: #PortfolioTreeReport stamp: 'camila 10/25/2023 23:49:57'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucio'!
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:39:59'!
named: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:40:07' prior: 50682061!
named: aRenameMe1 
	^self new initializeNamed: aRenameMe1 ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'camila 10/25/2023 22:40:41' prior: 50682070!
named: aName 
	^self new initializeNamed: aName ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents portfolioName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:41:14'!
initializeNamed: name

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	portfolioName := name.! !

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:46:43' overrides: 50677536!
buildResult

	self subclassResponsibility! !
!Report methodsFor: 'result' stamp: 'camila 10/25/2023 22:46:43' prior: 50677536!
buildResult

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:46:51' overrides: 50676433!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:46:51' prior: 50676433!
executeForDeposit: aDeposit

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:00' overrides: 50676438!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:00' prior: 50676438!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:06' overrides: 50676443!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:06' prior: 50676443!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:12' overrides: 50676448!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!Report methodsFor: 'execute' stamp: 'camila 10/25/2023 22:47:12' prior: 50676448!
executeForWithdraw: aWithdraw

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:47:18' overrides: 50677962!
initializeFor: anAccount

	self subclassResponsibility! !
!Report methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:47:18' prior: 50677962!
initializeFor: anAccount

	self subclassResponsibility! !
!PortfolioTreeReport methodsFor: 'initialization' stamp: 'camila 10/25/2023 22:48:45' prior: 50682198 overrides: 50682203!
initializeFor: anAccount

	account := anAccount .
	result := OrderedCollection new.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:49:20' prior: 50682042!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReport class methodsFor: 'no messages' stamp: 'camila 10/25/2023 22:50:16'!
for: anAccount 
	^self new initializeFor: anAccount ! !
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:51:11' prior: 50682144 overrides: 50682148!
buildResult

	^ result.! !
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:51:43' prior: 50682234 overrides: 50682148!
buildResult

	^ account name.! !
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/25/2023 22:52:16' prior: 50682239 overrides: 50682148!
buildResult
	result addLast: account name.
	^ result.! !
!Portfolio methodsFor: 'accounts management' stamp: 'camila 10/25/2023 22:53:17' overrides: 16903442!
name
	^portfolioName .! !
!Portfolio methodsFor: 'accounts management' stamp: 'camila 10/25/2023 22:53:20' prior: 50682249 overrides: 16903442!
name
	^portfolioName copy.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 22:53:39'!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.! !

!methodRemoval: PortfolioTreeReportTest #test01 stamp: 'camila 10/25/2023 23:49:57'!
test01
	
	| finalReport portfolio treeReport |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	self assert: (treeReport buildResult) equals: finalReport.!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/25/2023 23:49:57'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: PortfolioTreeReport #executeForDeposit: stamp: 'camila 10/25/2023 23:49:57'!
executeForDeposit: aDeposit

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForOriginTransfer: stamp: 'camila 10/25/2023 23:49:57'!
executeForOriginTransfer: anOriginTransfer

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForReceiverTransfer: stamp: 'camila 10/25/2023 23:49:57'!
executeForReceiverTransfer: aReceiverTransfer

	self subclassResponsibility!

!methodRemoval: PortfolioTreeReport #executeForWithdraw: stamp: 'camila 10/25/2023 23:49:57'!
executeForWithdraw: aWithdraw

	self subclassResponsibility!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/25/2023 23:01:46' prior: 50682258!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

----SNAPSHOT----(25 October 2023 23:54:37) CuisUniversity-5981.image priorSource: 11129501!

----STARTUP---- (26 October 2023 13:45:49) as /home/camila/Desktop/CUIS PORTFOLIO 2/CuisUniversity-5981.image!

!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:48:43'!
test01PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceiverTransfer named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:49:10'!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceiverTransfer named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!methodRemoval: PortfolioTreeReportTest #test01PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:49:15'!
test01PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceiverTransfer named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:49:45' prior: 50682357!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceiverTransfer named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:49:46'!
ERROR!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:50:08' prior: 50682389!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:50:10'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'camila 10/26/2023 13:50:22'!
named: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'camila 10/26/2023 13:50:35' prior: 50682432!
named: aName 
	^self new initializeNamed: aName ! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:50:36'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'camila 10/26/2023 13:50:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'camila 10/26/2023 13:50:48'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'camila 10/26/2023 13:50:51' prior: 50682458!
initializeNamed: aName 
	name := aName.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'camila 10/26/2023 13:50:52'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:50:57'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 13:52:56' prior: 50682244!
buildResult
	account buildNames: self.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:53:27'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:53:34'!
buildNames: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:54:24' prior: 50682509!
buildNames: aPortfolioTreeReport 
	accounts do: [:anAccount | anAccount addNameTo: aPortfolioTreeReport ].! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:54:27'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:54:37'!
addNameTo: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:54:51' prior: 50682526!
addNameTo: aPortfolioTreeReport 
	aPortfolioTreeReport addToResult: name.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:54:54'!
ERROR!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:55:00'!
addToResult: aName 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:55:07' prior: 50682542!
addToResult: aName 
	result addLast: aName .! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:55:09'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:55:13'!
PASSED!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 13:55:56' prior: 50682500!
buildResult
	result addLast: account name.
	account buildNames: self.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 13:56:01'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:57:16'!
test02PortfolioWithPortfolioReturnsBothNames
	
	| finalReport treeReport portfolioChildren portfolioParent |
	
	portfolioChildren := Portfolio named: 'Portfolio de los hijos'.
	portfolioParent := Portfolio named: 'Portfolio de la familia'.
	portfolioParent add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioParent. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:57:25'!
test03PortfolioWithPortfolioReturnsBothNames
	
	| finalReport treeReport portfolioChildren portfolioParent |
	
	portfolioChildren := Portfolio named: 'Portfolio de los hijos'.
	portfolioParent := Portfolio named: 'Portfolio de la familia'.
	portfolioParent add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioParent. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test03PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 13:57:25'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:57:53'!
addNameTo: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:58:34' prior: 50682611!
addNameTo: aPortfolioTreeReport 
	aPortfolioTreeReport addPortfolioToResult: self.! !

!testRun: #PortfolioTreeReportTest #test03PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 13:58:37'!
ERROR!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 13:58:43'!
addPortfolioToResult: aPortfolio 
	self shouldBeImplemented.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:17:13' prior: 50682321!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport :=  'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:17:14'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:17:33' prior: 50682560!
buildResult
	result := account name.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:17:35'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:17:35'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:17:35'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 14:17:35'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test03PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 14:17:35'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:17:41'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:18:39' prior: 50682411!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:18:44'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:20:03' prior: 50682650!
buildResult
	result := account name.
	account buildFunctionalityResult: self.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:20:04'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:23:44' prior: 50682700!
buildResult
	result := account name.
	account buildNameReport: self.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:23:50'!
ERROR!
!Account methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:23:56'!
buildNameReport: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!Account methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:24:18' prior: 50682719!
buildNameReport: aPortfolioTreeReport 
	aPortfolioTreeReport buildNameReportForPortfolio: self.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:24:20'!
ERROR!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:24:28'!
buildNameReportForPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:24:47' prior: 50682735!
buildNameReportForPortfolio: aPortfolio 
	! !

!methodRemoval: PortfolioTreeReportTest #test02PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 14:25:05'!
test02PortfolioWithPortfolioReturnsBothNames
	
	| finalReport treeReport portfolioChildren portfolioParent |
	
	portfolioChildren := Portfolio named: 'Portfolio de los hijos'.
	portfolioParent := Portfolio named: 'Portfolio de la familia'.
	portfolioParent add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioParent. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.!

!methodRemoval: PortfolioTreeReportTest #test03PortfolioWithPortfolioReturnsBothNames stamp: 'camila 10/26/2023 14:25:06'!
test03PortfolioWithPortfolioReturnsBothNames
	
	| finalReport treeReport portfolioChildren portfolioParent |
	
	portfolioChildren := Portfolio named: 'Portfolio de los hijos'.
	portfolioParent := Portfolio named: 'Portfolio de la familia'.
	portfolioParent add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioParent. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:31:55' prior: 50682679!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	finalReport := finalReport, String tab, 'test'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:32:21' prior: 50682785!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	finalReport := finalReport, String newLineString , String tab, 'test'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:33:28' prior: 50682805!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	finalReport := finalReport, String newLineString , String tab, 'test'.
	finalReport := String newLineString, String tab, 'otro portfolio'
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:34:11' prior: 50682825!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	finalReport := finalReport, String newLineString , String tab, 'test'.
	finalReport := finalReport, String newLineString, String tab, 'otro portfolio'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:34:49' prior: 50682847!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := 'Portfolio de la familia', String newLineString , String tab, 'Cuenta mia'.
	
	finalReport := finalReport, String newLineString , String tab, 'test'.
	finalReport := finalReport, String newLineString, String tab, String tab,  'otro portfolio'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:36:47' prior: 50682633!
test01NewPortfolioWithNameReturnsName
	
	| finalReport portfolio treeReport |
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport :=  OrderedCollection with: 'Portfolio de la familia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:36:48'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:37:04' prior: 50682710!
buildResult
	result addLast: account name.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:37:05'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:37:05'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:37:05'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:37:05'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 14:37:50'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:38:34' prior: 50682870!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: String tab, 'Cuenta mia'.
	
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:38:36'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:38:36'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:38:53' prior: 50682935!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: (String tab, 'Cuenta mia').
	
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!Behavior method!
for: anAccount
	#_coverageTracker3188296_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188296_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188296_
		coverAll:
			{24 to: 26}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188296_
		coverAll:
			{28 to: 41}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3188296_
					cover: (43 to: 51)
					declaredAt: (6 to: 14)
					by: anAccount) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated
	| account |
	#_coverageTracker3188302_ markAsExecuted.
	#_coverageTracker3188302_
		cover: (70 to: 76)
		declaredAt: (57 to: 63)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188302_
				coverAll:
					{81 to: 96}
				by: ReceptiveAccount.
			#_coverageTracker3188302_
				coverAll:
					{98 to: 100}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188302_
		coverAll:
			{105 to: 108}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188302_
		coverAll:
			{110 to: 116. 120 to: 126}
		evaluating: [
			receiver3
				assert:
					(#_coverageTracker3188302_
						coverAll:
							{118 to: 118}
						byLiteralOrPseudoVariable: 0)
				equals:
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188302_
						cover: (128 to: 134)
						declaredAt: (57 to: 63)
						by: account.
					#_coverageTracker3188302_
						coverAll:
							{136 to: 142}
						evaluating: [ receiver2 balance ]
						thatSends: #balance
						to: receiver2 ] value ]
		thatSends: #assert:equals:
		to: receiver3 ] value.! !
!Behavior method!
buildResult
	#_coverageTracker3188310_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188310_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: result.
	#_coverageTracker3188310_
		coverAll:
			{21 to: 28}
		evaluating: [
			receiver2 addLast:
				[ | receiver1 |
				receiver1 _ #_coverageTracker3188310_
					cover: (30 to: 36)
					declaredAt: (30 to: 36)
					by: account.
				#_coverageTracker3188310_
					coverAll:
						{38 to: 41}
					evaluating: [ receiver1 name ]
					thatSends: #name
					to: receiver1 ] value ]
		thatSends: #addLast:
		to: receiver2 ] value.
	^ #_coverageTracker3188310_
		cover: (47 to: 52)
		declaredAt: (14 to: 19)
		by: result.! !
!Behavior method!
initializeNamed: aName
	#_coverageTracker3188315_ markAsExecuted.
	#_coverageTracker3188315_
		cover: (26 to: 29)
		declaredAt: (26 to: 29)
		by:
			(name _ #_coverageTracker3188315_
				cover: (34 to: 38)
				declaredAt: (18 to: 22)
				by: aName).! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker3188317_ markAsExecuted.
	#_coverageTracker3188317_
		cover: (25 to: 29)
		declaredAt: (25 to: 29)
		by:
			(value _ #_coverageTracker3188317_
				cover: (34 to: 39)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
sameAccountError
	#_coverageTracker3188319_ markAsExecuted.
	^ #_coverageTracker3188319_
		coverAll:
			{20 to: 69}
		byLiteralOrPseudoVariable: ' No es posible transferir entre la misma cuenta '.! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker3188321_ markAsExecuted.
	#_coverageTracker3188321_
		cover: (25 to: 29)
		declaredAt: (25 to: 29)
		by:
			(value _ #_coverageTracker3188321_
				cover: (34 to: 39)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker3188323_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188323_
		cover: (25 to: 31)
		declaredAt: (25 to: 31)
		by: parents.
	#_coverageTracker3188323_
		coverAll:
			{33 to: 36}
		evaluating: [
			receiver1 add:
				(#_coverageTracker3188323_
					cover: (38 to: 47)
					declaredAt: (10 to: 19)
					by: aPortfolio) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
named: aName
	#_coverageTracker3188327_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188327_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188327_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188327_
		coverAll:
			{26 to: 41}
		evaluating: [
			receiver2 initializeNamed:
				(#_coverageTracker3188327_
					cover: (43 to: 47)
					declaredAt: (8 to: 12)
					by: aName) ]
		thatSends: #initializeNamed:
		to: receiver2 ] value.! !
!Behavior method!
balance
	#_coverageTracker3188329_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker3188329_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: accounts.
	#_coverageTracker3188329_
		coverAll:
			{22 to: 25. 62 to: 69}
		evaluating: [
			receiver2
				sum: [ :anAccount |
					[ | receiver1 |
					receiver1 _ #_coverageTracker3188329_
						cover: (42 to: 50)
						declaredAt: (30 to: 38)
						by: anAccount.
					#_coverageTracker3188329_
						coverAll:
							{52 to: 58}
						evaluating: [ receiver1 balance ]
						thatSends: #balance
						to: receiver1 ] value ]
				ifEmpty: [
					#_coverageTracker3188329_
						coverAll:
							{73 to: 73}
						byLiteralOrPseudoVariable: 0 ]]
		thatSends: #sum:ifEmpty:
		to: receiver2 ] value.! !
!Behavior method!
test01TransferNetReportForNewAccountReturnZero
	| anAccount transferReport |
	#_coverageTracker3188333_ markAsExecuted.
	#_coverageTracker3188333_
		cover: (81 to: 89)
		declaredAt: (51 to: 59)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188333_
				coverAll:
					{94 to: 109}
				by: ReceptiveAccount.
			#_coverageTracker3188333_
				coverAll:
					{111 to: 113}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188333_
		cover: (118 to: 131)
		declaredAt: (61 to: 74)
		by:
			(transferReport _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188333_
				coverAll:
					{136 to: 146}
				by: TransferNet.
			#_coverageTracker3188333_
				coverAll:
					{148 to: 151}
				evaluating: [
					receiver2 for:
						(#_coverageTracker3188333_
							cover: (153 to: 161)
							declaredAt: (51 to: 59)
							by: anAccount) ]
				thatSends: #for:
				to: receiver2 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188333_
		coverAll:
			{168 to: 171}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188333_
		coverAll:
			{173 to: 179. 210 to: 216}
		evaluating: [
			receiver4
				assert:
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188333_
						cover: (182 to: 195)
						declaredAt: (61 to: 74)
						by: transferReport.
					#_coverageTracker3188333_
						coverAll:
							{197 to: 207}
						evaluating: [ receiver3 buildResult ]
						thatSends: #buildResult
						to: receiver3 ] value
				equals:
					(#_coverageTracker3188333_
						coverAll:
							{218 to: 218}
						byLiteralOrPseudoVariable: 0) ]
		thatSends: #assert:equals:
		to: receiver4 ] value.! !
!Behavior method!
value
	#_coverageTracker3188342_ markAsExecuted.
	^ #_coverageTracker3188342_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: value.! !
!Behavior method!
withTransfer: aTransfer
	#_coverageTracker3188344_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188344_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188344_
		coverAll:
			{33 to: 35}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188344_
		coverAll:
			{37 to: 50}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3188344_
					cover: (52 to: 60)
					declaredAt: (15 to: 23)
					by: aTransfer) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: anAccount
	#_coverageTracker3188346_ markAsExecuted.
	#_coverageTracker3188346_
		cover: (28 to: 34)
		declaredAt: (28 to: 34)
		by:
			(account _ #_coverageTracker3188346_
				cover: (39 to: 47)
				declaredAt: (16 to: 24)
				by: anAccount).
	#_coverageTracker3188346_
		cover: (52 to: 57)
		declaredAt: (52 to: 57)
		by:
			(result _ #_coverageTracker3188346_
				coverAll:
					{62 to: 62}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker3188348_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker3188348_
		cover: (32 to: 39)
		declaredAt: (32 to: 39)
		by: accounts.
	#_coverageTracker3188348_
		coverAll:
			{41 to: 51}
		evaluating: [
			receiver2 anySatisfy: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker3188348_
					cover: (68 to: 76)
					declaredAt: (56 to: 64)
					by: anAccount.
				#_coverageTracker3188348_
					coverAll:
						{78 to: 91}
					evaluating: [
						receiver1 hasRegistered:
							(#_coverageTracker3188348_
								cover: (93 to: 104)
								declaredAt: (16 to: 27)
								by: aTransaction) ]
					thatSends: #hasRegistered:
					to: receiver1 ] value ]]
		thatSends: #anySatisfy:
		to: receiver2 ] value.! !
!Behavior method!
value
	#_coverageTracker3188352_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188352_
		cover: (10 to: 17)
		declaredAt: (10 to: 17)
		by: transfer.
	#_coverageTracker3188352_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker3188354_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188354_
		cover: (48 to: 72)
		declaredAt: (20 to: 44)
		by: aCollectionOfTransactions.
	#_coverageTracker3188354_
		coverAll:
			{74 to: 80}
		evaluating: [
			receiver1 addAll:
				(#_coverageTracker3188354_
					cover: (82 to: 93)
					declaredAt: (82 to: 93)
					by: transactions) ]
		thatSends: #addAll:
		to: receiver1 ] value.! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker3188356_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188356_
		cover: (33 to: 44)
		declaredAt: (33 to: 44)
		by: transactions.
	#_coverageTracker3188356_
		coverAll:
			{46 to: 54}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker3188356_
					cover: (56 to: 67)
					declaredAt: (16 to: 27)
					by: aTransaction) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
name
	#_coverageTracker3188358_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188358_
		cover: (8 to: 20)
		declaredAt: (8 to: 20)
		by: portfolioName.
	#_coverageTracker3188358_
		coverAll:
			{22 to: 25}
		evaluating: [ receiver1 copy ]
		thatSends: #copy
		to: receiver1 ] value.! !
!Behavior method!
test06ReportPrintAllTransactions
	| anAccount originReport summaryReport |
	#_coverageTracker3188362_ markAsExecuted.
	#_coverageTracker3188362_
		cover: (80 to: 88)
		declaredAt: (38 to: 46)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188362_
				coverAll:
					{93 to: 108}
				by: ReceptiveAccount.
			#_coverageTracker3188362_
				coverAll:
					{110 to: 112}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188362_
		coverAll:
			{117 to: 123}
		by: Deposit.
	#_coverageTracker3188362_
		coverAll:
			{125 to: 133. 139 to: 141}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188362_
						coverAll:
							{135 to: 137}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188362_
						cover: (143 to: 151)
						declaredAt: (38 to: 46)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188362_
		coverAll:
			{155 to: 162}
		by: Withdraw.
	#_coverageTracker3188362_
		coverAll:
			{164 to: 172. 177 to: 179}
		evaluating: [
			receiver3
				register:
					(#_coverageTracker3188362_
						coverAll:
							{174 to: 175}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3188362_
						cover: (181 to: 189)
						declaredAt: (38 to: 46)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188362_
		coverAll:
			{193 to: 200}
		by: Transfer.
	#_coverageTracker3188362_
		coverAll:
			{202 to: 206. 218 to: 220. 243 to: 252}
		evaluating: [
			receiver5
				from:
					(#_coverageTracker3188362_
						cover: (208 to: 216)
						declaredAt: (38 to: 46)
						by: anAccount)
				to:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188362_
						coverAll:
							{222 to: 237}
						by: ReceptiveAccount.
					#_coverageTracker3188362_
						coverAll:
							{239 to: 241}
						evaluating: [ receiver4 new ]
						thatSends: #new
						to: receiver4 ] value
				withValue:
					(#_coverageTracker3188362_
						coverAll:
							{254 to: 255}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188362_
		coverAll:
			{259 to: 266}
		by: Transfer.
	#_coverageTracker3188362_
		coverAll:
			{268 to: 272. 295 to: 297. 309 to: 318}
		evaluating: [
			receiver7
				from:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188362_
						coverAll:
							{274 to: 289}
						by: ReceptiveAccount.
					#_coverageTracker3188362_
						coverAll:
							{291 to: 293}
						evaluating: [ receiver6 new ]
						thatSends: #new
						to: receiver6 ] value
				to:
					(#_coverageTracker3188362_
						cover: (299 to: 307)
						declaredAt: (38 to: 46)
						by: anAccount)
				withValue:
					(#_coverageTracker3188362_
						coverAll:
							{320 to: 321}
						byLiteralOrPseudoVariable: 30) ]
		thatSends: #from:to:withValue:
		to: receiver7 ] value.
	#_coverageTracker3188362_
		cover: (327 to: 339)
		declaredAt: (62 to: 74)
		by:
			(summaryReport _ [ | receiver8 |
			receiver8 _ #_coverageTracker3188362_
				coverAll:
					{344 to: 357}
				by: AccountSummary.
			#_coverageTracker3188362_
				coverAll:
					{359 to: 362}
				evaluating: [
					receiver8 for:
						(#_coverageTracker3188362_
							cover: (364 to: 372)
							declaredAt: (38 to: 46)
							by: anAccount) ]
				thatSends: #for:
				to: receiver8 ] value).
	#_coverageTracker3188362_
		cover: (377 to: 388)
		declaredAt: (48 to: 59)
		by:
			(originReport _ [ | receiver9 |
			receiver9 _ #_coverageTracker3188362_
				coverAll:
					{393 to: 409}
				by: OrderedCollection.
			#_coverageTracker3188362_
				coverAll:
					{411 to: 415. 440 to: 444. 475 to: 479. 510 to: 514. 559 to: 563}
				evaluating: [
					receiver9
						with:
							(#_coverageTracker3188362_
								coverAll:
									{416 to: 429}
								byLiteralOrPseudoVariable: 'Balance = 60')
						with:
							(#_coverageTracker3188362_
								coverAll:
									{446 to: 464}
								byLiteralOrPseudoVariable: 'Depósito por 100.')
						with:
							(#_coverageTracker3188362_
								coverAll:
									{480 to: 499}
								byLiteralOrPseudoVariable: 'Extracción por 50.')
						with:
							(#_coverageTracker3188362_
								coverAll:
									{516 to: 548}
								byLiteralOrPseudoVariable: 'Salida por transferencia de 20.')
						with:
							(#_coverageTracker3188362_
								coverAll:
									{565 to: 598}
								byLiteralOrPseudoVariable: 'Entrada por transferencia de 30.') ]
				thatSends: #with:with:with:with:with:
				to: receiver9 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker3188362_
		coverAll:
			{611 to: 614}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188362_
		coverAll:
			{616 to: 622. 652 to: 658}
		evaluating: [
			receiver11
				assert:
					[ | receiver10 |
					receiver10 _ #_coverageTracker3188362_
						cover: (625 to: 637)
						declaredAt: (62 to: 74)
						by: summaryReport.
					#_coverageTracker3188362_
						coverAll:
							{639 to: 649}
						evaluating: [ receiver10 buildResult ]
						thatSends: #buildResult
						to: receiver10 ] value
				equals:
					(#_coverageTracker3188362_
						cover: (660 to: 671)
						declaredAt: (48 to: 59)
						by: originReport) ]
		thatSends: #assert:equals:
		to: receiver11 ] value.! !
!Behavior method!
executeForOriginTransfer: anOriginTransfer
	#_coverageTracker3188398_ markAsExecuted.
	#_coverageTracker3188398_
		cover: (56 to: 61)
		declaredAt: (46 to: 51)
		by:
			(result _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188398_
				cover: (46 to: 51)
				declaredAt: (46 to: 51)
				by: result.
			#_coverageTracker3188398_
				coverAll:
					{63 to: 63}
				evaluating: [
					receiver2 -
						[ | receiver1 |
						receiver1 _ #_coverageTracker3188398_
							cover: (66 to: 81)
							declaredAt: (27 to: 42)
							by: anOriginTransfer.
						#_coverageTracker3188398_
							coverAll:
								{83 to: 87}
							evaluating: [ receiver1 value ]
							thatSends: #value
							to: receiver1 ] value ]
				thatSends: #-
				to: receiver2 ] value).! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker3188400_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188400_
		cover: (28 to: 35)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker3188400_
		coverAll:
			{37 to: 37}
		evaluating: [
			receiver1 +
				(#_coverageTracker3188400_
					cover: (39 to: 43)
					declaredAt: (39 to: 43)
					by: value) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
test04TransferBetweenDifferentAccount
	| anAccount |
	#_coverageTracker3188404_ markAsExecuted.
	#_coverageTracker3188404_
		cover: (55 to: 63)
		declaredAt: (42 to: 50)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188404_
				coverAll:
					{68 to: 83}
				by: ReceptiveAccount.
			#_coverageTracker3188404_
				coverAll:
					{85 to: 87}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3188404_
		coverAll:
			{91 to: 94}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188404_
		coverAll:
			{96 to: 102. 164 to: 169. 177 to: 192}
		evaluating: [
			receiver8
				should: [
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188404_
						coverAll:
							{106 to: 113}
						by: Transfer.
					#_coverageTracker3188404_
						coverAll:
							{115 to: 119. 131 to: 133. 146 to: 155}
						evaluating: [
							receiver2
								from:
									(#_coverageTracker3188404_
										cover: (121 to: 129)
										declaredAt: (42 to: 50)
										by: anAccount)
								to:
									(#_coverageTracker3188404_
										cover: (135 to: 143)
										declaredAt: (42 to: 50)
										by: anAccount)
								withValue:
									(#_coverageTracker3188404_
										coverAll:
											{157 to: 158}
										byLiteralOrPseudoVariable: 50) ]
						thatSends: #from:to:withValue:
						to: receiver2 ] value ]
				raise:
					(#_coverageTracker3188404_
						coverAll:
							{171 to: 175}
						by: Error)
				withExceptionDo: [ :anError |
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188404_
						coverAll:
							{211 to: 214}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188404_
						coverAll:
							{216 to: 222. 244 to: 250}
						evaluating: [
							receiver5
								assert:
									[ | receiver3 |
									receiver3 _ #_coverageTracker3188404_
										cover: (224 to: 230)
										declaredAt: (197 to: 203)
										by: anError.
									#_coverageTracker3188404_
										coverAll:
											{232 to: 242}
										evaluating: [ receiver3 messageText ]
										thatSends: #messageText
										to: receiver3 ] value
								equals:
									[ | receiver4 |
									receiver4 _ #_coverageTracker3188404_
										coverAll:
											{252 to: 259}
										by: Transfer.
									#_coverageTracker3188404_
										coverAll:
											{261 to: 276}
										evaluating: [ receiver4 sameAccountError ]
										thatSends: #sameAccountError
										to: receiver4 ] value ]
						thatSends: #assert:equals:
						to: receiver5 ] value.
					[ | receiver7 |
					receiver7 _ #_coverageTracker3188404_
						coverAll:
							{283 to: 286}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188404_
						coverAll:
							{288 to: 294. 314 to: 320}
						evaluating: [
							receiver7
								assert:
									[ | receiver6 |
									receiver6 _ #_coverageTracker3188404_
										cover: (296 to: 304)
										declaredAt: (42 to: 50)
										by: anAccount.
									#_coverageTracker3188404_
										coverAll:
											{306 to: 312}
										evaluating: [ receiver6 balance ]
										thatSends: #balance
										to: receiver6 ] value
								equals:
									(#_coverageTracker3188404_
										coverAll:
											{322 to: 322}
										byLiteralOrPseudoVariable: 0) ]
						thatSends: #assert:equals:
						to: receiver7 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver8 ] value.! !
!Behavior method!
test10TransferNetReportForPortfolioWithReceiverAccount
	| originAccount receiverAccount portfolio transfer transferReport |
	#_coverageTracker3188418_ markAsExecuted.
	#_coverageTracker3188418_
		cover: (129 to: 141)
		declaredAt: (60 to: 72)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188418_
				coverAll:
					{146 to: 161}
				by: ReceptiveAccount.
			#_coverageTracker3188418_
				coverAll:
					{163 to: 165}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188418_
		cover: (169 to: 183)
		declaredAt: (74 to: 88)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188418_
				coverAll:
					{188 to: 203}
				by: ReceptiveAccount.
			#_coverageTracker3188418_
				coverAll:
					{205 to: 207}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3188418_
		cover: (214 to: 221)
		declaredAt: (100 to: 107)
		by:
			(transfer _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188418_
				coverAll:
					{226 to: 233}
				by: Transfer.
			#_coverageTracker3188418_
				coverAll:
					{235 to: 239. 255 to: 257. 275 to: 284}
				evaluating: [
					receiver3
						from:
							(#_coverageTracker3188418_
								cover: (241 to: 253)
								declaredAt: (60 to: 72)
								by: originAccount)
						to:
							(#_coverageTracker3188418_
								cover: (259 to: 273)
								declaredAt: (74 to: 88)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3188418_
								coverAll:
									{286 to: 287}
								byLiteralOrPseudoVariable: 50) ]
				thatSends: #from:to:withValue:
				to: receiver3 ] value).
	#_coverageTracker3188418_
		cover: (291 to: 299)
		declaredAt: (90 to: 98)
		by:
			(portfolio _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188418_
				coverAll:
					{304 to: 312}
				by: Portfolio.
			#_coverageTracker3188418_
				coverAll:
					{314 to: 318}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3188418_
							cover: (320 to: 334)
							declaredAt: (74 to: 88)
							by: receiverAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	#_coverageTracker3188418_
		cover: (340 to: 353)
		declaredAt: (109 to: 122)
		by:
			(transferReport _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188418_
				coverAll:
					{359 to: 369}
				by: TransferNet.
			#_coverageTracker3188418_
				coverAll:
					{371 to: 374}
				evaluating: [
					receiver5 for:
						(#_coverageTracker3188418_
							cover: (376 to: 384)
							declaredAt: (90 to: 98)
							by: portfolio) ]
				thatSends: #for:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188418_
		coverAll:
			{391 to: 394}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188418_
		coverAll:
			{396 to: 402. 434 to: 440}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188418_
						cover: (405 to: 418)
						declaredAt: (109 to: 122)
						by: transferReport.
					#_coverageTracker3188418_
						coverAll:
							{420 to: 430}
						evaluating: [ receiver6 buildResult ]
						thatSends: #buildResult
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188418_
						coverAll:
							{442 to: 443}
						byLiteralOrPseudoVariable: 50) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
addRootParentsTo: rootParents
	#_coverageTracker3188433_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188433_
		cover: (33 to: 39)
		declaredAt: (33 to: 39)
		by: parents.
	#_coverageTracker3188433_
		coverAll:
			{44 to: 51. 82 to: 92}
		evaluating: [
			receiver4
				ifEmpty: [
					[ | receiver1 |
					receiver1 _ #_coverageTracker3188433_
						cover: (55 to: 65)
						declaredAt: (19 to: 29)
						by: rootParents.
					#_coverageTracker3188433_
						coverAll:
							{67 to: 70}
						evaluating: [
							receiver1 add:
								(#_coverageTracker3188433_
									coverAll:
										{72 to: 75}
									byLiteralOrPseudoVariable: self) ]
						thatSends: #add:
						to: receiver1 ] value ]
				ifNotEmpty: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188433_
						cover: (96 to: 102)
						declaredAt: (33 to: 39)
						by: parents.
					#_coverageTracker3188433_
						coverAll:
							{104 to: 106}
						evaluating: [
							receiver3 do: [ :aParent |
								[ | receiver2 |
								receiver2 _ #_coverageTracker3188433_
									cover: (121 to: 127)
									declaredAt: (111 to: 117)
									by: aParent.
								#_coverageTracker3188433_
									coverAll:
										{129 to: 145}
									evaluating: [
										receiver2 addRootParentsTo:
											(#_coverageTracker3188433_
												cover: (147 to: 157)
												declaredAt: (19 to: 29)
												by: rootParents) ]
									thatSends: #addRootParentsTo:
									to: receiver2 ] value ]]
						thatSends: #do:
						to: receiver3 ] value ]]
		thatSends: #ifEmpty:ifNotEmpty:
		to: receiver4 ] value.! !
!Behavior method!
addToResult: aName
	#_coverageTracker3188439_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188439_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: result.
	#_coverageTracker3188439_
		coverAll:
			{29 to: 36}
		evaluating: [
			receiver1 addLast:
				(#_coverageTracker3188439_
					cover: (38 to: 42)
					declaredAt: (14 to: 18)
					by: aName) ]
		thatSends: #addLast:
		to: receiver1 ] value.! !
!Behavior method!
executeFunctionality: anAccountFuncionality
	#_coverageTracker3188441_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188441_
		cover: (47 to: 67)
		declaredAt: (23 to: 43)
		by: anAccountFuncionality.
	#_coverageTracker3188441_
		coverAll:
			{69 to: 93}
		evaluating: [
			receiver1 executeForOriginTransfer:
				(#_coverageTracker3188441_
					coverAll:
						{95 to: 98}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #executeForOriginTransfer:
		to: receiver1 ] value.! !
!Behavior method!
test09ReportForPortfolioWithAccountWithWithdraw
	| aPortfolio summaryReport anAccount reportPrinted |
	#_coverageTracker3188445_ markAsExecuted.
	#_coverageTracker3188445_
		cover: (109 to: 117)
		declaredAt: (78 to: 86)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188445_
				coverAll:
					{122 to: 137}
				by: ReceptiveAccount.
			#_coverageTracker3188445_
				coverAll:
					{139 to: 141}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188445_
		coverAll:
			{146 to: 153}
		by: Withdraw.
	#_coverageTracker3188445_
		coverAll:
			{155 to: 163. 168 to: 170}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188445_
						coverAll:
							{165 to: 166}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3188445_
						cover: (172 to: 180)
						declaredAt: (78 to: 86)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3188445_
		cover: (187 to: 196)
		declaredAt: (53 to: 62)
		by:
			(aPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188445_
				coverAll:
					{201 to: 209}
				by: Portfolio.
			#_coverageTracker3188445_
				coverAll:
					{211 to: 215}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188445_
							cover: (217 to: 225)
							declaredAt: (78 to: 86)
							by: anAccount) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3188445_
		cover: (229 to: 241)
		declaredAt: (64 to: 76)
		by:
			(summaryReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188445_
				coverAll:
					{247 to: 260}
				by: AccountSummary.
			#_coverageTracker3188445_
				coverAll:
					{262 to: 265}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188445_
							cover: (267 to: 276)
							declaredAt: (53 to: 62)
							by: aPortfolio) ]
				thatSends: #for:
				to: receiver4 ] value).
	#_coverageTracker3188445_
		cover: (282 to: 294)
		declaredAt: (88 to: 100)
		by:
			(reportPrinted _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188445_
				coverAll:
					{299 to: 315}
				by: OrderedCollection.
			#_coverageTracker3188445_
				coverAll:
					{317 to: 321. 338 to: 342}
				evaluating: [
					receiver5
						with:
							(#_coverageTracker3188445_
								coverAll:
									{322 to: 336}
								byLiteralOrPseudoVariable: 'Balance = -50')
						with:
							(#_coverageTracker3188445_
								coverAll:
									{344 to: 363}
								byLiteralOrPseudoVariable: 'Extracción por 50.') ]
				thatSends: #with:with:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188445_
		coverAll:
			{369 to: 372}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188445_
		coverAll:
			{374 to: 380. 410 to: 416}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188445_
						cover: (383 to: 395)
						declaredAt: (64 to: 76)
						by: summaryReport.
					#_coverageTracker3188445_
						coverAll:
							{397 to: 407}
						evaluating: [ receiver6 buildResult ]
						thatSends: #buildResult
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188445_
						cover: (418 to: 430)
						declaredAt: (88 to: 100)
						by: reportPrinted) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
buildNameReport: aPortfolioTreeReport
	#_coverageTracker3188464_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188464_
		cover: (41 to: 60)
		declaredAt: (18 to: 37)
		by: aPortfolioTreeReport.
	#_coverageTracker3188464_
		coverAll:
			{62 to: 89}
		evaluating: [
			receiver1 buildNameReportForPortfolio:
				(#_coverageTracker3188464_
					coverAll:
						{91 to: 94}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #buildNameReportForPortfolio:
		to: receiver1 ] value.! !
!Behavior method!
transactions
	#_coverageTracker3188468_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188468_
		cover: (19 to: 30)
		declaredAt: (19 to: 30)
		by: transactions.
	#_coverageTracker3188468_
		coverAll:
			{32 to: 35}
		evaluating: [ receiver1 copy ]
		thatSends: #copy
		to: receiver1 ] value.! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker3188468_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188468_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188468_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver1 =
				(#_coverageTracker3188468_
					cover: (35 to: 43)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
buildFunctionalityResult: aFunctionality
	#_coverageTracker3188470_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188470_
		cover: (44 to: 51)
		declaredAt: (44 to: 51)
		by: accounts.
	#_coverageTracker3188470_
		coverAll:
			{53 to: 55}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker3188470_
					cover: (71 to: 79)
					declaredAt: (59 to: 67)
					by: anAccount.
				#_coverageTracker3188470_
					coverAll:
						{81 to: 105}
					evaluating: [
						receiver1 buildFunctionalityResult:
							(#_coverageTracker3188470_
								cover: (107 to: 120)
								declaredAt: (27 to: 40)
								by: aFunctionality) ]
					thatSends: #buildFunctionalityResult:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
addNameTo: aPortfolioTreeReport
	#_coverageTracker3188476_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188476_
		cover: (35 to: 54)
		declaredAt: (12 to: 31)
		by: aPortfolioTreeReport.
	#_coverageTracker3188476_
		coverAll:
			{56 to: 67}
		evaluating: [
			receiver1 addToResult:
				(#_coverageTracker3188476_
					cover: (69 to: 72)
					declaredAt: (69 to: 72)
					by: name) ]
		thatSends: #addToResult:
		to: receiver1 ] value.! !
!Behavior method!
test05TransferNetReportWithMultipleTransferReturnSumOfThem
	| anAccount transferReport |
	#_coverageTracker3188481_ markAsExecuted.
	#_coverageTracker3188481_
		cover: (93 to: 101)
		declaredAt: (64 to: 72)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188481_
				coverAll:
					{106 to: 121}
				by: ReceptiveAccount.
			#_coverageTracker3188481_
				coverAll:
					{123 to: 125}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188481_
		coverAll:
			{130 to: 137}
		by: Transfer.
	#_coverageTracker3188481_
		coverAll:
			{139 to: 143. 155 to: 157. 181 to: 190}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3188481_
						cover: (145 to: 153)
						declaredAt: (64 to: 72)
						by: anAccount)
				to:
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188481_
						coverAll:
							{159 to: 174}
						by: ReceptiveAccount.
					#_coverageTracker3188481_
						coverAll:
							{176 to: 178}
						evaluating: [ receiver2 new ]
						thatSends: #new
						to: receiver2 ] value
				withValue:
					(#_coverageTracker3188481_
						coverAll:
							{192 to: 193}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188481_
		coverAll:
			{197 to: 204}
		by: Transfer.
	#_coverageTracker3188481_
		coverAll:
			{206 to: 210. 233 to: 235. 247 to: 256}
		evaluating: [
			receiver5
				from:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188481_
						coverAll:
							{212 to: 227}
						by: ReceptiveAccount.
					#_coverageTracker3188481_
						coverAll:
							{229 to: 231}
						evaluating: [ receiver4 new ]
						thatSends: #new
						to: receiver4 ] value
				to:
					(#_coverageTracker3188481_
						cover: (237 to: 245)
						declaredAt: (64 to: 72)
						by: anAccount)
				withValue:
					(#_coverageTracker3188481_
						coverAll:
							{258 to: 259}
						byLiteralOrPseudoVariable: 30) ]
		thatSends: #from:to:withValue:
		to: receiver5 ] value.
	#_coverageTracker3188481_
		cover: (265 to: 278)
		declaredAt: (74 to: 87)
		by:
			(transferReport _ [ | receiver6 |
			receiver6 _ #_coverageTracker3188481_
				coverAll:
					{283 to: 293}
				by: TransferNet.
			#_coverageTracker3188481_
				coverAll:
					{295 to: 298}
				evaluating: [
					receiver6 for:
						(#_coverageTracker3188481_
							cover: (300 to: 308)
							declaredAt: (64 to: 72)
							by: anAccount) ]
				thatSends: #for:
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3188481_
		coverAll:
			{315 to: 318}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188481_
		coverAll:
			{320 to: 326. 357 to: 363}
		evaluating: [
			receiver8
				assert:
					[ | receiver7 |
					receiver7 _ #_coverageTracker3188481_
						cover: (329 to: 342)
						declaredAt: (74 to: 87)
						by: transferReport.
					#_coverageTracker3188481_
						coverAll:
							{344 to: 354}
						evaluating: [ receiver7 buildResult ]
						thatSends: #buildResult
						to: receiver7 ] value
				equals:
					(#_coverageTracker3188481_
						coverAll:
							{365 to: 366}
						byLiteralOrPseudoVariable: 10) ]
		thatSends: #assert:equals:
		to: receiver8 ] value.! !
!Behavior method!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions
	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	#_coverageTracker3188493_ markAsExecuted.
	#_coverageTracker3188493_
		cover: (165 to: 171)
		declaredAt: (67 to: 73)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188493_
				coverAll:
					{176 to: 191}
				by: ReceptiveAccount.
			#_coverageTracker3188493_
				coverAll:
					{193 to: 195}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188493_
		cover: (199 to: 212)
		declaredAt: (85 to: 98)
		by:
			(accountDeposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188493_
				coverAll:
					{217 to: 223}
				by: Deposit.
			#_coverageTracker3188493_
				coverAll:
					{225 to: 233. 239 to: 241}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3188493_
								coverAll:
									{235 to: 237}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188493_
								cover: (243 to: 249)
								declaredAt: (67 to: 73)
								by: account) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	#_coverageTracker3188493_
		cover: (253 to: 266)
		declaredAt: (100 to: 113)
		by:
			(anotherAccount _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188493_
				coverAll:
					{271 to: 286}
				by: ReceptiveAccount.
			#_coverageTracker3188493_
				coverAll:
					{288 to: 290}
				evaluating: [ receiver3 new ]
				thatSends: #new
				to: receiver3 ] value).
	#_coverageTracker3188493_
		cover: (294 to: 315)
		declaredAt: (137 to: 158)
		by:
			(anotherAccountWithdraw _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188493_
				coverAll:
					{320 to: 327}
				by: Withdraw.
			#_coverageTracker3188493_
				coverAll:
					{329 to: 337. 343 to: 345}
				evaluating: [
					receiver4
						register:
							(#_coverageTracker3188493_
								coverAll:
									{339 to: 341}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188493_
								cover: (347 to: 353)
								declaredAt: (67 to: 73)
								by: account) ]
				thatSends: #register:on:
				to: receiver4 ] value).
	#_coverageTracker3188493_
		cover: (357 to: 365)
		declaredAt: (75 to: 83)
		by:
			(portfolio _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188493_
				coverAll:
					{370 to: 378}
				by: Portfolio.
			#_coverageTracker3188493_
				coverAll:
					{380 to: 384}
				evaluating: [
					receiver5 with:
						(#_coverageTracker3188493_
							cover: (386 to: 392)
							declaredAt: (67 to: 73)
							by: account) ]
				thatSends: #with:
				to: receiver5 ] value).
	#_coverageTracker3188493_
		cover: (398 to: 418)
		declaredAt: (115 to: 135)
		by:
			(portfolioTransactions _ [ | receiver6 |
			receiver6 _ #_coverageTracker3188493_
				cover: (423 to: 431)
				declaredAt: (75 to: 83)
				by: portfolio.
			#_coverageTracker3188493_
				coverAll:
					{433 to: 444}
				evaluating: [ receiver6 transactions ]
				thatSends: #transactions
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3188493_
		coverAll:
			{450 to: 453}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188493_
		coverAll:
			{455 to: 461. 465 to: 471}
		evaluating: [
			receiver8
				assert:
					(#_coverageTracker3188493_
						coverAll:
							{463 to: 463}
						byLiteralOrPseudoVariable: 2)
				equals:
					[ | receiver7 |
					receiver7 _ #_coverageTracker3188493_
						cover: (473 to: 493)
						declaredAt: (115 to: 135)
						by: portfolioTransactions.
					#_coverageTracker3188493_
						coverAll:
							{495 to: 498}
						evaluating: [ receiver7 size ]
						thatSends: #size
						to: receiver7 ] value ]
		thatSends: #assert:equals:
		to: receiver8 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker3188493_
		coverAll:
			{502 to: 505}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188493_
		coverAll:
			{507 to: 513}
		evaluating: [
			receiver10 assert:
				[ | receiver9 |
				receiver9 _ #_coverageTracker3188493_
					cover: (516 to: 536)
					declaredAt: (115 to: 135)
					by: portfolioTransactions.
				#_coverageTracker3188493_
					coverAll:
						{538 to: 546}
					evaluating: [
						receiver9 includes:
							(#_coverageTracker3188493_
								cover: (548 to: 561)
								declaredAt: (85 to: 98)
								by: accountDeposit) ]
					thatSends: #includes:
					to: receiver9 ] value ]
		thatSends: #assert:
		to: receiver10 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker3188493_
		coverAll:
			{566 to: 569}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188493_
		coverAll:
			{571 to: 577}
		evaluating: [
			receiver12 assert:
				[ | receiver11 |
				receiver11 _ #_coverageTracker3188493_
					cover: (580 to: 600)
					declaredAt: (115 to: 135)
					by: portfolioTransactions.
				#_coverageTracker3188493_
					coverAll:
						{602 to: 610}
					evaluating: [
						receiver11 includes:
							(#_coverageTracker3188493_
								cover: (612 to: 633)
								declaredAt: (137 to: 158)
								by: anotherAccountWithdraw) ]
					thatSends: #includes:
					to: receiver11 ] value ]
		thatSends: #assert:
		to: receiver12 ] value.! !
!Behavior method!
rootParents
	| rootParents |
	#_coverageTracker3188514_ markAsExecuted.
	#_coverageTracker3188514_
		cover: (35 to: 45)
		declaredAt: (18 to: 28)
		by:
			(rootParents _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188514_
				coverAll:
					{50 to: 52}
				by: Set.
			#_coverageTracker3188514_
				coverAll:
					{54 to: 56}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188514_
		coverAll:
			{60 to: 63}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188514_
		coverAll:
			{65 to: 81}
		evaluating: [
			receiver2 addRootParentsTo:
				(#_coverageTracker3188514_
					cover: (83 to: 93)
					declaredAt: (18 to: 28)
					by: rootParents) ]
		thatSends: #addRootParentsTo:
		to: receiver2 ] value.
	^ #_coverageTracker3188514_
		cover: (101 to: 111)
		declaredAt: (18 to: 28)
		by: rootParents.! !
!Behavior method!
initializeFor: anAccount
	#_coverageTracker3188518_ markAsExecuted.
	#_coverageTracker3188518_
		cover: (28 to: 34)
		declaredAt: (28 to: 34)
		by:
			(account _ #_coverageTracker3188518_
				cover: (39 to: 47)
				declaredAt: (16 to: 24)
				by: anAccount).
	#_coverageTracker3188518_
		cover: (52 to: 57)
		declaredAt: (52 to: 57)
		by:
			(result _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188518_
				coverAll:
					{62 to: 78}
				by: OrderedCollection.
			#_coverageTracker3188518_
				coverAll:
					{80 to: 82}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
transactions
	| transactions |
	#_coverageTracker3188522_ markAsExecuted.
	#_coverageTracker3188522_
		cover: (37 to: 48)
		declaredAt: (19 to: 30)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188522_
				coverAll:
					{53 to: 69}
				by: OrderedCollection.
			#_coverageTracker3188522_
				coverAll:
					{71 to: 73}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188522_
		cover: (77 to: 84)
		declaredAt: (77 to: 84)
		by: accounts.
	#_coverageTracker3188522_
		coverAll:
			{86 to: 88}
		evaluating: [
			receiver3 do: [ :anAccount |
				[ | receiver2 |
				receiver2 _ #_coverageTracker3188522_
					cover: (105 to: 113)
					declaredAt: (93 to: 101)
					by: anAccount.
				#_coverageTracker3188522_
					coverAll:
						{115 to: 132}
					evaluating: [
						receiver2 addTransactionsTo:
							(#_coverageTracker3188522_
								cover: (134 to: 145)
								declaredAt: (19 to: 30)
								by: transactions) ]
					thatSends: #addTransactionsTo:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.
	^ #_coverageTracker3188522_
		cover: (154 to: 165)
		declaredAt: (19 to: 30)
		by: transactions.! !
!Behavior method!
test11PortfolioCanNotIncludeAccountOfItsPortfolios
	| account simplePortfolio composedPortfolio |
	#_coverageTracker3188528_ markAsExecuted.
	#_coverageTracker3188528_
		cover: (103 to: 109)
		declaredAt: (56 to: 62)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188528_
				coverAll:
					{114 to: 129}
				by: ReceptiveAccount.
			#_coverageTracker3188528_
				coverAll:
					{131 to: 133}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188528_
		cover: (137 to: 151)
		declaredAt: (64 to: 78)
		by:
			(simplePortfolio _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188528_
				coverAll:
					{156 to: 164}
				by: Portfolio.
			#_coverageTracker3188528_
				coverAll:
					{166 to: 170}
				evaluating: [
					receiver2 with:
						(#_coverageTracker3188528_
							cover: (172 to: 178)
							declaredAt: (56 to: 62)
							by: account) ]
				thatSends: #with:
				to: receiver2 ] value).
	#_coverageTracker3188528_
		cover: (182 to: 198)
		declaredAt: (80 to: 96)
		by:
			(composedPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188528_
				coverAll:
					{203 to: 211}
				by: Portfolio.
			#_coverageTracker3188528_
				coverAll:
					{213 to: 217}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188528_
							cover: (219 to: 233)
							declaredAt: (64 to: 78)
							by: simplePortfolio) ]
				thatSends: #with:
				to: receiver3 ] value).
	[ | receiver13 |
	receiver13 _ #_coverageTracker3188528_
		coverAll:
			{239 to: 242}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188528_
		coverAll:
			{247 to: 253. 292 to: 297. 331 to: 346}
		evaluating: [
			receiver13
				should: [
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188528_
						cover: (257 to: 273)
						declaredAt: (80 to: 96)
						by: composedPortfolio.
					#_coverageTracker3188528_
						coverAll:
							{275 to: 278}
						evaluating: [
							receiver4 add:
								(#_coverageTracker3188528_
									cover: (280 to: 286)
									declaredAt: (56 to: 62)
									by: account) ]
						thatSends: #add:
						to: receiver4 ] value ]
				raise:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188528_
						coverAll:
							{299 to: 303}
						by: Error.
					#_coverageTracker3188528_
						coverAll:
							{305 to: 305}
						evaluating: [
							receiver5 -
								(#_coverageTracker3188528_
									coverAll:
										{307 to: 326}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver5 ] value
				withExceptionDo: [ :anError |
					[ | receiver8 |
					receiver8 _ #_coverageTracker3188528_
						coverAll:
							{364 to: 367}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188528_
						coverAll:
							{369 to: 375. 416 to: 422}
						evaluating: [
							receiver8
								assert:
									[ | receiver6 |
									receiver6 _ #_coverageTracker3188528_
										coverAll:
											{377 to: 385}
										by: Portfolio.
									#_coverageTracker3188528_
										coverAll:
											{387 to: 414}
										evaluating: [ receiver6 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver6 ] value
								equals:
									[ | receiver7 |
									receiver7 _ #_coverageTracker3188528_
										cover: (424 to: 430)
										declaredAt: (351 to: 357)
										by: anError.
									#_coverageTracker3188528_
										coverAll:
											{432 to: 442}
										evaluating: [ receiver7 messageText ]
										thatSends: #messageText
										to: receiver7 ] value ]
						thatSends: #assert:equals:
						to: receiver8 ] value.
					[ | receiver10 |
					receiver10 _ #_coverageTracker3188528_
						coverAll:
							{448 to: 451}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188528_
						coverAll:
							{453 to: 459. 463 to: 469}
						evaluating: [
							receiver10
								assert:
									(#_coverageTracker3188528_
										coverAll:
											{461 to: 461}
										byLiteralOrPseudoVariable: 1)
								equals:
									[ | receiver9 |
									receiver9 _ #_coverageTracker3188528_
										cover: (471 to: 487)
										declaredAt: (80 to: 96)
										by: composedPortfolio.
									#_coverageTracker3188528_
										coverAll:
											{489 to: 500}
										evaluating: [ receiver9 accountsSize ]
										thatSends: #accountsSize
										to: receiver9 ] value ]
						thatSends: #assert:equals:
						to: receiver10 ] value.
					[ | receiver12 |
					receiver12 _ #_coverageTracker3188528_
						coverAll:
							{506 to: 509}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188528_
						coverAll:
							{511 to: 517}
						evaluating: [
							receiver12 assert:
								[ | receiver11 |
								receiver11 _ #_coverageTracker3188528_
									cover: (520 to: 536)
									declaredAt: (80 to: 96)
									by: composedPortfolio.
								#_coverageTracker3188528_
									coverAll:
										{538 to: 554}
									evaluating: [
										receiver11 accountsIncludes:
											(#_coverageTracker3188528_
												cover: (556 to: 570)
												declaredAt: (64 to: 78)
												by: simplePortfolio) ]
									thatSends: #accountsIncludes:
									to: receiver11 ] value ]
						thatSends: #assert:
						to: receiver12 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver13 ] value.! !
!Behavior method!
test05ReceptiveAccountKnowsRegisteredTransactions
	| account deposit withdraw |
	#_coverageTracker3188551_ markAsExecuted.
	#_coverageTracker3188551_
		cover: (86 to: 92)
		declaredAt: (56 to: 62)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188551_
				coverAll:
					{97 to: 112}
				by: ReceptiveAccount.
			#_coverageTracker3188551_
				coverAll:
					{114 to: 116}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188551_
		cover: (120 to: 126)
		declaredAt: (64 to: 70)
		by:
			(deposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188551_
				coverAll:
					{131 to: 137}
				by: Deposit.
			#_coverageTracker3188551_
				coverAll:
					{139 to: 147. 153 to: 155}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3188551_
								coverAll:
									{149 to: 151}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188551_
								cover: (157 to: 163)
								declaredAt: (56 to: 62)
								by: account) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	#_coverageTracker3188551_
		cover: (167 to: 174)
		declaredAt: (72 to: 79)
		by:
			(withdraw _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188551_
				coverAll:
					{179 to: 186}
				by: Withdraw.
			#_coverageTracker3188551_
				coverAll:
					{188 to: 196. 201 to: 203}
				evaluating: [
					receiver3
						register:
							(#_coverageTracker3188551_
								coverAll:
									{198 to: 199}
								byLiteralOrPseudoVariable: 50)
						on:
							(#_coverageTracker3188551_
								cover: (205 to: 211)
								declaredAt: (56 to: 62)
								by: account) ]
				thatSends: #register:on:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188551_
		coverAll:
			{218 to: 221}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188551_
		coverAll:
			{223 to: 229}
		evaluating: [
			receiver5 assert:
				[ | receiver4 |
				receiver4 _ #_coverageTracker3188551_
					cover: (232 to: 238)
					declaredAt: (56 to: 62)
					by: account.
				#_coverageTracker3188551_
					coverAll:
						{240 to: 253}
					evaluating: [
						receiver4 hasRegistered:
							(#_coverageTracker3188551_
								cover: (255 to: 261)
								declaredAt: (64 to: 70)
								by: deposit) ]
					thatSends: #hasRegistered:
					to: receiver4 ] value ]
		thatSends: #assert:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188551_
		coverAll:
			{266 to: 269}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188551_
		coverAll:
			{271 to: 277}
		evaluating: [
			receiver7 assert:
				[ | receiver6 |
				receiver6 _ #_coverageTracker3188551_
					cover: (280 to: 286)
					declaredAt: (56 to: 62)
					by: account.
				#_coverageTracker3188551_
					coverAll:
						{288 to: 301}
					evaluating: [
						receiver6 hasRegistered:
							(#_coverageTracker3188551_
								cover: (303 to: 310)
								declaredAt: (72 to: 79)
								by: withdraw) ]
					thatSends: #hasRegistered:
					to: receiver6 ] value ]
		thatSends: #assert:
		to: receiver7 ] value.! !
!Behavior method!
test08TransferNetReportForNewPortfolioReturnsZero
	| aPortfolio transferReport |
	#_coverageTracker3188562_ markAsExecuted.
	#_coverageTracker3188562_
		cover: (85 to: 94)
		declaredAt: (54 to: 63)
		by:
			(aPortfolio _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188562_
				coverAll:
					{99 to: 107}
				by: Portfolio.
			#_coverageTracker3188562_
				coverAll:
					{109 to: 111}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188562_
		cover: (117 to: 130)
		declaredAt: (65 to: 78)
		by:
			(transferReport _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188562_
				coverAll:
					{136 to: 146}
				by: TransferNet.
			#_coverageTracker3188562_
				coverAll:
					{148 to: 151}
				evaluating: [
					receiver2 for:
						(#_coverageTracker3188562_
							cover: (153 to: 162)
							declaredAt: (54 to: 63)
							by: aPortfolio) ]
				thatSends: #for:
				to: receiver2 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188562_
		coverAll:
			{169 to: 172}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188562_
		coverAll:
			{174 to: 180. 211 to: 217}
		evaluating: [
			receiver4
				assert:
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188562_
						cover: (183 to: 196)
						declaredAt: (65 to: 78)
						by: transferReport.
					#_coverageTracker3188562_
						coverAll:
							{198 to: 208}
						evaluating: [ receiver3 buildResult ]
						thatSends: #buildResult
						to: receiver3 ] value
				equals:
					(#_coverageTracker3188562_
						coverAll:
							{219 to: 219}
						byLiteralOrPseudoVariable: 0) ]
		thatSends: #assert:equals:
		to: receiver4 ] value.! !
!Behavior method!
executeFunctionality: anAccountFuncionality
	#_coverageTracker3188568_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188568_
		cover: (47 to: 67)
		declaredAt: (23 to: 43)
		by: anAccountFuncionality.
	#_coverageTracker3188568_
		coverAll:
			{69 to: 95}
		evaluating: [
			receiver1 executeForReceiverTransfer:
				(#_coverageTracker3188568_
					coverAll:
						{97 to: 100}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #executeForReceiverTransfer:
		to: receiver1 ] value.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	#_coverageTracker3188570_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188570_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188570_
		coverAll:
			{49 to: 59}
		evaluating: [ receiver1 rootParents ]
		thatSends: #rootParents
		to: receiver1 ] value.
	#_coverageTracker3188570_
		coverAll:
			{61 to: 71}
		evaluating: [
			receiver3 anySatisfy: [ :aParent |
				[ | receiver2 |
				receiver2 _ #_coverageTracker3188570_
					cover: (86 to: 92)
					declaredAt: (76 to: 82)
					by: aParent.
				#_coverageTracker3188570_
					coverAll:
						{94 to: 106}
					evaluating: [
						receiver2 isComposedBy:
							(#_coverageTracker3188570_
								cover: (108 to: 119)
								declaredAt: (28 to: 39)
								by: accountToAdd) ]
					thatSends: #isComposedBy:
					to: receiver2 ] value ]]
		thatSends: #anySatisfy:
		to: receiver3 ] value.! !
!Behavior method!
executeForOriginTransfer: anOriginTransfer
	#_coverageTracker3188574_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188574_
		cover: (46 to: 51)
		declaredAt: (46 to: 51)
		by: result.
	#_coverageTracker3188574_
		coverAll:
			{53 to: 60}
		evaluating: [
			receiver5 addLast:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker3188574_
					coverAll:
						{62 to: 91}
					byLiteralOrPseudoVariable: 'Salida por transferencia de '.
				#_coverageTracker3188574_
					coverAll:
						{93 to: 93}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker3188574_
								cover: (95 to: 110)
								declaredAt: (27 to: 42)
								by: anOriginTransfer.
							#_coverageTracker3188574_
								coverAll:
									{112 to: 116}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker3188574_
								coverAll:
									{118 to: 125}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker3188574_
					coverAll:
						{127 to: 127}
					evaluating: [
						receiver4 ,
							(#_coverageTracker3188574_
								coverAll:
									{129 to: 131}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #addLast:
		to: receiver5 ] value.! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker3188580_ markAsExecuted.! !
!Behavior method!
test02ReportForReceptiveAccountWithDepositPrintDespositValue
	| anAccount reportPrinted summaryReport |
	#_coverageTracker3188582_ markAsExecuted.
	#_coverageTracker3188582_
		cover: (109 to: 117)
		declaredAt: (66 to: 74)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188582_
				coverAll:
					{122 to: 137}
				by: ReceptiveAccount.
			#_coverageTracker3188582_
				coverAll:
					{139 to: 141}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188582_
		coverAll:
			{146 to: 152}
		by: Deposit.
	#_coverageTracker3188582_
		coverAll:
			{154 to: 162. 168 to: 170}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188582_
						coverAll:
							{164 to: 166}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188582_
						cover: (172 to: 180)
						declaredAt: (66 to: 74)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3188582_
		cover: (186 to: 198)
		declaredAt: (90 to: 102)
		by:
			(summaryReport _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188582_
				coverAll:
					{203 to: 216}
				by: AccountSummary.
			#_coverageTracker3188582_
				coverAll:
					{218 to: 221}
				evaluating: [
					receiver3 for:
						(#_coverageTracker3188582_
							cover: (223 to: 231)
							declaredAt: (66 to: 74)
							by: anAccount) ]
				thatSends: #for:
				to: receiver3 ] value).
	#_coverageTracker3188582_
		cover: (236 to: 248)
		declaredAt: (76 to: 88)
		by:
			(reportPrinted _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188582_
				coverAll:
					{253 to: 269}
				by: OrderedCollection.
			#_coverageTracker3188582_
				coverAll:
					{271 to: 275. 292 to: 296}
				evaluating: [
					receiver4
						with:
							(#_coverageTracker3188582_
								coverAll:
									{276 to: 290}
								byLiteralOrPseudoVariable: 'Balance = 100')
						with:
							(#_coverageTracker3188582_
								coverAll:
									{298 to: 316}
								byLiteralOrPseudoVariable: 'Depósito por 100.') ]
				thatSends: #with:with:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker3188582_
		coverAll:
			{322 to: 325}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188582_
		coverAll:
			{327 to: 333. 363 to: 369}
		evaluating: [
			receiver6
				assert:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188582_
						cover: (336 to: 348)
						declaredAt: (90 to: 102)
						by: summaryReport.
					#_coverageTracker3188582_
						coverAll:
							{350 to: 360}
						evaluating: [ receiver5 buildResult ]
						thatSends: #buildResult
						to: receiver5 ] value
				equals:
					(#_coverageTracker3188582_
						cover: (371 to: 383)
						declaredAt: (76 to: 88)
						by: reportPrinted) ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
test07AccountKnowsItsTransactions
	| account1 deposit1 |
	#_coverageTracker3188599_ markAsExecuted.
	#_coverageTracker3188599_
		cover: (63 to: 70)
		declaredAt: (40 to: 47)
		by:
			(account1 _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188599_
				coverAll:
					{75 to: 90}
				by: ReceptiveAccount.
			#_coverageTracker3188599_
				coverAll:
					{92 to: 94}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188599_
		cover: (100 to: 107)
		declaredAt: (49 to: 56)
		by:
			(deposit1 _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188599_
				coverAll:
					{112 to: 118}
				by: Deposit.
			#_coverageTracker3188599_
				coverAll:
					{120 to: 128. 134 to: 136}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3188599_
								coverAll:
									{130 to: 132}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188599_
								cover: (138 to: 145)
								declaredAt: (40 to: 47)
								by: account1) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188599_
		coverAll:
			{152 to: 155}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188599_
		coverAll:
			{157 to: 163. 167 to: 173}
		evaluating: [
			receiver5
				assert:
					(#_coverageTracker3188599_
						coverAll:
							{165 to: 165}
						byLiteralOrPseudoVariable: 1)
				equals:
					[ | receiver4 |
					receiver4 _ [ | receiver3 |
					receiver3 _ #_coverageTracker3188599_
						cover: (175 to: 182)
						declaredAt: (40 to: 47)
						by: account1.
					#_coverageTracker3188599_
						coverAll:
							{184 to: 195}
						evaluating: [ receiver3 transactions ]
						thatSends: #transactions
						to: receiver3 ] value.
					#_coverageTracker3188599_
						coverAll:
							{197 to: 200}
						evaluating: [ receiver4 size ]
						thatSends: #size
						to: receiver4 ] value ]
		thatSends: #assert:equals:
		to: receiver5 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker3188599_
		coverAll:
			{205 to: 208}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188599_
		coverAll:
			{210 to: 216}
		evaluating: [
			receiver8 assert:
				[ | receiver7 |
				receiver7 _ [ | receiver6 |
				receiver6 _ #_coverageTracker3188599_
					cover: (219 to: 226)
					declaredAt: (40 to: 47)
					by: account1.
				#_coverageTracker3188599_
					coverAll:
						{228 to: 239}
					evaluating: [ receiver6 transactions ]
					thatSends: #transactions
					to: receiver6 ] value.
				#_coverageTracker3188599_
					coverAll:
						{241 to: 249}
					evaluating: [
						receiver7 includes:
							(#_coverageTracker3188599_
								cover: (251 to: 258)
								declaredAt: (49 to: 56)
								by: deposit1) ]
					thatSends: #includes:
					to: receiver7 ] value ]
		thatSends: #assert:
		to: receiver8 ] value.! !
!Behavior method!
test05PortfolioHasRegisteredItsAccountsTransactions
	| account portfolio deposit |
	#_coverageTracker3188611_ markAsExecuted.
	#_coverageTracker3188611_
		cover: (88 to: 94)
		declaredAt: (57 to: 63)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188611_
				coverAll:
					{99 to: 114}
				by: ReceptiveAccount.
			#_coverageTracker3188611_
				coverAll:
					{116 to: 118}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188611_
		cover: (122 to: 128)
		declaredAt: (75 to: 81)
		by:
			(deposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188611_
				coverAll:
					{133 to: 139}
				by: Deposit.
			#_coverageTracker3188611_
				coverAll:
					{141 to: 149. 155 to: 157}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3188611_
								coverAll:
									{151 to: 153}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188611_
								cover: (159 to: 165)
								declaredAt: (57 to: 63)
								by: account) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	#_coverageTracker3188611_
		cover: (169 to: 177)
		declaredAt: (65 to: 73)
		by:
			(portfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188611_
				coverAll:
					{182 to: 190}
				by: Portfolio.
			#_coverageTracker3188611_
				coverAll:
					{192 to: 196}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188611_
							cover: (198 to: 204)
							declaredAt: (57 to: 63)
							by: account) ]
				thatSends: #with:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188611_
		coverAll:
			{210 to: 213}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188611_
		coverAll:
			{215 to: 221}
		evaluating: [
			receiver5 assert:
				[ | receiver4 |
				receiver4 _ #_coverageTracker3188611_
					cover: (224 to: 232)
					declaredAt: (65 to: 73)
					by: portfolio.
				#_coverageTracker3188611_
					coverAll:
						{234 to: 247}
					evaluating: [
						receiver4 hasRegistered:
							(#_coverageTracker3188611_
								cover: (249 to: 255)
								declaredAt: (75 to: 81)
								by: deposit) ]
					thatSends: #hasRegistered:
					to: receiver4 ] value ]
		thatSends: #assert:
		to: receiver5 ] value.! !
!Behavior method!
initialize
	#_coverageTracker3188620_ markAsExecuted.
	#_coverageTracker3188620_
		coverAll:
			{20 to: 29}
		evaluating: [ super initialize ]
		thatSends: #initialize
		to: super.
	#_coverageTracker3188620_
		cover: (33 to: 44)
		declaredAt: (33 to: 44)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188620_
				coverAll:
					{49 to: 65}
				by: OrderedCollection.
			#_coverageTracker3188620_
				coverAll:
					{67 to: 69}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
test09TransferNetReportForPortfolioWithOriginAccount
	| originAccount receiverAccount portfolio transfer transferReport |
	#_coverageTracker3188626_ markAsExecuted.
	#_coverageTracker3188626_
		cover: (127 to: 139)
		declaredAt: (58 to: 70)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188626_
				coverAll:
					{144 to: 159}
				by: ReceptiveAccount.
			#_coverageTracker3188626_
				coverAll:
					{161 to: 163}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188626_
		cover: (167 to: 181)
		declaredAt: (72 to: 86)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188626_
				coverAll:
					{186 to: 201}
				by: ReceptiveAccount.
			#_coverageTracker3188626_
				coverAll:
					{203 to: 205}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3188626_
		cover: (212 to: 219)
		declaredAt: (98 to: 105)
		by:
			(transfer _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188626_
				coverAll:
					{224 to: 231}
				by: Transfer.
			#_coverageTracker3188626_
				coverAll:
					{233 to: 237. 253 to: 255. 273 to: 282}
				evaluating: [
					receiver3
						from:
							(#_coverageTracker3188626_
								cover: (239 to: 251)
								declaredAt: (58 to: 70)
								by: originAccount)
						to:
							(#_coverageTracker3188626_
								cover: (257 to: 271)
								declaredAt: (72 to: 86)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3188626_
								coverAll:
									{284 to: 285}
								byLiteralOrPseudoVariable: 50) ]
				thatSends: #from:to:withValue:
				to: receiver3 ] value).
	#_coverageTracker3188626_
		cover: (289 to: 297)
		declaredAt: (88 to: 96)
		by:
			(portfolio _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188626_
				coverAll:
					{302 to: 310}
				by: Portfolio.
			#_coverageTracker3188626_
				coverAll:
					{312 to: 316}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3188626_
							cover: (318 to: 330)
							declaredAt: (58 to: 70)
							by: originAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	#_coverageTracker3188626_
		cover: (336 to: 349)
		declaredAt: (107 to: 120)
		by:
			(transferReport _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188626_
				coverAll:
					{355 to: 365}
				by: TransferNet.
			#_coverageTracker3188626_
				coverAll:
					{367 to: 370}
				evaluating: [
					receiver5 for:
						(#_coverageTracker3188626_
							cover: (372 to: 380)
							declaredAt: (88 to: 96)
							by: portfolio) ]
				thatSends: #for:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188626_
		coverAll:
			{387 to: 390}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188626_
		coverAll:
			{392 to: 398. 430 to: 436}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188626_
						cover: (401 to: 414)
						declaredAt: (107 to: 120)
						by: transferReport.
					#_coverageTracker3188626_
						coverAll:
							{416 to: 426}
						evaluating: [ receiver6 buildResult ]
						thatSends: #buildResult
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188626_
						coverAll:
							{438 to: 440}
						byLiteralOrPseudoVariable: -50) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
test02TransferNetReportForAccountWithReceiverTransfer
	| anAccount transferReport |
	#_coverageTracker3188639_ markAsExecuted.
	#_coverageTracker3188639_
		cover: (88 to: 96)
		declaredAt: (59 to: 67)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188639_
				coverAll:
					{101 to: 116}
				by: ReceptiveAccount.
			#_coverageTracker3188639_
				coverAll:
					{118 to: 120}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188639_
		coverAll:
			{125 to: 132}
		by: Transfer.
	#_coverageTracker3188639_
		coverAll:
			{134 to: 138. 161 to: 163. 176 to: 185}
		evaluating: [
			receiver3
				from:
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188639_
						coverAll:
							{140 to: 155}
						by: ReceptiveAccount.
					#_coverageTracker3188639_
						coverAll:
							{157 to: 159}
						evaluating: [ receiver2 new ]
						thatSends: #new
						to: receiver2 ] value
				to:
					(#_coverageTracker3188639_
						cover: (165 to: 173)
						declaredAt: (59 to: 67)
						by: anAccount)
				withValue:
					(#_coverageTracker3188639_
						coverAll:
							{187 to: 188}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3188639_
		cover: (194 to: 207)
		declaredAt: (69 to: 82)
		by:
			(transferReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188639_
				coverAll:
					{212 to: 222}
				by: TransferNet.
			#_coverageTracker3188639_
				coverAll:
					{224 to: 227}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188639_
							cover: (229 to: 237)
							declaredAt: (59 to: 67)
							by: anAccount) ]
				thatSends: #for:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker3188639_
		coverAll:
			{244 to: 247}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188639_
		coverAll:
			{249 to: 255. 286 to: 292}
		evaluating: [
			receiver6
				assert:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188639_
						cover: (258 to: 271)
						declaredAt: (69 to: 82)
						by: transferReport.
					#_coverageTracker3188639_
						coverAll:
							{273 to: 283}
						evaluating: [ receiver5 buildResult ]
						thatSends: #buildResult
						to: receiver5 ] value
				equals:
					(#_coverageTracker3188639_
						coverAll:
							{294 to: 295}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
named: aName
	#_coverageTracker3188649_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188649_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188649_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188649_
		coverAll:
			{26 to: 41}
		evaluating: [
			receiver2 initializeNamed:
				(#_coverageTracker3188649_
					cover: (43 to: 47)
					declaredAt: (8 to: 12)
					by: aName) ]
		thatSends: #initializeNamed:
		to: receiver2 ] value.! !
!Behavior method!
test03TransferNetReportForAccountWithOriginTransfer
	| anAccount transferReport |
	#_coverageTracker3188651_ markAsExecuted.
	#_coverageTracker3188651_
		cover: (86 to: 94)
		declaredAt: (57 to: 65)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188651_
				coverAll:
					{99 to: 114}
				by: ReceptiveAccount.
			#_coverageTracker3188651_
				coverAll:
					{116 to: 118}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188651_
		coverAll:
			{123 to: 130}
		by: Transfer.
	#_coverageTracker3188651_
		coverAll:
			{132 to: 136. 148 to: 150. 174 to: 183}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3188651_
						cover: (138 to: 146)
						declaredAt: (57 to: 65)
						by: anAccount)
				to:
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188651_
						coverAll:
							{152 to: 167}
						by: ReceptiveAccount.
					#_coverageTracker3188651_
						coverAll:
							{169 to: 171}
						evaluating: [ receiver2 new ]
						thatSends: #new
						to: receiver2 ] value
				withValue:
					(#_coverageTracker3188651_
						coverAll:
							{185 to: 186}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3188651_
		cover: (192 to: 205)
		declaredAt: (67 to: 80)
		by:
			(transferReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188651_
				coverAll:
					{210 to: 220}
				by: TransferNet.
			#_coverageTracker3188651_
				coverAll:
					{222 to: 225}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188651_
							cover: (227 to: 235)
							declaredAt: (57 to: 65)
							by: anAccount) ]
				thatSends: #for:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker3188651_
		coverAll:
			{242 to: 245}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188651_
		coverAll:
			{247 to: 253. 284 to: 290}
		evaluating: [
			receiver6
				assert:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188651_
						cover: (256 to: 269)
						declaredAt: (67 to: 80)
						by: transferReport.
					#_coverageTracker3188651_
						coverAll:
							{271 to: 281}
						evaluating: [ receiver5 buildResult ]
						thatSends: #buildResult
						to: receiver5 ] value
				equals:
					(#_coverageTracker3188651_
						coverAll:
							{292 to: 294}
						byLiteralOrPseudoVariable: -20) ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
signalCanNotAddAccount
	#_coverageTracker3188662_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188662_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188662_
		coverAll:
			{32 to: 37}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker3188662_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker3188662_
					coverAll:
						{44 to: 48}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker3188662_
					coverAll:
						{50 to: 77}
					evaluating: [ receiver2 canNotAddAccountErrorMessage ]
					thatSends: #canNotAddAccountErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions
	| account deposit withdraw |
	#_coverageTracker3188664_ markAsExecuted.
	#_coverageTracker3188664_
		cover: (92 to: 98)
		declaredAt: (62 to: 68)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188664_
				coverAll:
					{103 to: 118}
				by: ReceptiveAccount.
			#_coverageTracker3188664_
				coverAll:
					{120 to: 122}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188664_
		cover: (126 to: 132)
		declaredAt: (70 to: 76)
		by:
			(deposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188664_
				coverAll:
					{138 to: 144}
				by: Deposit.
			#_coverageTracker3188664_
				coverAll:
					{146 to: 149}
				evaluating: [
					receiver2 for:
						(#_coverageTracker3188664_
							coverAll:
								{151 to: 153}
							byLiteralOrPseudoVariable: 100) ]
				thatSends: #for:
				to: receiver2 ] value).
	#_coverageTracker3188664_
		cover: (157 to: 164)
		declaredAt: (78 to: 85)
		by:
			(withdraw _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188664_
				coverAll:
					{169 to: 176}
				by: Withdraw.
			#_coverageTracker3188664_
				coverAll:
					{178 to: 181}
				evaluating: [
					receiver3 for:
						(#_coverageTracker3188664_
							coverAll:
								{183 to: 184}
							byLiteralOrPseudoVariable: 50) ]
				thatSends: #for:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188664_
		coverAll:
			{191 to: 194}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188664_
		coverAll:
			{196 to: 200}
		evaluating: [
			receiver5 deny:
				[ | receiver4 |
				receiver4 _ #_coverageTracker3188664_
					cover: (203 to: 209)
					declaredAt: (62 to: 68)
					by: account.
				#_coverageTracker3188664_
					coverAll:
						{211 to: 224}
					evaluating: [
						receiver4 hasRegistered:
							(#_coverageTracker3188664_
								cover: (226 to: 232)
								declaredAt: (70 to: 76)
								by: deposit) ]
					thatSends: #hasRegistered:
					to: receiver4 ] value ]
		thatSends: #deny:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188664_
		coverAll:
			{237 to: 240}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188664_
		coverAll:
			{242 to: 246}
		evaluating: [
			receiver7 deny:
				[ | receiver6 |
				receiver6 _ #_coverageTracker3188664_
					cover: (249 to: 255)
					declaredAt: (62 to: 68)
					by: account.
				#_coverageTracker3188664_
					coverAll:
						{257 to: 270}
					evaluating: [
						receiver6 hasRegistered:
							(#_coverageTracker3188664_
								cover: (271 to: 278)
								declaredAt: (78 to: 85)
								by: withdraw) ]
					thatSends: #hasRegistered:
					to: receiver6 ] value ]
		thatSends: #deny:
		to: receiver7 ] value.! !
!Behavior method!
buildResult
	#_coverageTracker3188674_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188674_
		cover: (14 to: 20)
		declaredAt: (14 to: 20)
		by: account.
	#_coverageTracker3188674_
		coverAll:
			{22 to: 46}
		evaluating: [
			receiver1 buildFunctionalityResult:
				(#_coverageTracker3188674_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #buildFunctionalityResult:
		to: receiver1 ] value.
	^ #_coverageTracker3188674_
		cover: (56 to: 61)
		declaredAt: (56 to: 61)
		by: result.! !
!Behavior method!
test04TransferNetReportWithDepositAndWithdrawDoesNotAffectTransferNetTotal
	| anAccount transferReport |
	#_coverageTracker3188678_ markAsExecuted.
	#_coverageTracker3188678_
		cover: (110 to: 118)
		declaredAt: (80 to: 88)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188678_
				coverAll:
					{123 to: 138}
				by: ReceptiveAccount.
			#_coverageTracker3188678_
				coverAll:
					{140 to: 142}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188678_
		coverAll:
			{147 to: 154}
		by: Transfer.
	#_coverageTracker3188678_
		coverAll:
			{156 to: 160. 172 to: 174. 198 to: 207}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3188678_
						cover: (162 to: 170)
						declaredAt: (80 to: 88)
						by: anAccount)
				to:
					[ | receiver2 |
					receiver2 _ #_coverageTracker3188678_
						coverAll:
							{176 to: 191}
						by: ReceptiveAccount.
					#_coverageTracker3188678_
						coverAll:
							{193 to: 195}
						evaluating: [ receiver2 new ]
						thatSends: #new
						to: receiver2 ] value
				withValue:
					(#_coverageTracker3188678_
						coverAll:
							{209 to: 210}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188678_
		coverAll:
			{214 to: 221}
		by: Transfer.
	#_coverageTracker3188678_
		coverAll:
			{223 to: 227. 250 to: 252. 264 to: 273}
		evaluating: [
			receiver5
				from:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188678_
						coverAll:
							{229 to: 244}
						by: ReceptiveAccount.
					#_coverageTracker3188678_
						coverAll:
							{246 to: 248}
						evaluating: [ receiver4 new ]
						thatSends: #new
						to: receiver4 ] value
				to:
					(#_coverageTracker3188678_
						cover: (254 to: 262)
						declaredAt: (80 to: 88)
						by: anAccount)
				withValue:
					(#_coverageTracker3188678_
						coverAll:
							{275 to: 276}
						byLiteralOrPseudoVariable: 30) ]
		thatSends: #from:to:withValue:
		to: receiver5 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker3188678_
		coverAll:
			{280 to: 286}
		by: Deposit.
	#_coverageTracker3188678_
		coverAll:
			{288 to: 296. 301 to: 303}
		evaluating: [
			receiver6
				register:
					(#_coverageTracker3188678_
						coverAll:
							{298 to: 299}
						byLiteralOrPseudoVariable: 10)
				on:
					(#_coverageTracker3188678_
						cover: (305 to: 313)
						declaredAt: (80 to: 88)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver6 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188678_
		coverAll:
			{318 to: 325}
		by: Withdraw.
	#_coverageTracker3188678_
		coverAll:
			{327 to: 335. 340 to: 342}
		evaluating: [
			receiver7
				register:
					(#_coverageTracker3188678_
						coverAll:
							{337 to: 338}
						byLiteralOrPseudoVariable: 20)
				on:
					(#_coverageTracker3188678_
						cover: (344 to: 352)
						declaredAt: (80 to: 88)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver7 ] value.
	#_coverageTracker3188678_
		cover: (359 to: 372)
		declaredAt: (90 to: 103)
		by:
			(transferReport _ [ | receiver8 |
			receiver8 _ #_coverageTracker3188678_
				coverAll:
					{378 to: 388}
				by: TransferNet.
			#_coverageTracker3188678_
				coverAll:
					{390 to: 393}
				evaluating: [
					receiver8 for:
						(#_coverageTracker3188678_
							cover: (395 to: 403)
							declaredAt: (80 to: 88)
							by: anAccount) ]
				thatSends: #for:
				to: receiver8 ] value).
	[ | receiver10 |
	receiver10 _ #_coverageTracker3188678_
		coverAll:
			{410 to: 413}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188678_
		coverAll:
			{415 to: 421. 452 to: 458}
		evaluating: [
			receiver10
				assert:
					[ | receiver9 |
					receiver9 _ #_coverageTracker3188678_
						cover: (424 to: 437)
						declaredAt: (90 to: 103)
						by: transferReport.
					#_coverageTracker3188678_
						coverAll:
							{439 to: 449}
						evaluating: [ receiver9 buildResult ]
						thatSends: #buildResult
						to: receiver9 ] value
				equals:
					(#_coverageTracker3188678_
						coverAll:
							{460 to: 461}
						byLiteralOrPseudoVariable: 10) ]
		thatSends: #assert:equals:
		to: receiver10 ] value.! !
!Behavior method!
test08ReportForPortfolioWithAccountWithDeposit
	| aPortfolio summaryReport anAccount reportPrinted |
	#_coverageTracker3188696_ markAsExecuted.
	#_coverageTracker3188696_
		cover: (108 to: 116)
		declaredAt: (77 to: 85)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188696_
				coverAll:
					{121 to: 136}
				by: ReceptiveAccount.
			#_coverageTracker3188696_
				coverAll:
					{138 to: 140}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188696_
		coverAll:
			{145 to: 151}
		by: Deposit.
	#_coverageTracker3188696_
		coverAll:
			{153 to: 161. 167 to: 169}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188696_
						coverAll:
							{163 to: 165}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188696_
						cover: (171 to: 179)
						declaredAt: (77 to: 85)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3188696_
		cover: (186 to: 195)
		declaredAt: (52 to: 61)
		by:
			(aPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188696_
				coverAll:
					{200 to: 208}
				by: Portfolio.
			#_coverageTracker3188696_
				coverAll:
					{210 to: 214}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188696_
							cover: (216 to: 224)
							declaredAt: (77 to: 85)
							by: anAccount) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3188696_
		cover: (228 to: 240)
		declaredAt: (63 to: 75)
		by:
			(summaryReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188696_
				coverAll:
					{246 to: 259}
				by: AccountSummary.
			#_coverageTracker3188696_
				coverAll:
					{261 to: 264}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188696_
							cover: (266 to: 275)
							declaredAt: (52 to: 61)
							by: aPortfolio) ]
				thatSends: #for:
				to: receiver4 ] value).
	#_coverageTracker3188696_
		cover: (281 to: 293)
		declaredAt: (87 to: 99)
		by:
			(reportPrinted _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188696_
				coverAll:
					{298 to: 314}
				by: OrderedCollection.
			#_coverageTracker3188696_
				coverAll:
					{316 to: 320. 337 to: 341}
				evaluating: [
					receiver5
						with:
							(#_coverageTracker3188696_
								coverAll:
									{321 to: 335}
								byLiteralOrPseudoVariable: 'Balance = 100')
						with:
							(#_coverageTracker3188696_
								coverAll:
									{343 to: 361}
								byLiteralOrPseudoVariable: 'Depósito por 100.') ]
				thatSends: #with:with:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188696_
		coverAll:
			{367 to: 370}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188696_
		coverAll:
			{372 to: 378. 408 to: 414}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188696_
						cover: (381 to: 393)
						declaredAt: (63 to: 75)
						by: summaryReport.
					#_coverageTracker3188696_
						coverAll:
							{395 to: 405}
						evaluating: [ receiver6 buildResult ]
						thatSends: #buildResult
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188696_
						cover: (416 to: 428)
						declaredAt: (87 to: 99)
						by: reportPrinted) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
value
	#_coverageTracker3188717_ markAsExecuted.
	^ #_coverageTracker3188717_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: value.! !
!Behavior method!
isReceiverLeg: receiverAccount
	#_coverageTracker3188719_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188719_
		cover: (35 to: 49)
		declaredAt: (16 to: 30)
		by: receiverAccount.
	#_coverageTracker3188719_
		coverAll:
			{51 to: 64}
		evaluating: [
			receiver1 hasRegistered:
				(#_coverageTracker3188719_
					cover: (66 to: 81)
					declaredAt: (66 to: 81)
					by: receiverTransfer) ]
		thatSends: #hasRegistered:
		to: receiver1 ] value.! !
!Behavior method!
test01TransferBetweenAccountsAffectBalances
	| originAccount receiverAccount transfer |
	#_coverageTracker3188723_ markAsExecuted.
	#_coverageTracker3188723_
		cover: (91 to: 103)
		declaredAt: (48 to: 60)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188723_
				coverAll:
					{108 to: 123}
				by: ReceptiveAccount.
			#_coverageTracker3188723_
				coverAll:
					{125 to: 127}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188723_
		cover: (131 to: 145)
		declaredAt: (62 to: 76)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188723_
				coverAll:
					{150 to: 165}
				by: ReceptiveAccount.
			#_coverageTracker3188723_
				coverAll:
					{167 to: 169}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3188723_
		cover: (176 to: 183)
		declaredAt: (79 to: 86)
		by:
			(transfer _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188723_
				coverAll:
					{188 to: 195}
				by: Transfer.
			#_coverageTracker3188723_
				coverAll:
					{197 to: 201. 217 to: 219. 237 to: 246}
				evaluating: [
					receiver3
						from:
							(#_coverageTracker3188723_
								cover: (203 to: 215)
								declaredAt: (48 to: 60)
								by: originAccount)
						to:
							(#_coverageTracker3188723_
								cover: (221 to: 235)
								declaredAt: (62 to: 76)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3188723_
								coverAll:
									{248 to: 249}
								byLiteralOrPseudoVariable: 50) ]
				thatSends: #from:to:withValue:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188723_
		coverAll:
			{255 to: 258}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188723_
		coverAll:
			{260 to: 266. 290 to: 296}
		evaluating: [
			receiver5
				assert:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188723_
						cover: (268 to: 280)
						declaredAt: (48 to: 60)
						by: originAccount.
					#_coverageTracker3188723_
						coverAll:
							{282 to: 288}
						evaluating: [ receiver4 balance ]
						thatSends: #balance
						to: receiver4 ] value
				equals:
					(#_coverageTracker3188723_
						coverAll:
							{298 to: 300}
						byLiteralOrPseudoVariable: -50) ]
		thatSends: #assert:equals:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188723_
		coverAll:
			{304 to: 307}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188723_
		coverAll:
			{309 to: 315. 341 to: 347}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188723_
						cover: (317 to: 331)
						declaredAt: (62 to: 76)
						by: receiverAccount.
					#_coverageTracker3188723_
						coverAll:
							{333 to: 339}
						evaluating: [ receiver6 balance ]
						thatSends: #balance
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188723_
						coverAll:
							{349 to: 350}
						byLiteralOrPseudoVariable: 50) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
executeForDeposit: aDeposit
	#_coverageTracker3188736_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188736_
		cover: (31 to: 36)
		declaredAt: (31 to: 36)
		by: result.
	#_coverageTracker3188736_
		coverAll:
			{38 to: 45}
		evaluating: [
			receiver5 addLast:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker3188736_
					coverAll:
						{47 to: 61}
					byLiteralOrPseudoVariable: 'Depósito por '.
				#_coverageTracker3188736_
					coverAll:
						{63 to: 63}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker3188736_
								cover: (65 to: 72)
								declaredAt: (20 to: 27)
								by: aDeposit.
							#_coverageTracker3188736_
								coverAll:
									{74 to: 78}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker3188736_
								coverAll:
									{80 to: 87}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker3188736_
					coverAll:
						{88 to: 88}
					evaluating: [
						receiver4 ,
							(#_coverageTracker3188736_
								coverAll:
									{90 to: 92}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #addLast:
		to: receiver5 ] value.! !
!Behavior method!
test09PortfolioTransactionsAreCalculatedRecursively
	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	#_coverageTracker3188746_ markAsExecuted.
	#_coverageTracker3188746_
		cover: (237 to: 258)
		declaredAt: (57 to: 78)
		by:
			(simplePortfolioAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188746_
				coverAll:
					{263 to: 278}
				by: ReceptiveAccount.
			#_coverageTracker3188746_
				coverAll:
					{280 to: 282}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188746_
		cover: (286 to: 314)
		declaredAt: (172 to: 200)
		by:
			(simplePortfolioAccountDeposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188746_
				coverAll:
					{319 to: 325}
				by: Deposit.
			#_coverageTracker3188746_
				coverAll:
					{327 to: 335. 341 to: 343}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3188746_
								coverAll:
									{337 to: 339}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3188746_
								cover: (345 to: 366)
								declaredAt: (57 to: 78)
								by: simplePortfolioAccount) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	#_coverageTracker3188746_
		cover: (370 to: 384)
		declaredAt: (80 to: 94)
		by:
			(simplePortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188746_
				coverAll:
					{389 to: 397}
				by: Portfolio.
			#_coverageTracker3188746_
				coverAll:
					{399 to: 403}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188746_
							cover: (405 to: 426)
							declaredAt: (57 to: 78)
							by: simplePortfolioAccount) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3188746_
		cover: (432 to: 455)
		declaredAt: (96 to: 119)
		by:
			(composedPortfolioAccount _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188746_
				coverAll:
					{460 to: 475}
				by: ReceptiveAccount.
			#_coverageTracker3188746_
				coverAll:
					{477 to: 479}
				evaluating: [ receiver4 new ]
				thatSends: #new
				to: receiver4 ] value).
	#_coverageTracker3188746_
		cover: (483 to: 514)
		declaredAt: (139 to: 170)
		by:
			(composedPortfolioAccountWithdraw _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188746_
				coverAll:
					{519 to: 526}
				by: Withdraw.
			#_coverageTracker3188746_
				coverAll:
					{528 to: 536. 541 to: 543}
				evaluating: [
					receiver5
						register:
							(#_coverageTracker3188746_
								coverAll:
									{538 to: 539}
								byLiteralOrPseudoVariable: 50)
						on:
							(#_coverageTracker3188746_
								cover: (545 to: 568)
								declaredAt: (96 to: 119)
								by: composedPortfolioAccount) ]
				thatSends: #register:on:
				to: receiver5 ] value).
	#_coverageTracker3188746_
		cover: (572 to: 588)
		declaredAt: (121 to: 137)
		by:
			(composedPortfolio _ [ | receiver6 |
			receiver6 _ #_coverageTracker3188746_
				coverAll:
					{593 to: 601}
				by: Portfolio.
			#_coverageTracker3188746_
				coverAll:
					{603 to: 607. 625 to: 629}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3188746_
								cover: (609 to: 623)
								declaredAt: (80 to: 94)
								by: simplePortfolio)
						with:
							(#_coverageTracker3188746_
								cover: (631 to: 654)
								declaredAt: (96 to: 119)
								by: composedPortfolioAccount) ]
				thatSends: #with:with:
				to: receiver6 ] value).
	#_coverageTracker3188746_
		cover: (660 to: 688)
		declaredAt: (202 to: 230)
		by:
			(composedPortfolioTransactions _ [ | receiver7 |
			receiver7 _ #_coverageTracker3188746_
				cover: (693 to: 709)
				declaredAt: (121 to: 137)
				by: composedPortfolio.
			#_coverageTracker3188746_
				coverAll:
					{711 to: 722}
				evaluating: [ receiver7 transactions ]
				thatSends: #transactions
				to: receiver7 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker3188746_
		coverAll:
			{726 to: 729}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188746_
		coverAll:
			{731 to: 737. 741 to: 747}
		evaluating: [
			receiver9
				assert:
					(#_coverageTracker3188746_
						coverAll:
							{739 to: 739}
						byLiteralOrPseudoVariable: 2)
				equals:
					[ | receiver8 |
					receiver8 _ #_coverageTracker3188746_
						cover: (749 to: 777)
						declaredAt: (202 to: 230)
						by: composedPortfolioTransactions.
					#_coverageTracker3188746_
						coverAll:
							{779 to: 782}
						evaluating: [ receiver8 size ]
						thatSends: #size
						to: receiver8 ] value ]
		thatSends: #assert:equals:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker3188746_
		coverAll:
			{786 to: 789}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188746_
		coverAll:
			{791 to: 797}
		evaluating: [
			receiver11 assert:
				[ | receiver10 |
				receiver10 _ #_coverageTracker3188746_
					cover: (800 to: 828)
					declaredAt: (202 to: 230)
					by: composedPortfolioTransactions.
				#_coverageTracker3188746_
					coverAll:
						{830 to: 838}
					evaluating: [
						receiver10 includes:
							(#_coverageTracker3188746_
								cover: (840 to: 868)
								declaredAt: (172 to: 200)
								by: simplePortfolioAccountDeposit) ]
					thatSends: #includes:
					to: receiver10 ] value ]
		thatSends: #assert:
		to: receiver11 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker3188746_
		coverAll:
			{873 to: 876}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188746_
		coverAll:
			{878 to: 884}
		evaluating: [
			receiver13 assert:
				[ | receiver12 |
				receiver12 _ #_coverageTracker3188746_
					cover: (887 to: 915)
					declaredAt: (202 to: 230)
					by: composedPortfolioTransactions.
				#_coverageTracker3188746_
					coverAll:
						{917 to: 925}
					evaluating: [
						receiver12 includes:
							(#_coverageTracker3188746_
								cover: (927 to: 958)
								declaredAt: (139 to: 170)
								by: composedPortfolioAccountWithdraw) ]
					thatSends: #includes:
					to: receiver12 ] value ]
		thatSends: #assert:
		to: receiver13 ] value.! !
!Behavior method!
value
	#_coverageTracker3188773_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188773_
		cover: (10 to: 17)
		declaredAt: (10 to: 17)
		by: transfer.
	#_coverageTracker3188773_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
accountsSize
	#_coverageTracker3188775_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188775_
		cover: (18 to: 25)
		declaredAt: (18 to: 25)
		by: accounts.
	#_coverageTracker3188775_
		coverAll:
			{27 to: 30}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
test03TransferMustNotBeNegative
	| originAccount receiverAccount |
	#_coverageTracker3188777_ markAsExecuted.
	#_coverageTracker3188777_
		cover: (70 to: 82)
		declaredAt: (36 to: 48)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188777_
				coverAll:
					{87 to: 102}
				by: ReceptiveAccount.
			#_coverageTracker3188777_
				coverAll:
					{104 to: 106}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188777_
		cover: (110 to: 124)
		declaredAt: (50 to: 64)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188777_
				coverAll:
					{129 to: 144}
				by: ReceptiveAccount.
			#_coverageTracker3188777_
				coverAll:
					{146 to: 148}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker3188777_
		coverAll:
			{153 to: 156}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188777_
		coverAll:
			{158 to: 164. 240 to: 245. 253 to: 268}
		evaluating: [
			receiver11
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188777_
						coverAll:
							{171 to: 178}
						by: Transfer.
					#_coverageTracker3188777_
						coverAll:
							{180 to: 184. 200 to: 202. 220 to: 229}
						evaluating: [
							receiver3
								from:
									(#_coverageTracker3188777_
										cover: (186 to: 198)
										declaredAt: (36 to: 48)
										by: originAccount)
								to:
									(#_coverageTracker3188777_
										cover: (204 to: 218)
										declaredAt: (50 to: 64)
										by: receiverAccount)
								withValue:
									(#_coverageTracker3188777_
										coverAll:
											{231 to: 233}
										byLiteralOrPseudoVariable: -50) ]
						thatSends: #from:to:withValue:
						to: receiver3 ] value ]
				raise:
					(#_coverageTracker3188777_
						coverAll:
							{247 to: 251}
						by: Error)
				withExceptionDo: [ :anError |
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188777_
						coverAll:
							{287 to: 290}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188777_
						coverAll:
							{292 to: 298. 320 to: 326}
						evaluating: [
							receiver6
								assert:
									[ | receiver4 |
									receiver4 _ #_coverageTracker3188777_
										cover: (300 to: 306)
										declaredAt: (273 to: 279)
										by: anError.
									#_coverageTracker3188777_
										coverAll:
											{308 to: 318}
										evaluating: [ receiver4 messageText ]
										thatSends: #messageText
										to: receiver4 ] value
								equals:
									[ | receiver5 |
									receiver5 _ #_coverageTracker3188777_
										coverAll:
											{328 to: 335}
										by: Transfer.
									#_coverageTracker3188777_
										coverAll:
											{337 to: 361}
										evaluating: [ receiver5 invalidTransferValueError ]
										thatSends: #invalidTransferValueError
										to: receiver5 ] value ]
						thatSends: #assert:equals:
						to: receiver6 ] value.
					[ | receiver8 |
					receiver8 _ #_coverageTracker3188777_
						coverAll:
							{368 to: 371}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188777_
						coverAll:
							{373 to: 379. 403 to: 409}
						evaluating: [
							receiver8
								assert:
									[ | receiver7 |
									receiver7 _ #_coverageTracker3188777_
										cover: (381 to: 393)
										declaredAt: (36 to: 48)
										by: originAccount.
									#_coverageTracker3188777_
										coverAll:
											{395 to: 401}
										evaluating: [ receiver7 balance ]
										thatSends: #balance
										to: receiver7 ] value
								equals:
									(#_coverageTracker3188777_
										coverAll:
											{411 to: 411}
										byLiteralOrPseudoVariable: 0) ]
						thatSends: #assert:equals:
						to: receiver8 ] value.
					[ | receiver10 |
					receiver10 _ #_coverageTracker3188777_
						coverAll:
							{418 to: 421}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188777_
						coverAll:
							{423 to: 429. 455 to: 461}
						evaluating: [
							receiver10
								assert:
									[ | receiver9 |
									receiver9 _ #_coverageTracker3188777_
										cover: (431 to: 445)
										declaredAt: (50 to: 64)
										by: receiverAccount.
									#_coverageTracker3188777_
										coverAll:
											{447 to: 453}
										evaluating: [ receiver9 balance ]
										thatSends: #balance
										to: receiver9 ] value
								equals:
									(#_coverageTracker3188777_
										coverAll:
											{463 to: 463}
										byLiteralOrPseudoVariable: 0) ]
						thatSends: #assert:equals:
						to: receiver10 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver11 ] value.! !
!Behavior method!
test04ReportForAccountWithMultipleAccounTransactionPrintAllAndBalance
	| anAccount reportPrinted summaryReport |
	#_coverageTracker3188826_ markAsExecuted.
	#_coverageTracker3188826_
		cover: (117 to: 125)
		declaredAt: (75 to: 83)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188826_
				coverAll:
					{130 to: 145}
				by: ReceptiveAccount.
			#_coverageTracker3188826_
				coverAll:
					{147 to: 149}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188826_
		coverAll:
			{154 to: 160}
		by: Deposit.
	#_coverageTracker3188826_
		coverAll:
			{162 to: 170. 176 to: 178}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188826_
						coverAll:
							{172 to: 174}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188826_
						cover: (180 to: 188)
						declaredAt: (75 to: 83)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188826_
		coverAll:
			{192 to: 199}
		by: Withdraw.
	#_coverageTracker3188826_
		coverAll:
			{201 to: 209. 214 to: 216}
		evaluating: [
			receiver3
				register:
					(#_coverageTracker3188826_
						coverAll:
							{211 to: 212}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3188826_
						cover: (218 to: 226)
						declaredAt: (75 to: 83)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver3 ] value.
	#_coverageTracker3188826_
		cover: (232 to: 244)
		declaredAt: (99 to: 111)
		by:
			(summaryReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188826_
				coverAll:
					{249 to: 262}
				by: AccountSummary.
			#_coverageTracker3188826_
				coverAll:
					{264 to: 267}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188826_
							cover: (269 to: 277)
							declaredAt: (75 to: 83)
							by: anAccount) ]
				thatSends: #for:
				to: receiver4 ] value).
	#_coverageTracker3188826_
		cover: (282 to: 294)
		declaredAt: (85 to: 97)
		by:
			(reportPrinted _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188826_
				coverAll:
					{299 to: 315}
				by: OrderedCollection.
			#_coverageTracker3188826_
				coverAll:
					{317 to: 321. 337 to: 341. 363 to: 367}
				evaluating: [
					receiver5
						with:
							(#_coverageTracker3188826_
								coverAll:
									{322 to: 335}
								byLiteralOrPseudoVariable: 'Balance = 50')
						with:
							(#_coverageTracker3188826_
								coverAll:
									{343 to: 361}
								byLiteralOrPseudoVariable: 'Depósito por 100.')
						with:
							(#_coverageTracker3188826_
								coverAll:
									{369 to: 388}
								byLiteralOrPseudoVariable: 'Extracción por 50.') ]
				thatSends: #with:with:with:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3188826_
		coverAll:
			{394 to: 397}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188826_
		coverAll:
			{399 to: 405. 435 to: 441}
		evaluating: [
			receiver7
				assert:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3188826_
						cover: (408 to: 420)
						declaredAt: (99 to: 111)
						by: summaryReport.
					#_coverageTracker3188826_
						coverAll:
							{422 to: 432}
						evaluating: [ receiver6 buildResult ]
						thatSends: #buildResult
						to: receiver6 ] value
				equals:
					(#_coverageTracker3188826_
						cover: (443 to: 455)
						declaredAt: (85 to: 97)
						by: reportPrinted) ]
		thatSends: #assert:equals:
		to: receiver7 ] value.! !
!Behavior method!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance
	| account portfolio |
	#_coverageTracker3188848_ markAsExecuted.
	#_coverageTracker3188848_
		cover: (87 to: 93)
		declaredAt: (64 to: 70)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188848_
				coverAll:
					{98 to: 113}
				by: ReceptiveAccount.
			#_coverageTracker3188848_
				coverAll:
					{115 to: 117}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188848_
		coverAll:
			{121 to: 127}
		by: Deposit.
	#_coverageTracker3188848_
		coverAll:
			{129 to: 137. 143 to: 145}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188848_
						coverAll:
							{139 to: 141}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188848_
						cover: (147 to: 153)
						declaredAt: (64 to: 70)
						by: account) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3188848_
		cover: (157 to: 165)
		declaredAt: (72 to: 80)
		by:
			(portfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3188848_
				coverAll:
					{170 to: 178}
				by: Portfolio.
			#_coverageTracker3188848_
				coverAll:
					{180 to: 184}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3188848_
							cover: (186 to: 192)
							declaredAt: (64 to: 70)
							by: account) ]
				thatSends: #with:
				to: receiver3 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker3188848_
		coverAll:
			{198 to: 201}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188848_
		coverAll:
			{203 to: 209. 227 to: 233}
		evaluating: [
			receiver6
				assert:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188848_
						cover: (211 to: 217)
						declaredAt: (64 to: 70)
						by: account.
					#_coverageTracker3188848_
						coverAll:
							{219 to: 225}
						evaluating: [ receiver4 balance ]
						thatSends: #balance
						to: receiver4 ] value
				equals:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3188848_
						cover: (235 to: 243)
						declaredAt: (72 to: 80)
						by: portfolio.
					#_coverageTracker3188848_
						coverAll:
							{245 to: 251}
						evaluating: [ receiver5 balance ]
						thatSends: #balance
						to: receiver5 ] value ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
isContraryTransfer: aTransferLeg
	#_coverageTracker3188859_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188859_
		cover: (37 to: 44)
		declaredAt: (37 to: 44)
		by: transfer.
	#_coverageTracker3188859_
		coverAll:
			{46 to: 64}
		evaluating: [ receiver1 receiverTransferLeg ]
		thatSends: #receiverTransferLeg
		to: receiver1 ] value.
	#_coverageTracker3188859_
		coverAll:
			{66 to: 66}
		evaluating: [
			receiver2 =
				(#_coverageTracker3188859_
					cover: (68 to: 79)
					declaredAt: (21 to: 32)
					by: aTransferLeg) ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
addNameTo: aPortfolioTreeReport
	#_coverageTracker3188863_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188863_
		cover: (35 to: 54)
		declaredAt: (12 to: 31)
		by: aPortfolioTreeReport.
	#_coverageTracker3188863_
		coverAll:
			{56 to: 76}
		evaluating: [
			receiver1 addPortfolioToResult:
				(#_coverageTracker3188863_
					coverAll:
						{78 to: 81}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addPortfolioToResult:
		to: receiver1 ] value.! !
!Behavior method!
accountsIsEmpty
	#_coverageTracker3188865_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188865_
		cover: (21 to: 28)
		declaredAt: (21 to: 28)
		by: accounts.
	#_coverageTracker3188865_
		coverAll:
			{30 to: 36}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !
!Behavior method!
canNotAddAccountErrorMessage
	#_coverageTracker3188865_ markAsExecuted.
	^ #_coverageTracker3188865_
		coverAll:
			{34 to: 78}
		byLiteralOrPseudoVariable: 'Can not add repeated account to a portfolio'.! !
!Behavior method!
for: anAccount
	#_coverageTracker3188867_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188867_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188867_
		coverAll:
			{24 to: 26}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188867_
		coverAll:
			{28 to: 41}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3188867_
					cover: (43 to: 51)
					declaredAt: (6 to: 14)
					by: anAccount) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
with: anAccount with: anotherAccount
	#_coverageTracker3188871_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188871_
		coverAll:
			{41 to: 44}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188871_
		coverAll:
			{46 to: 48}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker3188871_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver2 add:
				(#_coverageTracker3188871_
					cover: (58 to: 66)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker3188871_
		coverAll:
			{71 to: 74}
		evaluating: [
			receiver3 add:
				(#_coverageTracker3188871_
					cover: (76 to: 89)
					declaredAt: (23 to: 36)
					by: anotherAccount) ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker3188871_
		coverAll:
			{94 to: 101}
		evaluating: [ receiver4 yourself ]
		thatSends: #yourself
		to: receiver4 ] value ] value.! !
!Behavior method!
for: aValue
	#_coverageTracker3188875_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188875_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188875_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188875_
		coverAll:
			{26 to: 39}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3188875_
					cover: (41 to: 46)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
affectBalance: currentBalance
	#_coverageTracker3188877_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker3188877_
		cover: (34 to: 47)
		declaredAt: (16 to: 29)
		by: currentBalance.
	#_coverageTracker3188877_
		coverAll:
			{49 to: 49}
		evaluating: [
			receiver2 +
				[ | receiver1 |
				receiver1 _ #_coverageTracker3188877_
					cover: (52 to: 59)
					declaredAt: (52 to: 59)
					by: transfer.
				#_coverageTracker3188877_
					coverAll:
						{61 to: 65}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #+
		to: receiver2 ] value.! !
!Behavior method!
test07PortfolioHasNoTransactionWhenHasNoAccounts
	#_coverageTracker3188882_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188882_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188882_
		coverAll:
			{57 to: 63}
		evaluating: [
			receiver4 assert:
				[ | receiver3 |
				receiver3 _ [ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker3188882_
					coverAll:
						{65 to: 73}
					by: Portfolio.
				#_coverageTracker3188882_
					coverAll:
						{75 to: 77}
					evaluating: [ receiver1 new ]
					thatSends: #new
					to: receiver1 ] value.
				#_coverageTracker3188882_
					coverAll:
						{79 to: 90}
					evaluating: [ receiver2 transactions ]
					thatSends: #transactions
					to: receiver2 ] value.
				#_coverageTracker3188882_
					coverAll:
						{92 to: 98}
					evaluating: [ receiver3 isEmpty ]
					thatSends: #isEmpty
					to: receiver3 ] value ]
		thatSends: #assert:
		to: receiver4 ] value.! !
!Behavior method!
assertCanAdd: accountToAdd
	#_coverageTracker3188884_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188884_
		coverAll:
			{31 to: 34}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188884_
		coverAll:
			{36 to: 61}
		evaluating: [
			receiver1 anyRootParentIsComposedBy:
				(#_coverageTracker3188884_
					cover: (63 to: 74)
					declaredAt: (15 to: 26)
					by: accountToAdd) ]
		thatSends: #anyRootParentIsComposedBy:
		to: receiver1 ] value.
	#_coverageTracker3188884_
		coverAll:
			{77 to: 83}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker3188884_
					coverAll:
						{87 to: 90}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker3188884_
					coverAll:
						{92 to: 113}
					evaluating: [ receiver2 signalCanNotAddAccount ]
					thatSends: #signalCanNotAddAccount
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.! !
!Behavior method!
test05ReportPrintTransferOutput
	| originAccount originReport receiverAccount receiverReport summaryOriginReport summaryReceiverReport |
	#_coverageTracker3188892_ markAsExecuted.
	#_coverageTracker3188892_
		cover: (143 to: 155)
		declaredAt: (37 to: 49)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188892_
				coverAll:
					{160 to: 175}
				by: ReceptiveAccount.
			#_coverageTracker3188892_
				coverAll:
					{177 to: 179}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188892_
		cover: (184 to: 198)
		declaredAt: (65 to: 79)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188892_
				coverAll:
					{203 to: 218}
				by: ReceptiveAccount.
			#_coverageTracker3188892_
				coverAll:
					{220 to: 222}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188892_
		coverAll:
			{226 to: 233}
		by: Transfer.
	#_coverageTracker3188892_
		coverAll:
			{235 to: 239. 255 to: 257. 275 to: 284}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3188892_
						cover: (241 to: 253)
						declaredAt: (37 to: 49)
						by: originAccount)
				to:
					(#_coverageTracker3188892_
						cover: (259 to: 273)
						declaredAt: (65 to: 79)
						by: receiverAccount)
				withValue:
					(#_coverageTracker3188892_
						coverAll:
							{286 to: 287}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3188892_
		cover: (293 to: 311)
		declaredAt: (96 to: 114)
		by:
			(summaryOriginReport _ [ | receiver4 |
			receiver4 _ #_coverageTracker3188892_
				coverAll:
					{316 to: 329}
				by: AccountSummary.
			#_coverageTracker3188892_
				coverAll:
					{331 to: 334}
				evaluating: [
					receiver4 for:
						(#_coverageTracker3188892_
							cover: (336 to: 348)
							declaredAt: (37 to: 49)
							by: originAccount) ]
				thatSends: #for:
				to: receiver4 ] value).
	#_coverageTracker3188892_
		cover: (353 to: 373)
		declaredAt: (116 to: 136)
		by:
			(summaryReceiverReport _ [ | receiver5 |
			receiver5 _ #_coverageTracker3188892_
				coverAll:
					{378 to: 391}
				by: AccountSummary.
			#_coverageTracker3188892_
				coverAll:
					{393 to: 396}
				evaluating: [
					receiver5 for:
						(#_coverageTracker3188892_
							cover: (398 to: 412)
							declaredAt: (65 to: 79)
							by: receiverAccount) ]
				thatSends: #for:
				to: receiver5 ] value).
	#_coverageTracker3188892_
		cover: (419 to: 430)
		declaredAt: (51 to: 62)
		by:
			(originReport _ [ | receiver6 |
			receiver6 _ #_coverageTracker3188892_
				coverAll:
					{435 to: 451}
				by: OrderedCollection.
			#_coverageTracker3188892_
				coverAll:
					{453 to: 457. 474 to: 478}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3188892_
								coverAll:
									{458 to: 472}
								byLiteralOrPseudoVariable: 'Balance = -20')
						with:
							(#_coverageTracker3188892_
								coverAll:
									{480 to: 512}
								byLiteralOrPseudoVariable: 'Salida por transferencia de 20.') ]
				thatSends: #with:with:
				to: receiver6 ] value).
	#_coverageTracker3188892_
		cover: (516 to: 529)
		declaredAt: (81 to: 94)
		by:
			(receiverReport _ [ | receiver7 |
			receiver7 _ #_coverageTracker3188892_
				coverAll:
					{534 to: 550}
				by: OrderedCollection.
			#_coverageTracker3188892_
				coverAll:
					{552 to: 556. 573 to: 577}
				evaluating: [
					receiver7
						with:
							(#_coverageTracker3188892_
								coverAll:
									{558 to: 571}
								byLiteralOrPseudoVariable: 'Balance = 20')
						with:
							(#_coverageTracker3188892_
								coverAll:
									{579 to: 612}
								byLiteralOrPseudoVariable: 'Entrada por transferencia de 20.') ]
				thatSends: #with:with:
				to: receiver7 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker3188892_
		coverAll:
			{618 to: 621}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188892_
		coverAll:
			{623 to: 629. 666 to: 672}
		evaluating: [
			receiver9
				assert:
					[ | receiver8 |
					receiver8 _ #_coverageTracker3188892_
						cover: (632 to: 650)
						declaredAt: (96 to: 114)
						by: summaryOriginReport.
					#_coverageTracker3188892_
						coverAll:
							{652 to: 662}
						evaluating: [ receiver8 buildResult ]
						thatSends: #buildResult
						to: receiver8 ] value
				equals:
					(#_coverageTracker3188892_
						cover: (674 to: 685)
						declaredAt: (51 to: 62)
						by: originReport) ]
		thatSends: #assert:equals:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker3188892_
		coverAll:
			{689 to: 692}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188892_
		coverAll:
			{694 to: 700. 739 to: 745}
		evaluating: [
			receiver11
				assert:
					[ | receiver10 |
					receiver10 _ #_coverageTracker3188892_
						cover: (703 to: 723)
						declaredAt: (116 to: 136)
						by: summaryReceiverReport.
					#_coverageTracker3188892_
						coverAll:
							{725 to: 735}
						evaluating: [ receiver10 buildResult ]
						thatSends: #buildResult
						to: receiver10 ] value
				equals:
					(#_coverageTracker3188892_
						cover: (747 to: 760)
						declaredAt: (81 to: 94)
						by: receiverReport) ]
		thatSends: #assert:equals:
		to: receiver11 ] value.! !
!Behavior method!
initializeFor: anAccount
	#_coverageTracker3188913_ markAsExecuted.
	#_coverageTracker3188913_
		cover: (28 to: 34)
		declaredAt: (28 to: 34)
		by:
			(account _ #_coverageTracker3188913_
				cover: (39 to: 47)
				declaredAt: (16 to: 24)
				by: anAccount).
	#_coverageTracker3188913_
		cover: (52 to: 57)
		declaredAt: (52 to: 57)
		by:
			(result _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188913_
				coverAll:
					{62 to: 78}
				by: OrderedCollection.
			#_coverageTracker3188913_
				coverAll:
					{80 to: 82}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
addPortfolioToResult: aPortfolio
	#_coverageTracker3188915_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3188915_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188915_
		coverAll:
			{41 to: 59}
		evaluating: [ receiver1 shouldBeImplemented ]
		thatSends: #shouldBeImplemented
		to: receiver1 ] value.! !
!Behavior method!
buildFunctionalityResult: anAccountFunctionality
	#_coverageTracker3188917_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188917_
		cover: (52 to: 63)
		declaredAt: (52 to: 63)
		by: transactions.
	#_coverageTracker3188917_
		coverAll:
			{65 to: 67}
		evaluating: [
			receiver2 do: [ :aTransaction |
				[ | receiver1 |
				receiver1 _ #_coverageTracker3188917_
					cover: (87 to: 98)
					declaredAt: (72 to: 83)
					by: aTransaction.
				#_coverageTracker3188917_
					coverAll:
						{100 to: 120}
					evaluating: [
						receiver1 executeFunctionality:
							(#_coverageTracker3188917_
								cover: (122 to: 143)
								declaredAt: (27 to: 48)
								by: anAccountFunctionality) ]
					thatSends: #executeFunctionality:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
isOriginLeg: originAccount
	#_coverageTracker3188921_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3188921_
		cover: (31 to: 43)
		declaredAt: (14 to: 26)
		by: originAccount.
	#_coverageTracker3188921_
		coverAll:
			{45 to: 58}
		evaluating: [
			receiver1 hasRegistered:
				(#_coverageTracker3188921_
					cover: (60 to: 73)
					declaredAt: (60 to: 73)
					by: originTransfer) ]
		thatSends: #hasRegistered:
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: anOriginAccount to: aReceiverAccount withValue: aTransferValue
	#_coverageTracker3188923_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188923_
		cover: (83 to: 96)
		declaredAt: (65 to: 78)
		by: aTransferValue.
	#_coverageTracker3188923_
		coverAll:
			{98 to: 98}
		evaluating: [
			receiver1 >
				(#_coverageTracker3188923_
					coverAll:
						{100 to: 100}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #>
		to: receiver1 ] value.
	#_coverageTracker3188923_
		coverAll:
			{103 to: 110}
		evaluating: [ receiver4 ifFalse: [ ^ [ | receiver3 |
				receiver3 _ #_coverageTracker3188923_
					coverAll:
						{115 to: 118}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker3188923_
					coverAll:
						{120 to: 125}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker3188923_
								coverAll:
									{127 to: 134}
								by: Transfer.
							#_coverageTracker3188923_
								coverAll:
									{136 to: 160}
								evaluating: [ receiver2 invalidTransferValueError ]
								thatSends: #invalidTransferValueError
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver5 |
	receiver5 _ #_coverageTracker3188923_
		cover: (168 to: 182)
		declaredAt: (17 to: 31)
		by: anOriginAccount.
	#_coverageTracker3188923_
		coverAll:
			{184 to: 184}
		evaluating: [
			receiver5 =
				(#_coverageTracker3188923_
					cover: (186 to: 201)
					declaredAt: (37 to: 52)
					by: aReceiverAccount) ]
		thatSends: #=
		to: receiver5 ] value.
	#_coverageTracker3188923_
		coverAll:
			{205 to: 211}
		evaluating: [ receiver8 ifTrue: [ ^ [ | receiver7 |
				receiver7 _ #_coverageTracker3188923_
					coverAll:
						{216 to: 219}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker3188923_
					coverAll:
						{221 to: 226}
					evaluating: [
						receiver7 error:
							[ | receiver6 |
							receiver6 _ #_coverageTracker3188923_
								coverAll:
									{228 to: 235}
								by: Transfer.
							#_coverageTracker3188923_
								coverAll:
									{237 to: 252}
								evaluating: [ receiver6 sameAccountError ]
								thatSends: #sameAccountError
								to: receiver6 ] value
						"hacer un assert" ]
					thatSends: #error:
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	#_coverageTracker3188923_
		cover: (276 to: 289)
		declaredAt: (276 to: 289)
		by:
			(originTransfer _ [ | receiver9 |
			receiver9 _ #_coverageTracker3188923_
				coverAll:
					{294 to: 307}
				by: OriginTransfer.
			#_coverageTracker3188923_
				coverAll:
					{309 to: 321}
				evaluating: [
					receiver9 withTransfer:
						(#_coverageTracker3188923_
							coverAll:
								{323 to: 326}
							byLiteralOrPseudoVariable: self) ]
				thatSends: #withTransfer:
				to: receiver9 ] value).
	[ | receiver10 |
	receiver10 _ #_coverageTracker3188923_
		cover: (330 to: 344)
		declaredAt: (17 to: 31)
		by: anOriginAccount.
	#_coverageTracker3188923_
		coverAll:
			{346 to: 354}
		evaluating: [
			receiver10 register:
				(#_coverageTracker3188923_
					cover: (356 to: 369)
					declaredAt: (276 to: 289)
					by: originTransfer) ]
		thatSends: #register:
		to: receiver10 ] value.
	#_coverageTracker3188923_
		cover: (373 to: 388)
		declaredAt: (373 to: 388)
		by:
			(receiverTransfer _ [ | receiver11 |
			receiver11 _ #_coverageTracker3188923_
				coverAll:
					{393 to: 408}
				by: ReceiverTransfer.
			#_coverageTracker3188923_
				coverAll:
					{410 to: 422}
				evaluating: [
					receiver11 withTransfer:
						(#_coverageTracker3188923_
							coverAll:
								{424 to: 427}
							byLiteralOrPseudoVariable: self) ]
				thatSends: #withTransfer:
				to: receiver11 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker3188923_
		cover: (431 to: 446)
		declaredAt: (37 to: 52)
		by: aReceiverAccount.
	#_coverageTracker3188923_
		coverAll:
			{448 to: 456}
		evaluating: [
			receiver12 register:
				(#_coverageTracker3188923_
					cover: (458 to: 473)
					declaredAt: (373 to: 388)
					by: receiverTransfer) ]
		thatSends: #register:
		to: receiver12 ] value.
	#_coverageTracker3188923_
		cover: (478 to: 490)
		declaredAt: (478 to: 490)
		by:
			(transferValue _ #_coverageTracker3188923_
				cover: (495 to: 508)
				declaredAt: (65 to: 78)
				by: aTransferValue).! !
!Behavior method!
test03WithdrawDecreasesBalanceOnTransactionValue
	| account |
	#_coverageTracker3188944_ markAsExecuted.
	#_coverageTracker3188944_
		cover: (68 to: 74)
		declaredAt: (55 to: 61)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188944_
				coverAll:
					{79 to: 94}
				by: ReceptiveAccount.
			#_coverageTracker3188944_
				coverAll:
					{96 to: 98}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188944_
		coverAll:
			{102 to: 108}
		by: Deposit.
	#_coverageTracker3188944_
		coverAll:
			{110 to: 118. 124 to: 126}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188944_
						coverAll:
							{120 to: 122}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188944_
						cover: (128 to: 134)
						declaredAt: (55 to: 61)
						by: account) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3188944_
		coverAll:
			{138 to: 145}
		by: Withdraw.
	#_coverageTracker3188944_
		coverAll:
			{147 to: 155. 160 to: 162}
		evaluating: [
			receiver3
				register:
					(#_coverageTracker3188944_
						coverAll:
							{157 to: 158}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3188944_
						cover: (164 to: 170)
						declaredAt: (55 to: 61)
						by: account) ]
		thatSends: #register:on:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3188944_
		coverAll:
			{177 to: 180}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188944_
		coverAll:
			{182 to: 188. 193 to: 199}
		evaluating: [
			receiver5
				assert:
					(#_coverageTracker3188944_
						coverAll:
							{190 to: 191}
						byLiteralOrPseudoVariable: 50)
				equals:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188944_
						cover: (201 to: 207)
						declaredAt: (55 to: 61)
						by: account.
					#_coverageTracker3188944_
						coverAll:
							{209 to: 215}
						evaluating: [ receiver4 balance ]
						thatSends: #balance
						to: receiver4 ] value ]
		thatSends: #assert:equals:
		to: receiver5 ] value.! !
!Behavior method!
executeForDeposit: aDeposit
	#_coverageTracker3188952_ markAsExecuted.
	#_coverageTracker3188952_
		cover: (41 to: 46)
		declaredAt: (31 to: 36)
		by:
			(result _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188952_
				cover: (31 to: 36)
				declaredAt: (31 to: 36)
				by: result.
			#_coverageTracker3188952_
				coverAll:
					{48 to: 48}
				evaluating: [
					receiver1 +
						(#_coverageTracker3188952_
							coverAll:
								{50 to: 50}
							byLiteralOrPseudoVariable: 0) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
for: aValue
	#_coverageTracker3188956_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188956_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188956_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3188956_
		coverAll:
			{26 to: 39}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3188956_
					cover: (41 to: 46)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
test04WithdrawValueMustBePositive
	| account withdrawValue |
	#_coverageTracker3188959_ markAsExecuted.
	#_coverageTracker3188959_
		cover: (67 to: 73)
		declaredAt: (40 to: 46)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188959_
				coverAll:
					{78 to: 93}
				by: ReceptiveAccount.
			#_coverageTracker3188959_
				coverAll:
					{95 to: 97}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188959_
		cover: (101 to: 113)
		declaredAt: (48 to: 60)
		by:
			(withdrawValue _ #_coverageTracker3188959_
				coverAll:
					{118 to: 119}
				byLiteralOrPseudoVariable: 50).
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188959_
		coverAll:
			{125 to: 128}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188959_
		coverAll:
			{130 to: 136. 152 to: 158}
		evaluating: [
			receiver4
				assert:
					(#_coverageTracker3188959_
						cover: (138 to: 150)
						declaredAt: (48 to: 60)
						by: withdrawValue)
				equals:
					[ | receiver3 |
					receiver3 _ [ | receiver2 |
					receiver2 _ #_coverageTracker3188959_
						coverAll:
							{161 to: 168}
						by: Withdraw.
					#_coverageTracker3188959_
						coverAll:
							{170 to: 178. 194 to: 196}
						evaluating: [
							receiver2
								register:
									(#_coverageTracker3188959_
										cover: (180 to: 192)
										declaredAt: (48 to: 60)
										by: withdrawValue)
								on:
									(#_coverageTracker3188959_
										cover: (198 to: 204)
										declaredAt: (40 to: 46)
										by: account) ]
						thatSends: #register:on:
						to: receiver2 ] value.
					#_coverageTracker3188959_
						coverAll:
							{207 to: 211}
						evaluating: [ receiver3 value ]
						thatSends: #value
						to: receiver3 ] value ]
		thatSends: #assert:equals:
		to: receiver4 ] value.! !
!Behavior method!
test12PortfolioCanNotIncludeItself
	| account simplePortfolio |
	#_coverageTracker3188967_ markAsExecuted.
	#_coverageTracker3188967_
		cover: (69 to: 75)
		declaredAt: (40 to: 46)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188967_
				coverAll:
					{80 to: 95}
				by: ReceptiveAccount.
			#_coverageTracker3188967_
				coverAll:
					{97 to: 99}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3188967_
		cover: (103 to: 117)
		declaredAt: (48 to: 62)
		by:
			(simplePortfolio _ [ | receiver2 |
			receiver2 _ #_coverageTracker3188967_
				coverAll:
					{122 to: 130}
				by: Portfolio.
			#_coverageTracker3188967_
				coverAll:
					{132 to: 136}
				evaluating: [
					receiver2 with:
						(#_coverageTracker3188967_
							cover: (138 to: 144)
							declaredAt: (40 to: 46)
							by: account) ]
				thatSends: #with:
				to: receiver2 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker3188967_
		coverAll:
			{150 to: 153}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188967_
		coverAll:
			{158 to: 164. 209 to: 214. 248 to: 263}
		evaluating: [
			receiver12
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188967_
						cover: (168 to: 182)
						declaredAt: (48 to: 62)
						by: simplePortfolio.
					#_coverageTracker3188967_
						coverAll:
							{184 to: 187}
						evaluating: [
							receiver3 add:
								(#_coverageTracker3188967_
									cover: (189 to: 203)
									declaredAt: (48 to: 62)
									by: simplePortfolio) ]
						thatSends: #add:
						to: receiver3 ] value ]
				raise:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3188967_
						coverAll:
							{216 to: 220}
						by: Error.
					#_coverageTracker3188967_
						coverAll:
							{222 to: 222}
						evaluating: [
							receiver4 -
								(#_coverageTracker3188967_
									coverAll:
										{224 to: 243}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver4 ] value
				withExceptionDo: [ :anError |
					[ | receiver7 |
					receiver7 _ #_coverageTracker3188967_
						coverAll:
							{281 to: 284}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188967_
						coverAll:
							{286 to: 292. 333 to: 339}
						evaluating: [
							receiver7
								assert:
									[ | receiver5 |
									receiver5 _ #_coverageTracker3188967_
										coverAll:
											{294 to: 302}
										by: Portfolio.
									#_coverageTracker3188967_
										coverAll:
											{304 to: 331}
										evaluating: [ receiver5 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver5 ] value
								equals:
									[ | receiver6 |
									receiver6 _ #_coverageTracker3188967_
										cover: (341 to: 347)
										declaredAt: (268 to: 274)
										by: anError.
									#_coverageTracker3188967_
										coverAll:
											{349 to: 359}
										evaluating: [ receiver6 messageText ]
										thatSends: #messageText
										to: receiver6 ] value ]
						thatSends: #assert:equals:
						to: receiver7 ] value.
					[ | receiver9 |
					receiver9 _ #_coverageTracker3188967_
						coverAll:
							{365 to: 368}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188967_
						coverAll:
							{370 to: 376. 380 to: 386}
						evaluating: [
							receiver9
								assert:
									(#_coverageTracker3188967_
										coverAll:
											{378 to: 378}
										byLiteralOrPseudoVariable: 1)
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker3188967_
										cover: (388 to: 402)
										declaredAt: (48 to: 62)
										by: simplePortfolio.
									#_coverageTracker3188967_
										coverAll:
											{404 to: 415}
										evaluating: [ receiver8 accountsSize ]
										thatSends: #accountsSize
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker3188967_
						coverAll:
							{421 to: 424}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3188967_
						coverAll:
							{426 to: 432}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker3188967_
									cover: (435 to: 449)
									declaredAt: (48 to: 62)
									by: simplePortfolio.
								#_coverageTracker3188967_
									coverAll:
										{451 to: 467}
									evaluating: [
										receiver10 accountsIncludes:
											(#_coverageTracker3188967_
												cover: (469 to: 475)
												declaredAt: (40 to: 46)
												by: account) ]
									thatSends: #accountsIncludes:
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
affectBalance: currentBalance from: aReceptiveAccount
	#_coverageTracker3188985_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3188985_
		cover: (58 to: 74)
		declaredAt: (37 to: 53)
		by: aReceptiveAccount.
	#_coverageTracker3188985_
		coverAll:
			{76 to: 76}
		evaluating: [
			receiver1 =
				(#_coverageTracker3188985_
					cover: (78 to: 91)
					declaredAt: (78 to: 91)
					by: originTransfer) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker3188985_
		coverAll:
			{95 to: 101}
		evaluating: [ receiver3 ifTrue: [ ^ [ | receiver2 |
				receiver2 _ #_coverageTracker3188985_
					cover: (107 to: 120)
					declaredAt: (16 to: 29)
					by: currentBalance.
				#_coverageTracker3188985_
					coverAll:
						{122 to: 122}
					evaluating: [
						receiver2 -
							(#_coverageTracker3188985_
								cover: (124 to: 136)
								declaredAt: (124 to: 136)
								by: transferValue) ]
					thatSends: #-
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	^ [ | receiver4 |
	receiver4 _ #_coverageTracker3188985_
		cover: (145 to: 158)
		declaredAt: (16 to: 29)
		by: currentBalance.
	#_coverageTracker3188985_
		coverAll:
			{160 to: 160}
		evaluating: [
			receiver4 +
				(#_coverageTracker3188985_
					cover: (162 to: 174)
					declaredAt: (124 to: 136)
					by: transferValue) ]
		thatSends: #+
		to: receiver4 ] value.! !
!Behavior method!
test02DepositIncreasesBalanceOnTransactionValue
	| account |
	#_coverageTracker3188992_ markAsExecuted.
	#_coverageTracker3188992_
		cover: (67 to: 73)
		declaredAt: (54 to: 60)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3188992_
				coverAll:
					{78 to: 93}
				by: ReceptiveAccount.
			#_coverageTracker3188992_
				coverAll:
					{96 to: 98}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3188992_
		coverAll:
			{102 to: 108}
		by: Deposit.
	#_coverageTracker3188992_
		coverAll:
			{110 to: 118. 124 to: 126}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3188992_
						coverAll:
							{120 to: 122}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3188992_
						cover: (128 to: 134)
						declaredAt: (54 to: 60)
						by: account) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker3188992_
		coverAll:
			{141 to: 144}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3188992_
		coverAll:
			{146 to: 152. 158 to: 164}
		evaluating: [
			receiver4
				assert:
					(#_coverageTracker3188992_
						coverAll:
							{154 to: 156}
						byLiteralOrPseudoVariable: 100)
				equals:
					[ | receiver3 |
					receiver3 _ #_coverageTracker3188992_
						cover: (166 to: 172)
						declaredAt: (54 to: 60)
						by: account.
					#_coverageTracker3188992_
						coverAll:
							{174 to: 180}
						evaluating: [ receiver3 balance ]
						thatSends: #balance
						to: receiver3 ] value ]
		thatSends: #assert:equals:
		to: receiver4 ] value.! !
!Behavior method!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios
	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	#_coverageTracker3189000_ markAsExecuted.
	#_coverageTracker3189000_
		cover: (153 to: 174)
		declaredAt: (65 to: 86)
		by:
			(simplePortfolioAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189000_
				coverAll:
					{179 to: 194}
				by: ReceptiveAccount.
			#_coverageTracker3189000_
				coverAll:
					{196 to: 198}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189000_
		coverAll:
			{202 to: 208}
		by: Deposit.
	#_coverageTracker3189000_
		coverAll:
			{210 to: 218. 224 to: 226}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3189000_
						coverAll:
							{220 to: 222}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3189000_
						cover: (228 to: 249)
						declaredAt: (65 to: 86)
						by: simplePortfolioAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3189000_
		cover: (253 to: 267)
		declaredAt: (88 to: 102)
		by:
			(simplePortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189000_
				coverAll:
					{272 to: 280}
				by: Portfolio.
			#_coverageTracker3189000_
				coverAll:
					{282 to: 286}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3189000_
							cover: (288 to: 309)
							declaredAt: (65 to: 86)
							by: simplePortfolioAccount) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3189000_
		cover: (315 to: 338)
		declaredAt: (104 to: 127)
		by:
			(composedPortfolioAccount _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189000_
				coverAll:
					{343 to: 358}
				by: ReceptiveAccount.
			#_coverageTracker3189000_
				coverAll:
					{360 to: 362}
				evaluating: [ receiver4 new ]
				thatSends: #new
				to: receiver4 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189000_
		coverAll:
			{366 to: 373}
		by: Withdraw.
	#_coverageTracker3189000_
		coverAll:
			{375 to: 383. 388 to: 390}
		evaluating: [
			receiver5
				register:
					(#_coverageTracker3189000_
						coverAll:
							{385 to: 386}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3189000_
						cover: (392 to: 415)
						declaredAt: (104 to: 127)
						by: composedPortfolioAccount) ]
		thatSends: #register:on:
		to: receiver5 ] value.
	#_coverageTracker3189000_
		cover: (419 to: 436)
		declaredAt: (129 to: 146)
		by:
			(composedPortofolio _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189000_
				coverAll:
					{441 to: 449}
				by: Portfolio.
			#_coverageTracker3189000_
				coverAll:
					{451 to: 455. 473 to: 477}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3189000_
								cover: (457 to: 471)
								declaredAt: (88 to: 102)
								by: simplePortfolio)
						with:
							(#_coverageTracker3189000_
								cover: (479 to: 502)
								declaredAt: (104 to: 127)
								by: composedPortfolioAccount) ]
				thatSends: #with:with:
				to: receiver6 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker3189000_
		coverAll:
			{508 to: 511}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189000_
		coverAll:
			{513 to: 519. 582 to: 588}
		evaluating: [
			receiver11
				assert:
					[ | receiver9 |
					receiver9 _ [ | receiver7 |
					receiver7 _ #_coverageTracker3189000_
						cover: (522 to: 545)
						declaredAt: (104 to: 127)
						by: composedPortfolioAccount.
					#_coverageTracker3189000_
						coverAll:
							{547 to: 553}
						evaluating: [ receiver7 balance ]
						thatSends: #balance
						to: receiver7 ] value.
					#_coverageTracker3189000_
						coverAll:
							{555 to: 555}
						evaluating: [
							receiver9 +
								[ | receiver8 |
								receiver8 _ #_coverageTracker3189000_
									cover: (557 to: 571)
									declaredAt: (88 to: 102)
									by: simplePortfolio.
								#_coverageTracker3189000_
									coverAll:
										{573 to: 579}
									evaluating: [ receiver8 balance ]
									thatSends: #balance
									to: receiver8 ] value ]
						thatSends: #+
						to: receiver9 ] value
				equals:
					[ | receiver10 |
					receiver10 _ #_coverageTracker3189000_
						cover: (590 to: 607)
						declaredAt: (129 to: 146)
						by: composedPortofolio.
					#_coverageTracker3189000_
						coverAll:
							{609 to: 615}
						evaluating: [ receiver10 balance ]
						thatSends: #balance
						to: receiver10 ] value ]
		thatSends: #assert:equals:
		to: receiver11 ] value.! !
!Behavior method!
executeFunctionality: anAccountFuncionality
	#_coverageTracker3189019_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3189019_
		cover: (47 to: 67)
		declaredAt: (23 to: 43)
		by: anAccountFuncionality.
	#_coverageTracker3189019_
		coverAll:
			{69 to: 87}
		evaluating: [
			receiver1 executeForWithdraw:
				(#_coverageTracker3189019_
					coverAll:
						{89 to: 92}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #executeForWithdraw:
		to: receiver1 ] value.! !
!Behavior method!
accountsIncludes: anAccount
	#_coverageTracker3189021_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3189021_
		cover: (32 to: 39)
		declaredAt: (32 to: 39)
		by: accounts.
	#_coverageTracker3189021_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker3189021_
					cover: (51 to: 59)
					declaredAt: (19 to: 27)
					by: anAccount) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
test12ReportForPortfolioWithPortfolio
	| anAccount originReport summaryReport portfolio |
	#_coverageTracker3189025_ markAsExecuted.
	#_coverageTracker3189025_
		cover: (96 to: 104)
		declaredAt: (46 to: 54)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189025_
				coverAll:
					{109 to: 124}
				by: ReceptiveAccount.
			#_coverageTracker3189025_
				coverAll:
					{126 to: 128}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189025_
		coverAll:
			{133 to: 139}
		by: Deposit.
	#_coverageTracker3189025_
		coverAll:
			{141 to: 149. 155 to: 157}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3189025_
						coverAll:
							{151 to: 153}
						byLiteralOrPseudoVariable: 100)
				on:
					(#_coverageTracker3189025_
						cover: (159 to: 167)
						declaredAt: (46 to: 54)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189025_
		coverAll:
			{171 to: 178}
		by: Withdraw.
	#_coverageTracker3189025_
		coverAll:
			{180 to: 188. 193 to: 195}
		evaluating: [
			receiver3
				register:
					(#_coverageTracker3189025_
						coverAll:
							{190 to: 191}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3189025_
						cover: (197 to: 205)
						declaredAt: (46 to: 54)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189025_
		coverAll:
			{209 to: 216}
		by: Transfer.
	#_coverageTracker3189025_
		coverAll:
			{218 to: 222. 234 to: 236. 259 to: 268}
		evaluating: [
			receiver5
				from:
					(#_coverageTracker3189025_
						cover: (224 to: 232)
						declaredAt: (46 to: 54)
						by: anAccount)
				to:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189025_
						coverAll:
							{238 to: 253}
						by: ReceptiveAccount.
					#_coverageTracker3189025_
						coverAll:
							{255 to: 257}
						evaluating: [ receiver4 new ]
						thatSends: #new
						to: receiver4 ] value
				withValue:
					(#_coverageTracker3189025_
						coverAll:
							{270 to: 271}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3189025_
		coverAll:
			{275 to: 282}
		by: Transfer.
	#_coverageTracker3189025_
		coverAll:
			{284 to: 288. 311 to: 313. 325 to: 334}
		evaluating: [
			receiver7
				from:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3189025_
						coverAll:
							{290 to: 305}
						by: ReceptiveAccount.
					#_coverageTracker3189025_
						coverAll:
							{307 to: 309}
						evaluating: [ receiver6 new ]
						thatSends: #new
						to: receiver6 ] value
				to:
					(#_coverageTracker3189025_
						cover: (315 to: 323)
						declaredAt: (46 to: 54)
						by: anAccount)
				withValue:
					(#_coverageTracker3189025_
						coverAll:
							{336 to: 337}
						byLiteralOrPseudoVariable: 30) ]
		thatSends: #from:to:withValue:
		to: receiver7 ] value.
	#_coverageTracker3189025_
		cover: (343 to: 351)
		declaredAt: (83 to: 91)
		by:
			(portfolio _ [ | receiver8 |
			receiver8 _ #_coverageTracker3189025_
				coverAll:
					{356 to: 364}
				by: Portfolio.
			#_coverageTracker3189025_
				coverAll:
					{366 to: 370}
				evaluating: [
					receiver8 with:
						(#_coverageTracker3189025_
							cover: (372 to: 380)
							declaredAt: (46 to: 54)
							by: anAccount) ]
				thatSends: #with:
				to: receiver8 ] value).
	#_coverageTracker3189025_
		cover: (387 to: 399)
		declaredAt: (69 to: 81)
		by:
			(summaryReport _ [ | receiver9 |
			receiver9 _ #_coverageTracker3189025_
				coverAll:
					{404 to: 417}
				by: AccountSummary.
			#_coverageTracker3189025_
				coverAll:
					{419 to: 422}
				evaluating: [
					receiver9 for:
						(#_coverageTracker3189025_
							cover: (424 to: 432)
							declaredAt: (83 to: 91)
							by: portfolio) ]
				thatSends: #for:
				to: receiver9 ] value).
	#_coverageTracker3189025_
		cover: (437 to: 448)
		declaredAt: (56 to: 67)
		by:
			(originReport _ [ | receiver10 |
			receiver10 _ #_coverageTracker3189025_
				coverAll:
					{453 to: 469}
				by: OrderedCollection.
			#_coverageTracker3189025_
				coverAll:
					{471 to: 475. 500 to: 504. 535 to: 539. 570 to: 574. 619 to: 623}
				evaluating: [
					receiver10
						with:
							(#_coverageTracker3189025_
								coverAll:
									{476 to: 489}
								byLiteralOrPseudoVariable: 'Balance = 60')
						with:
							(#_coverageTracker3189025_
								coverAll:
									{506 to: 524}
								byLiteralOrPseudoVariable: 'Depósito por 100.')
						with:
							(#_coverageTracker3189025_
								coverAll:
									{540 to: 559}
								byLiteralOrPseudoVariable: 'Extracción por 50.')
						with:
							(#_coverageTracker3189025_
								coverAll:
									{576 to: 608}
								byLiteralOrPseudoVariable: 'Salida por transferencia de 20.')
						with:
							(#_coverageTracker3189025_
								coverAll:
									{625 to: 658}
								byLiteralOrPseudoVariable: 'Entrada por transferencia de 30.') ]
				thatSends: #with:with:with:with:with:
				to: receiver10 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker3189025_
		coverAll:
			{664 to: 667}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189025_
		coverAll:
			{669 to: 675. 705 to: 711}
		evaluating: [
			receiver12
				assert:
					[ | receiver11 |
					receiver11 _ #_coverageTracker3189025_
						cover: (678 to: 690)
						declaredAt: (69 to: 81)
						by: summaryReport.
					#_coverageTracker3189025_
						coverAll:
							{692 to: 702}
						evaluating: [ receiver11 buildResult ]
						thatSends: #buildResult
						to: receiver11 ] value
				equals:
					(#_coverageTracker3189025_
						cover: (713 to: 724)
						declaredAt: (56 to: 67)
						by: originReport) ]
		thatSends: #assert:equals:
		to: receiver12 ] value.! !
!Behavior method!
executeForReceiverTransfer: aReceiverTransfer
	#_coverageTracker3189063_ markAsExecuted.
	#_coverageTracker3189063_
		cover: (59 to: 64)
		declaredAt: (49 to: 54)
		by:
			(result _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189063_
				cover: (49 to: 54)
				declaredAt: (49 to: 54)
				by: result.
			#_coverageTracker3189063_
				coverAll:
					{66 to: 66}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker3189063_
							cover: (69 to: 85)
							declaredAt: (29 to: 45)
							by: aReceiverTransfer.
						#_coverageTracker3189063_
							coverAll:
								{87 to: 91}
							evaluating: [ receiver1 value ]
							thatSends: #value
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
executeForReceiverTransfer: aReceiverTransfer
	#_coverageTracker3189067_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189067_
		cover: (49 to: 54)
		declaredAt: (49 to: 54)
		by: result.
	#_coverageTracker3189067_
		coverAll:
			{56 to: 63}
		evaluating: [
			receiver5 addLast:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker3189067_
					coverAll:
						{65 to: 95}
					byLiteralOrPseudoVariable: 'Entrada por transferencia de '.
				#_coverageTracker3189067_
					coverAll:
						{97 to: 97}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker3189067_
								cover: (99 to: 115)
								declaredAt: (29 to: 45)
								by: aReceiverTransfer.
							#_coverageTracker3189067_
								coverAll:
									{117 to: 121}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker3189067_
								coverAll:
									{123 to: 130}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker3189067_
					coverAll:
						{132 to: 132}
					evaluating: [
						receiver4 ,
							(#_coverageTracker3189067_
								coverAll:
									{134 to: 136}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #addLast:
		to: receiver5 ] value.! !
!Behavior method!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction
	#_coverageTracker3189073_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker3189073_
		coverAll:
			{60 to: 63}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189073_
		coverAll:
			{65 to: 69}
		evaluating: [
			receiver4 deny:
				[ | receiver3 |
				receiver3 _ [ | receiver1 |
				receiver1 _ #_coverageTracker3189073_
					coverAll:
						{72 to: 80}
					by: Portfolio.
				#_coverageTracker3189073_
					coverAll:
						{82 to: 84}
					evaluating: [ receiver1 new ]
					thatSends: #new
					to: receiver1 ] value.
				#_coverageTracker3189073_
					coverAll:
						{86 to: 99}
					evaluating: [
						receiver3 hasRegistered:
							[ | receiver2 |
							receiver2 _ #_coverageTracker3189073_
								coverAll:
									{102 to: 108}
								by: Deposit.
							#_coverageTracker3189073_
								coverAll:
									{110 to: 113}
								evaluating: [
									receiver2 for:
										(#_coverageTracker3189073_
											coverAll:
												{115 to: 117}
											byLiteralOrPseudoVariable: 100) ]
								thatSends: #for:
								to: receiver2 ] value ]
					thatSends: #hasRegistered:
					to: receiver3 ] value ]
		thatSends: #deny:
		to: receiver4 ] value.! !
!Behavior method!
value
	#_coverageTracker3189077_ markAsExecuted.
	^ #_coverageTracker3189077_
		cover: (9 to: 21)
		declaredAt: (9 to: 21)
		by: transferValue.! !
!Behavior method!
test07TransferNetReportWithWithdraw
	| anAccount transferReport |
	#_coverageTracker3189079_ markAsExecuted.
	#_coverageTracker3189079_
		cover: (70 to: 78)
		declaredAt: (40 to: 48)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189079_
				coverAll:
					{83 to: 98}
				by: ReceptiveAccount.
			#_coverageTracker3189079_
				coverAll:
					{100 to: 102}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189079_
		coverAll:
			{107 to: 114}
		by: Withdraw.
	#_coverageTracker3189079_
		coverAll:
			{116 to: 124. 129 to: 131}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3189079_
						coverAll:
							{126 to: 127}
						byLiteralOrPseudoVariable: 20)
				on:
					(#_coverageTracker3189079_
						cover: (133 to: 141)
						declaredAt: (40 to: 48)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3189079_
		cover: (148 to: 161)
		declaredAt: (50 to: 63)
		by:
			(transferReport _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189079_
				coverAll:
					{167 to: 177}
				by: TransferNet.
			#_coverageTracker3189079_
				coverAll:
					{179 to: 182}
				evaluating: [
					receiver3 for:
						(#_coverageTracker3189079_
							cover: (184 to: 192)
							declaredAt: (40 to: 48)
							by: anAccount) ]
				thatSends: #for:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189079_
		coverAll:
			{199 to: 202}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189079_
		coverAll:
			{204 to: 210. 241 to: 247}
		evaluating: [
			receiver5
				assert:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189079_
						cover: (213 to: 226)
						declaredAt: (50 to: 63)
						by: transferReport.
					#_coverageTracker3189079_
						coverAll:
							{228 to: 238}
						evaluating: [ receiver4 buildResult ]
						thatSends: #buildResult
						to: receiver4 ] value
				equals:
					(#_coverageTracker3189079_
						coverAll:
							{249 to: 249}
						byLiteralOrPseudoVariable: 0) ]
		thatSends: #assert:equals:
		to: receiver5 ] value.! !
!Behavior method!
test02AccountsRegisterTransfer
	| originAccount receiverAccount transfer |
	#_coverageTracker3189088_ markAsExecuted.
	#_coverageTracker3189088_
		cover: (78 to: 90)
		declaredAt: (35 to: 47)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189088_
				coverAll:
					{95 to: 110}
				by: ReceptiveAccount.
			#_coverageTracker3189088_
				coverAll:
					{112 to: 114}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189088_
		cover: (118 to: 132)
		declaredAt: (49 to: 63)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189088_
				coverAll:
					{137 to: 152}
				by: ReceptiveAccount.
			#_coverageTracker3189088_
				coverAll:
					{154 to: 156}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189088_
		cover: (163 to: 170)
		declaredAt: (66 to: 73)
		by:
			(transfer _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189088_
				coverAll:
					{175 to: 182}
				by: Transfer.
			#_coverageTracker3189088_
				coverAll:
					{184 to: 188. 204 to: 206. 224 to: 233}
				evaluating: [
					receiver3
						from:
							(#_coverageTracker3189088_
								cover: (190 to: 202)
								declaredAt: (35 to: 47)
								by: originAccount)
						to:
							(#_coverageTracker3189088_
								cover: (208 to: 222)
								declaredAt: (49 to: 63)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3189088_
								coverAll:
									{235 to: 236}
								byLiteralOrPseudoVariable: 50) ]
				thatSends: #from:to:withValue:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189088_
		coverAll:
			{240 to: 243}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189088_
		coverAll:
			{245 to: 251}
		evaluating: [
			receiver5 assert:
				[ | receiver4 |
				receiver4 _ #_coverageTracker3189088_
					cover: (255 to: 262)
					declaredAt: (66 to: 73)
					by: transfer.
				#_coverageTracker3189088_
					coverAll:
						{264 to: 275}
					evaluating: [
						receiver4 isOriginLeg:
							(#_coverageTracker3189088_
								cover: (277 to: 289)
								declaredAt: (35 to: 47)
								by: originAccount) ]
					thatSends: #isOriginLeg:
					to: receiver4 ] value ]
		thatSends: #assert:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker3189088_
		coverAll:
			{295 to: 298}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189088_
		coverAll:
			{300 to: 306}
		evaluating: [
			receiver7 assert:
				[ | receiver6 |
				receiver6 _ #_coverageTracker3189088_
					cover: (310 to: 317)
					declaredAt: (66 to: 73)
					by: transfer.
				#_coverageTracker3189088_
					coverAll:
						{319 to: 332}
					evaluating: [
						receiver6 isReceiverLeg:
							(#_coverageTracker3189088_
								cover: (334 to: 348)
								declaredAt: (49 to: 63)
								by: receiverAccount) ]
					thatSends: #isReceiverLeg:
					to: receiver6 ] value ]
		thatSends: #assert:
		to: receiver7 ] value.! !
!Behavior method!
initializeFor: aTransfer
	#_coverageTracker3189102_ markAsExecuted.
	#_coverageTracker3189102_
		cover: (28 to: 35)
		declaredAt: (28 to: 35)
		by:
			(transfer _ #_coverageTracker3189102_
				cover: (40 to: 48)
				declaredAt: (16 to: 24)
				by: aTransfer).! !
!Behavior method!
initialize
	#_coverageTracker3189102_ markAsExecuted.
	#_coverageTracker3189102_
		cover: (14 to: 21)
		declaredAt: (14 to: 21)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189102_
				coverAll:
					{26 to: 42}
				by: OrderedCollection.
			#_coverageTracker3189102_
				coverAll:
					{44 to: 46}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189102_
		cover: (50 to: 56)
		declaredAt: (50 to: 56)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189102_
				coverAll:
					{61 to: 77}
				by: OrderedCollection.
			#_coverageTracker3189102_
				coverAll:
					{79 to: 81}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
test05NavigationBetweenTransferLegs
	| originAccount receiverAccount transfer origin receiver |
	#_coverageTracker3189106_ markAsExecuted.
	#_coverageTracker3189106_
		cover: (97 to: 109)
		declaredAt: (40 to: 52)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189106_
				coverAll:
					{114 to: 129}
				by: ReceptiveAccount.
			#_coverageTracker3189106_
				coverAll:
					{131 to: 133}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189106_
		cover: (138 to: 152)
		declaredAt: (54 to: 68)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189106_
				coverAll:
					{157 to: 172}
				by: ReceptiveAccount.
			#_coverageTracker3189106_
				coverAll:
					{174 to: 176}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189106_
		cover: (183 to: 190)
		declaredAt: (70 to: 77)
		by:
			(transfer _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189106_
				coverAll:
					{195 to: 202}
				by: Transfer.
			#_coverageTracker3189106_
				coverAll:
					{204 to: 208. 224 to: 226. 244 to: 253}
				evaluating: [
					receiver3
						from:
							(#_coverageTracker3189106_
								cover: (210 to: 222)
								declaredAt: (40 to: 52)
								by: originAccount)
						to:
							(#_coverageTracker3189106_
								cover: (228 to: 242)
								declaredAt: (54 to: 68)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3189106_
								coverAll:
									{255 to: 256}
								byLiteralOrPseudoVariable: 50) ]
				thatSends: #from:to:withValue:
				to: receiver3 ] value).
	#_coverageTracker3189106_
		cover: (262 to: 267)
		declaredAt: (79 to: 84)
		by:
			(origin _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189106_
				cover: (272 to: 279)
				declaredAt: (70 to: 77)
				by: transfer.
			#_coverageTracker3189106_
				coverAll:
					{281 to: 297}
				evaluating: [ receiver4 originTransferLeg ]
				thatSends: #originTransferLeg
				to: receiver4 ] value).
	#_coverageTracker3189106_
		cover: (302 to: 309)
		declaredAt: (86 to: 93)
		by:
			(receiver _ [ | receiver5 |
			receiver5 _ #_coverageTracker3189106_
				cover: (314 to: 321)
				declaredAt: (70 to: 77)
				by: transfer.
			#_coverageTracker3189106_
				coverAll:
					{323 to: 341}
				evaluating: [ receiver5 receiverTransferLeg ]
				thatSends: #receiverTransferLeg
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker3189106_
		coverAll:
			{349 to: 352}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189106_
		coverAll:
			{354 to: 360}
		evaluating: [
			receiver7 assert:
				[ | receiver6 |
				receiver6 _ #_coverageTracker3189106_
					cover: (363 to: 368)
					declaredAt: (79 to: 84)
					by: origin.
				#_coverageTracker3189106_
					coverAll:
						{370 to: 388}
					evaluating: [
						receiver6 isContraryTransfer:
							(#_coverageTracker3189106_
								cover: (390 to: 397)
								declaredAt: (86 to: 93)
								by: receiver) ]
					thatSends: #isContraryTransfer:
					to: receiver6 ] value ]
		thatSends: #assert:
		to: receiver7 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker3189106_
		coverAll:
			{402 to: 405}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189106_
		coverAll:
			{407 to: 413}
		evaluating: [
			receiver9 assert:
				[ | receiver8 |
				receiver8 _ #_coverageTracker3189106_
					cover: (416 to: 423)
					declaredAt: (86 to: 93)
					by: receiver.
				#_coverageTracker3189106_
					coverAll:
						{425 to: 443}
					evaluating: [
						receiver8 isContraryTransfer:
							(#_coverageTracker3189106_
								cover: (445 to: 450)
								declaredAt: (79 to: 84)
								by: origin) ]
					thatSends: #isContraryTransfer:
					to: receiver8 ] value ]
		thatSends: #assert:
		to: receiver9 ] value.! !
!Behavior method!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively
	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	#_coverageTracker3189123_ markAsExecuted.
	#_coverageTracker3189123_
		cover: (185 to: 191)
		declaredAt: (72 to: 78)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189123_
				coverAll:
					{196 to: 211}
				by: ReceptiveAccount.
			#_coverageTracker3189123_
				coverAll:
					{213 to: 215}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189123_
		cover: (219 to: 227)
		declaredAt: (124 to: 132)
		by:
			(portfolio _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189123_
				coverAll:
					{232 to: 240}
				by: Portfolio.
			#_coverageTracker3189123_
				coverAll:
					{242 to: 244}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189123_
		cover: (248 to: 266)
		declaredAt: (80 to: 98)
		by:
			(leftParentPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189123_
				coverAll:
					{271 to: 279}
				by: Portfolio.
			#_coverageTracker3189123_
				coverAll:
					{281 to: 285}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3189123_
							cover: (287 to: 295)
							declaredAt: (124 to: 132)
							by: portfolio) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3189123_
		cover: (300 to: 322)
		declaredAt: (100 to: 122)
		by:
			(leftRootParentPortfolio _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189123_
				coverAll:
					{327 to: 335}
				by: Portfolio.
			#_coverageTracker3189123_
				coverAll:
					{337 to: 341}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3189123_
							cover: (343 to: 361)
							declaredAt: (80 to: 98)
							by: leftParentPortfolio) ]
				thatSends: #with:
				to: receiver4 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189123_
		cover: (365 to: 387)
		declaredAt: (100 to: 122)
		by: leftRootParentPortfolio.
	#_coverageTracker3189123_
		coverAll:
			{389 to: 392}
		evaluating: [
			receiver5 add:
				(#_coverageTracker3189123_
					cover: (394 to: 400)
					declaredAt: (72 to: 78)
					by: account) ]
		thatSends: #add:
		to: receiver5 ] value.
	#_coverageTracker3189123_
		cover: (406 to: 425)
		declaredAt: (134 to: 153)
		by:
			(rightParentPortfolio _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189123_
				coverAll:
					{430 to: 438}
				by: Portfolio.
			#_coverageTracker3189123_
				coverAll:
					{440 to: 444}
				evaluating: [
					receiver6 with:
						(#_coverageTracker3189123_
							cover: (446 to: 454)
							declaredAt: (124 to: 132)
							by: portfolio) ]
				thatSends: #with:
				to: receiver6 ] value).
	#_coverageTracker3189123_
		cover: (459 to: 482)
		declaredAt: (155 to: 178)
		by:
			(rightRootParentPortfolio _ [ | receiver7 |
			receiver7 _ #_coverageTracker3189123_
				coverAll:
					{487 to: 495}
				by: Portfolio.
			#_coverageTracker3189123_
				coverAll:
					{497 to: 501}
				evaluating: [
					receiver7 with:
						(#_coverageTracker3189123_
							cover: (503 to: 522)
							declaredAt: (134 to: 153)
							by: rightParentPortfolio) ]
				thatSends: #with:
				to: receiver7 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3189123_
		cover: (526 to: 549)
		declaredAt: (155 to: 178)
		by: rightRootParentPortfolio.
	#_coverageTracker3189123_
		coverAll:
			{551 to: 554}
		evaluating: [
			receiver8 add:
				(#_coverageTracker3189123_
					cover: (556 to: 562)
					declaredAt: (72 to: 78)
					by: account) ]
		thatSends: #add:
		to: receiver8 ] value.
	[ | receiver16 |
	receiver16 _ #_coverageTracker3189123_
		coverAll:
			{567 to: 570}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189123_
		coverAll:
			{575 to: 581. 612 to: 617. 651 to: 666}
		evaluating: [
			receiver16
				should: [
					[ | receiver9 |
					receiver9 _ #_coverageTracker3189123_
						cover: (585 to: 593)
						declaredAt: (124 to: 132)
						by: portfolio.
					#_coverageTracker3189123_
						coverAll:
							{595 to: 598}
						evaluating: [
							receiver9 add:
								(#_coverageTracker3189123_
									cover: (600 to: 606)
									declaredAt: (72 to: 78)
									by: account) ]
						thatSends: #add:
						to: receiver9 ] value ]
				raise:
					[ | receiver10 |
					receiver10 _ #_coverageTracker3189123_
						coverAll:
							{619 to: 623}
						by: Error.
					#_coverageTracker3189123_
						coverAll:
							{625 to: 625}
						evaluating: [
							receiver10 -
								(#_coverageTracker3189123_
									coverAll:
										{627 to: 646}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver10 ] value
				withExceptionDo: [ :anError |
					[ | receiver13 |
					receiver13 _ #_coverageTracker3189123_
						coverAll:
							{684 to: 687}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189123_
						coverAll:
							{689 to: 695. 736 to: 742}
						evaluating: [
							receiver13
								assert:
									[ | receiver11 |
									receiver11 _ #_coverageTracker3189123_
										coverAll:
											{697 to: 705}
										by: Portfolio.
									#_coverageTracker3189123_
										coverAll:
											{707 to: 734}
										evaluating: [ receiver11 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver11 ] value
								equals:
									[ | receiver12 |
									receiver12 _ #_coverageTracker3189123_
										cover: (744 to: 750)
										declaredAt: (671 to: 677)
										by: anError.
									#_coverageTracker3189123_
										coverAll:
											{752 to: 762}
										evaluating: [ receiver12 messageText ]
										thatSends: #messageText
										to: receiver12 ] value ]
						thatSends: #assert:equals:
						to: receiver13 ] value.
					[ | receiver15 |
					receiver15 _ #_coverageTracker3189123_
						coverAll:
							{768 to: 771}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189123_
						coverAll:
							{773 to: 779}
						evaluating: [
							receiver15 assert:
								[ | receiver14 |
								receiver14 _ #_coverageTracker3189123_
									cover: (781 to: 789)
									declaredAt: (124 to: 132)
									by: portfolio.
								#_coverageTracker3189123_
									coverAll:
										{791 to: 805}
									evaluating: [ receiver14 accountsIsEmpty ]
									thatSends: #accountsIsEmpty
									to: receiver14 ] value ]
						thatSends: #assert:
						to: receiver15 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver16 ] value.! !
!Behavior method!
buildResult
	#_coverageTracker3189152_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker3189152_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: result.
	#_coverageTracker3189152_
		coverAll:
			{21 to: 28}
		evaluating: [
			receiver4 addLast:
				[ | receiver3 |
				receiver3 _ #_coverageTracker3189152_
					coverAll:
						{30 to: 41}
					byLiteralOrPseudoVariable: 'Balance = '.
				#_coverageTracker3189152_
					coverAll:
						{43 to: 43}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker3189152_
								cover: (46 to: 52)
								declaredAt: (46 to: 52)
								by: account.
							#_coverageTracker3189152_
								coverAll:
									{54 to: 60}
								evaluating: [ receiver1 balance ]
								thatSends: #balance
								to: receiver1 ] value.
							#_coverageTracker3189152_
								coverAll:
									{62 to: 69}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value ]
		thatSends: #addLast:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189152_
		cover: (76 to: 82)
		declaredAt: (46 to: 52)
		by: account.
	#_coverageTracker3189152_
		coverAll:
			{84 to: 108}
		evaluating: [
			receiver5 buildFunctionalityResult:
				(#_coverageTracker3189152_
					coverAll:
						{110 to: 113}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #buildFunctionalityResult:
		to: receiver5 ] value.
	^ #_coverageTracker3189152_
		cover: (118 to: 123)
		declaredAt: (14 to: 19)
		by: result.! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker3189159_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189159_
		cover: (48 to: 55)
		declaredAt: (48 to: 55)
		by: accounts.
	#_coverageTracker3189159_
		coverAll:
			{57 to: 59}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker3189159_
					cover: (76 to: 84)
					declaredAt: (64 to: 72)
					by: anAccount.
				#_coverageTracker3189159_
					coverAll:
						{86 to: 103}
					evaluating: [
						receiver1 addTransactionsTo:
							(#_coverageTracker3189159_
								cover: (105 to: 129)
								declaredAt: (20 to: 44)
								by: aCollectionOfTransactions) ]
					thatSends: #addTransactionsTo:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
test01ReportForNewReceptiveAccountPrintBalanceZero
	| anAccount summaryReport |
	#_coverageTracker3189163_ markAsExecuted.
	#_coverageTracker3189163_
		cover: (84 to: 92)
		declaredAt: (56 to: 64)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189163_
				coverAll:
					{97 to: 112}
				by: ReceptiveAccount.
			#_coverageTracker3189163_
				coverAll:
					{114 to: 116}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189163_
		cover: (121 to: 133)
		declaredAt: (66 to: 78)
		by:
			(summaryReport _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189163_
				coverAll:
					{139 to: 152}
				by: AccountSummary.
			#_coverageTracker3189163_
				coverAll:
					{154 to: 157}
				evaluating: [
					receiver2 for:
						(#_coverageTracker3189163_
							cover: (159 to: 167)
							declaredAt: (56 to: 64)
							by: anAccount) ]
				thatSends: #for:
				to: receiver2 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189163_
		coverAll:
			{173 to: 176}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189163_
		coverAll:
			{178 to: 184. 214 to: 220}
		evaluating: [
			receiver5
				assert:
					[ | receiver3 |
					receiver3 _ #_coverageTracker3189163_
						cover: (187 to: 199)
						declaredAt: (66 to: 78)
						by: summaryReport.
					#_coverageTracker3189163_
						coverAll:
							{201 to: 211}
						evaluating: [ receiver3 buildResult ]
						thatSends: #buildResult
						to: receiver3 ] value
				equals:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189163_
						coverAll:
							{223 to: 239}
						by: OrderedCollection.
					#_coverageTracker3189163_
						coverAll:
							{241 to: 245}
						evaluating: [
							receiver4 with:
								(#_coverageTracker3189163_
									coverAll:
										{247 to: 259}
									byLiteralOrPseudoVariable: 'Balance = 0') ]
						thatSends: #with:
						to: receiver4 ] value ]
		thatSends: #assert:equals:
		to: receiver5 ] value.! !
!Behavior method!
test06PortfolioLooksForRegisteredTransactionsRecursively
	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	#_coverageTracker3189171_ markAsExecuted.
	#_coverageTracker3189171_
		cover: (212 to: 233)
		declaredAt: (62 to: 83)
		by:
			(simplePortfolioAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189171_
				coverAll:
					{238 to: 253}
				by: ReceptiveAccount.
			#_coverageTracker3189171_
				coverAll:
					{255 to: 257}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189171_
		cover: (261 to: 289)
		declaredAt: (177 to: 205)
		by:
			(simplePortfolioAccountDeposit _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189171_
				coverAll:
					{294 to: 300}
				by: Deposit.
			#_coverageTracker3189171_
				coverAll:
					{302 to: 310. 316 to: 318}
				evaluating: [
					receiver2
						register:
							(#_coverageTracker3189171_
								coverAll:
									{312 to: 314}
								byLiteralOrPseudoVariable: 100)
						on:
							(#_coverageTracker3189171_
								cover: (320 to: 341)
								declaredAt: (62 to: 83)
								by: simplePortfolioAccount) ]
				thatSends: #register:on:
				to: receiver2 ] value).
	#_coverageTracker3189171_
		cover: (345 to: 359)
		declaredAt: (85 to: 99)
		by:
			(simplePortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189171_
				coverAll:
					{364 to: 372}
				by: Portfolio.
			#_coverageTracker3189171_
				coverAll:
					{374 to: 378}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3189171_
							cover: (380 to: 401)
							declaredAt: (62 to: 83)
							by: simplePortfolioAccount) ]
				thatSends: #with:
				to: receiver3 ] value).
	#_coverageTracker3189171_
		cover: (407 to: 430)
		declaredAt: (101 to: 124)
		by:
			(composedPortfolioAccount _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189171_
				coverAll:
					{435 to: 450}
				by: ReceptiveAccount.
			#_coverageTracker3189171_
				coverAll:
					{452 to: 454}
				evaluating: [ receiver4 new ]
				thatSends: #new
				to: receiver4 ] value).
	#_coverageTracker3189171_
		cover: (458 to: 489)
		declaredAt: (144 to: 175)
		by:
			(composedPortfolioAccountWithdraw _ [ | receiver5 |
			receiver5 _ #_coverageTracker3189171_
				coverAll:
					{494 to: 501}
				by: Withdraw.
			#_coverageTracker3189171_
				coverAll:
					{503 to: 511. 516 to: 518}
				evaluating: [
					receiver5
						register:
							(#_coverageTracker3189171_
								coverAll:
									{513 to: 514}
								byLiteralOrPseudoVariable: 50)
						on:
							(#_coverageTracker3189171_
								cover: (520 to: 543)
								declaredAt: (101 to: 124)
								by: composedPortfolioAccount) ]
				thatSends: #register:on:
				to: receiver5 ] value).
	#_coverageTracker3189171_
		cover: (547 to: 563)
		declaredAt: (126 to: 142)
		by:
			(composedPortfolio _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189171_
				coverAll:
					{568 to: 576}
				by: Portfolio.
			#_coverageTracker3189171_
				coverAll:
					{578 to: 582. 600 to: 604}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3189171_
								cover: (584 to: 598)
								declaredAt: (85 to: 99)
								by: simplePortfolio)
						with:
							(#_coverageTracker3189171_
								cover: (606 to: 629)
								declaredAt: (101 to: 124)
								by: composedPortfolioAccount) ]
				thatSends: #with:with:
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3189171_
		coverAll:
			{635 to: 638}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189171_
		coverAll:
			{640 to: 646}
		evaluating: [
			receiver8 assert:
				[ | receiver7 |
				receiver7 _ #_coverageTracker3189171_
					cover: (649 to: 665)
					declaredAt: (126 to: 142)
					by: composedPortfolio.
				#_coverageTracker3189171_
					coverAll:
						{667 to: 680}
					evaluating: [
						receiver7 hasRegistered:
							(#_coverageTracker3189171_
								cover: (682 to: 710)
								declaredAt: (177 to: 205)
								by: simplePortfolioAccountDeposit) ]
					thatSends: #hasRegistered:
					to: receiver7 ] value ]
		thatSends: #assert:
		to: receiver8 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker3189171_
		coverAll:
			{715 to: 718}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189171_
		coverAll:
			{720 to: 726}
		evaluating: [
			receiver10 assert:
				[ | receiver9 |
				receiver9 _ #_coverageTracker3189171_
					cover: (729 to: 745)
					declaredAt: (126 to: 142)
					by: composedPortfolio.
				#_coverageTracker3189171_
					coverAll:
						{747 to: 760}
					evaluating: [
						receiver9 hasRegistered:
							(#_coverageTracker3189171_
								cover: (762 to: 793)
								declaredAt: (144 to: 175)
								by: composedPortfolioAccountWithdraw) ]
					thatSends: #hasRegistered:
					to: receiver9 ] value ]
		thatSends: #assert:
		to: receiver10 ] value.! !
!Behavior method!
buildNames: aPortfolioTreeReport
	#_coverageTracker3189192_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189192_
		cover: (36 to: 43)
		declaredAt: (36 to: 43)
		by: accounts.
	#_coverageTracker3189192_
		coverAll:
			{45 to: 47}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker3189192_
					cover: (63 to: 71)
					declaredAt: (51 to: 59)
					by: anAccount.
				#_coverageTracker3189192_
					coverAll:
						{73 to: 82}
					evaluating: [
						receiver1 addNameTo:
							(#_coverageTracker3189192_
								cover: (84 to: 103)
								declaredAt: (13 to: 32)
								by: aPortfolioTreeReport) ]
					thatSends: #addNameTo:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker3189196_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker3189196_
		cover: (28 to: 35)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker3189196_
		coverAll:
			{37 to: 37}
		evaluating: [
			receiver1 -
				(#_coverageTracker3189196_
					cover: (39 to: 43)
					declaredAt: (39 to: 43)
					by: value) ]
		thatSends: #-
		to: receiver1 ] value.! !
!Behavior method!
buildNameReportForPortfolio: aPortfolio
	#_coverageTracker3189198_ markAsExecuted.! !
!Behavior method!
add: accountToAdd
	#_coverageTracker3189198_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3189198_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189198_
		coverAll:
			{26 to: 38}
		evaluating: [
			receiver1 assertCanAdd:
				(#_coverageTracker3189198_
					cover: (40 to: 51)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #assertCanAdd:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189198_
		cover: (58 to: 65)
		declaredAt: (58 to: 65)
		by: accounts.
	#_coverageTracker3189198_
		coverAll:
			{67 to: 70}
		evaluating: [
			receiver2 add:
				(#_coverageTracker3189198_
					cover: (72 to: 83)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189198_
		cover: (87 to: 98)
		declaredAt: (6 to: 17)
		by: accountToAdd.
	#_coverageTracker3189198_
		coverAll:
			{100 to: 107}
		evaluating: [
			receiver3 addedTo:
				(#_coverageTracker3189198_
					coverAll:
						{109 to: 112}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addedTo:
		to: receiver3 ] value.! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker3189204_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3189204_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189204_
		coverAll:
			{34 to: 34}
		evaluating: [
			receiver1 =
				(#_coverageTracker3189204_
					cover: (36 to: 44)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker3189204_
		coverAll:
			{46 to: 48}
		evaluating: [
			receiver6 or: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker3189204_
					cover: (52 to: 59)
					declaredAt: (52 to: 59)
					by: accounts.
				#_coverageTracker3189204_
					coverAll:
						{61 to: 71}
					evaluating: [
						receiver5 anySatisfy: [ :composedAccount |
							[ | receiver4 |
							receiver4 _ [ | receiver2 |
							receiver2 _ #_coverageTracker3189204_
								cover: (95 to: 109)
								declaredAt: (76 to: 90)
								by: composedAccount.
							#_coverageTracker3189204_
								coverAll:
									{111 to: 123}
								evaluating: [
									receiver2 isComposedBy:
										(#_coverageTracker3189204_
											cover: (125 to: 133)
											declaredAt: (15 to: 23)
											by: anAccount) ]
								thatSends: #isComposedBy:
								to: receiver2 ] value.
							#_coverageTracker3189204_
								coverAll:
									{136 to: 138}
								evaluating: [
									receiver4 or: [
										[ | receiver3 |
										receiver3 _ #_coverageTracker3189204_
											cover: (142 to: 150)
											declaredAt: (15 to: 23)
											by: anAccount.
										#_coverageTracker3189204_
											coverAll:
												{152 to: 164}
											evaluating: [
												receiver3 isComposedBy:
													(#_coverageTracker3189204_
														cover: (166 to: 180)
														declaredAt: (76 to: 90)
														by: composedAccount) ]
											thatSends: #isComposedBy:
											to: receiver3 ] value ]]
								thatSends: #or:
								to: receiver4 ] value ]]
					thatSends: #anySatisfy:
					to: receiver5 ] value ]]
		thatSends: #or:
		to: receiver6 ] value.! !
!Behavior method!
withTransfer: aTransfer
	#_coverageTracker3189213_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3189213_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189213_
		coverAll:
			{32 to: 34}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3189213_
		coverAll:
			{36 to: 49}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3189213_
					cover: (51 to: 59)
					declaredAt: (15 to: 23)
					by: aTransfer) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
originTransferLeg
	#_coverageTracker3189215_ markAsExecuted.
	^ #_coverageTracker3189215_
		cover: (21 to: 34)
		declaredAt: (21 to: 34)
		by: originTransfer.! !
!Behavior method!
register: aValue on: account
	| transaction |
	#_coverageTracker3189215_ markAsExecuted.
	#_coverageTracker3189215_
		cover: (51 to: 61)
		declaredAt: (34 to: 44)
		by:
			(transaction _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189215_
				coverAll:
					{66 to: 69}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker3189215_
				coverAll:
					{71 to: 74}
				evaluating: [
					receiver1 for:
						(#_coverageTracker3189215_
							cover: (76 to: 81)
							declaredAt: (11 to: 16)
							by: aValue) ]
				thatSends: #for:
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189215_
		cover: (85 to: 91)
		declaredAt: (22 to: 28)
		by: account.
	#_coverageTracker3189215_
		coverAll:
			{93 to: 101}
		evaluating: [
			receiver2 register:
				(#_coverageTracker3189215_
					cover: (103 to: 113)
					declaredAt: (34 to: 44)
					by: transaction) ]
		thatSends: #register:
		to: receiver2 ] value.
	^ #_coverageTracker3189215_
		cover: (122 to: 132)
		declaredAt: (34 to: 44)
		by: transaction.! !
!Behavior method!
register: aTransaction
	#_coverageTracker3189219_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3189219_
		cover: (26 to: 37)
		declaredAt: (26 to: 37)
		by: transactions.
	#_coverageTracker3189219_
		coverAll:
			{39 to: 42}
		evaluating: [
			receiver1 add:
				(#_coverageTracker3189219_
					cover: (44 to: 55)
					declaredAt: (11 to: 22)
					by: aTransaction) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
balance
	#_coverageTracker3189223_ markAsExecuted.
	^ [ | receiver8 |
	receiver8 _ #_coverageTracker3189223_
		cover: (12 to: 23)
		declaredAt: (12 to: 23)
		by: transactions.
	#_coverageTracker3189223_
		coverAll:
			{28 to: 34. 40 to: 44}
		evaluating: [
			receiver8
				inject:
					(#_coverageTracker3189223_
						coverAll:
							{36 to: 36}
						byLiteralOrPseudoVariable: 0)
				into: [ :currentBalance :transaction |
					[ | receiver3 |
					receiver3 _ [ | receiver1 |
					receiver1 _ #_coverageTracker3189223_
						cover: (83 to: 93)
						declaredAt: (65 to: 75)
						by: transaction.
					#_coverageTracker3189223_
						coverAll:
							{95 to: 103}
						evaluating: [
							receiver1 isKindOf:
								(#_coverageTracker3189223_
									coverAll:
										{105 to: 118}
									by: OriginTransfer) ]
						thatSends: #isKindOf:
						to: receiver1 ] value.
					#_coverageTracker3189223_
						coverAll:
							{122 to: 128}
						evaluating: [
							receiver3 ifTrue: [
								[ | receiver2 |
								receiver2 _ #_coverageTracker3189223_
									cover: (131 to: 141)
									declaredAt: (65 to: 75)
									by: transaction.
								#_coverageTracker3189223_
									coverAll:
										{143 to: 156}
									evaluating: [
										receiver2 affectBalance:
											(#_coverageTracker3189223_
												cover: (158 to: 171)
												declaredAt: (49 to: 62)
												by: currentBalance) ]
									thatSends: #affectBalance:
									to: receiver2 ] value ]]
						thatSends: #ifTrue:
						to: receiver3 ] value.
					[ | receiver7 |
					receiver7 _ [ | receiver4 |
					receiver4 _ #_coverageTracker3189223_
						cover: (179 to: 189)
						declaredAt: (65 to: 75)
						by: transaction.
					#_coverageTracker3189223_
						coverAll:
							{191 to: 199}
						evaluating: [
							receiver4 isKindOf:
								(#_coverageTracker3189223_
									coverAll:
										{201 to: 216}
									by: ReceiverTransfer) ]
						thatSends: #isKindOf:
						to: receiver4 ] value.
					#_coverageTracker3189223_
						coverAll:
							{220 to: 226. 277 to: 284}
						evaluating: [
							receiver7
								ifTrue: [
									[ | receiver5 |
									receiver5 _ #_coverageTracker3189223_
										cover: (229 to: 239)
										declaredAt: (65 to: 75)
										by: transaction.
									#_coverageTracker3189223_
										coverAll:
											{241 to: 254}
										evaluating: [
											receiver5 affectBalance:
												(#_coverageTracker3189223_
													cover: (256 to: 269)
													declaredAt: (49 to: 62)
													by: currentBalance) ]
										thatSends: #affectBalance:
										to: receiver5 ] value ]
								ifFalse: [
									[ | receiver6 |
									receiver6 _ #_coverageTracker3189223_
										cover: (290 to: 300)
										declaredAt: (65 to: 75)
										by: transaction.
									#_coverageTracker3189223_
										coverAll:
											{302 to: 315}
										evaluating: [
											receiver6 affectBalance:
												(#_coverageTracker3189223_
													cover: (317 to: 330)
													declaredAt: (49 to: 62)
													by: currentBalance) ]
										thatSends: #affectBalance:
										to: receiver6 ] value ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver7 ] value ]]
		thatSends: #inject:into:
		to: receiver8 ] value.! !
!Behavior method!
executeFunctionality: anAccountFuncionality
	#_coverageTracker3189236_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker3189236_
		cover: (47 to: 67)
		declaredAt: (23 to: 43)
		by: anAccountFuncionality.
	#_coverageTracker3189236_
		coverAll:
			{69 to: 86}
		evaluating: [
			receiver1 executeForDeposit:
				(#_coverageTracker3189236_
					coverAll:
						{88 to: 91}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #executeForDeposit:
		to: receiver1 ] value.! !
!Behavior method!
executeForWithdraw: aWithdraw
	#_coverageTracker3189240_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189240_
		cover: (33 to: 38)
		declaredAt: (33 to: 38)
		by: result.
	#_coverageTracker3189240_
		coverAll:
			{40 to: 47}
		evaluating: [
			receiver5 addLast:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker3189240_
					coverAll:
						{49 to: 65}
					byLiteralOrPseudoVariable: 'Extracción por '.
				#_coverageTracker3189240_
					coverAll:
						{67 to: 67}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker3189240_
								cover: (69 to: 77)
								declaredAt: (21 to: 29)
								by: aWithdraw.
							#_coverageTracker3189240_
								coverAll:
									{79 to: 83}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker3189240_
								coverAll:
									{85 to: 92}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker3189240_
					coverAll:
						{94 to: 94}
					evaluating: [
						receiver4 ,
							(#_coverageTracker3189240_
								coverAll:
									{96 to: 98}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #addLast:
		to: receiver5 ] value.! !
!Behavior method!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd
	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	#_coverageTracker3189250_ markAsExecuted.
	#_coverageTracker3189250_
		cover: (139 to: 151)
		declaredAt: (120 to: 132)
		by:
			(sharedAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189250_
				coverAll:
					{156 to: 171}
				by: ReceptiveAccount.
			#_coverageTracker3189250_
				coverAll:
					{173 to: 175}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189250_
		cover: (179 to: 195)
		declaredAt: (88 to: 104)
		by:
			(portfolioToModify _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189250_
				coverAll:
					{200 to: 208}
				by: Portfolio.
			#_coverageTracker3189250_
				coverAll:
					{210 to: 212}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189250_
		cover: (216 to: 228)
		declaredAt: (106 to: 118)
		by:
			(rootPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189250_
				coverAll:
					{233 to: 241}
				by: Portfolio.
			#_coverageTracker3189250_
				coverAll:
					{243 to: 247. 263 to: 267}
				evaluating: [
					receiver3
						with:
							(#_coverageTracker3189250_
								cover: (249 to: 261)
								declaredAt: (120 to: 132)
								by: sharedAccount)
						with:
							(#_coverageTracker3189250_
								cover: (269 to: 285)
								declaredAt: (88 to: 104)
								by: portfolioToModify) ]
				thatSends: #with:with:
				to: receiver3 ] value).
	#_coverageTracker3189250_
		cover: (289 to: 302)
		declaredAt: (73 to: 86)
		by:
			(portfolioToAdd _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189250_
				coverAll:
					{307 to: 315}
				by: Portfolio.
			#_coverageTracker3189250_
				coverAll:
					{317 to: 321}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3189250_
							cover: (323 to: 335)
							declaredAt: (120 to: 132)
							by: sharedAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker3189250_
		coverAll:
			{341 to: 344}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189250_
		coverAll:
			{349 to: 355. 401 to: 406. 440 to: 455}
		evaluating: [
			receiver12
				should: [
					[ | receiver5 |
					receiver5 _ #_coverageTracker3189250_
						cover: (359 to: 375)
						declaredAt: (88 to: 104)
						by: portfolioToModify.
					#_coverageTracker3189250_
						coverAll:
							{377 to: 380}
						evaluating: [
							receiver5 add:
								(#_coverageTracker3189250_
									cover: (382 to: 395)
									declaredAt: (73 to: 86)
									by: portfolioToAdd) ]
						thatSends: #add:
						to: receiver5 ] value ]
				raise:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3189250_
						coverAll:
							{408 to: 412}
						by: Error.
					#_coverageTracker3189250_
						coverAll:
							{414 to: 414}
						evaluating: [
							receiver6 -
								(#_coverageTracker3189250_
									coverAll:
										{416 to: 435}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver6 ] value
				withExceptionDo: [ :anError |
					[ | receiver9 |
					receiver9 _ #_coverageTracker3189250_
						coverAll:
							{474 to: 477}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189250_
						coverAll:
							{479 to: 485. 526 to: 532}
						evaluating: [
							receiver9
								assert:
									[ | receiver7 |
									receiver7 _ #_coverageTracker3189250_
										coverAll:
											{487 to: 495}
										by: Portfolio.
									#_coverageTracker3189250_
										coverAll:
											{497 to: 524}
										evaluating: [ receiver7 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver7 ] value
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker3189250_
										cover: (534 to: 540)
										declaredAt: (460 to: 466)
										by: anError.
									#_coverageTracker3189250_
										coverAll:
											{542 to: 552}
										evaluating: [ receiver8 messageText ]
										thatSends: #messageText
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker3189250_
						coverAll:
							{558 to: 561}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189250_
						coverAll:
							{563 to: 569}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker3189250_
									cover: (571 to: 587)
									declaredAt: (88 to: 104)
									by: portfolioToModify.
								#_coverageTracker3189250_
									coverAll:
										{589 to: 603}
									evaluating: [ receiver10 accountsIsEmpty ]
									thatSends: #accountsIsEmpty
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
for: anAccount
	#_coverageTracker3189269_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3189269_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189269_
		coverAll:
			{24 to: 26}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker3189269_
		coverAll:
			{28 to: 41}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker3189269_
					cover: (43 to: 51)
					declaredAt: (6 to: 14)
					by: anAccount) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
test11TransferNetReportForPortfolioWithPortfolioWithAccount
	| originAccount receiverAccount portfolioToTest extraPortfolio transferReport |
	#_coverageTracker3189275_ markAsExecuted.
	#_coverageTracker3189275_
		cover: (146 to: 158)
		declaredAt: (65 to: 77)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189275_
				coverAll:
					{163 to: 178}
				by: ReceptiveAccount.
			#_coverageTracker3189275_
				coverAll:
					{180 to: 182}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189275_
		cover: (186 to: 200)
		declaredAt: (79 to: 93)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189275_
				coverAll:
					{205 to: 220}
				by: ReceptiveAccount.
			#_coverageTracker3189275_
				coverAll:
					{222 to: 224}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189275_
		coverAll:
			{231 to: 238}
		by: Transfer.
	#_coverageTracker3189275_
		coverAll:
			{240 to: 244. 260 to: 262. 280 to: 289}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3189275_
						cover: (246 to: 258)
						declaredAt: (65 to: 77)
						by: originAccount)
				to:
					(#_coverageTracker3189275_
						cover: (264 to: 278)
						declaredAt: (79 to: 93)
						by: receiverAccount)
				withValue:
					(#_coverageTracker3189275_
						coverAll:
							{291 to: 292}
						byLiteralOrPseudoVariable: 50) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3189275_
		cover: (296 to: 309)
		declaredAt: (111 to: 124)
		by:
			(extraPortfolio _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189275_
				coverAll:
					{314 to: 322}
				by: Portfolio.
			#_coverageTracker3189275_
				coverAll:
					{324 to: 328}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3189275_
							cover: (330 to: 344)
							declaredAt: (79 to: 93)
							by: receiverAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	#_coverageTracker3189275_
		cover: (348 to: 362)
		declaredAt: (95 to: 109)
		by:
			(portfolioToTest _ [ | receiver5 |
			receiver5 _ #_coverageTracker3189275_
				coverAll:
					{367 to: 375}
				by: Portfolio.
			#_coverageTracker3189275_
				coverAll:
					{377 to: 381}
				evaluating: [
					receiver5 with:
						(#_coverageTracker3189275_
							cover: (383 to: 396)
							declaredAt: (111 to: 124)
							by: extraPortfolio) ]
				thatSends: #with:
				to: receiver5 ] value).
	#_coverageTracker3189275_
		cover: (403 to: 416)
		declaredAt: (126 to: 139)
		by:
			(transferReport _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189275_
				coverAll:
					{422 to: 432}
				by: TransferNet.
			#_coverageTracker3189275_
				coverAll:
					{434 to: 437}
				evaluating: [
					receiver6 for:
						(#_coverageTracker3189275_
							cover: (439 to: 453)
							declaredAt: (95 to: 109)
							by: portfolioToTest) ]
				thatSends: #for:
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3189275_
		coverAll:
			{460 to: 463}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189275_
		coverAll:
			{465 to: 471. 503 to: 509}
		evaluating: [
			receiver8
				assert:
					[ | receiver7 |
					receiver7 _ #_coverageTracker3189275_
						cover: (474 to: 487)
						declaredAt: (126 to: 139)
						by: transferReport.
					#_coverageTracker3189275_
						coverAll:
							{489 to: 499}
						evaluating: [ receiver7 buildResult ]
						thatSends: #buildResult
						to: receiver7 ] value
				equals:
					(#_coverageTracker3189275_
						coverAll:
							{511 to: 512}
						byLiteralOrPseudoVariable: 50) ]
		thatSends: #assert:equals:
		to: receiver8 ] value.! !
!Behavior method!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount
	| account simplePortfolio composedPortfolio |
	#_coverageTracker3189292_ markAsExecuted.
	#_coverageTracker3189292_
		cover: (108 to: 114)
		declaredAt: (61 to: 67)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189292_
				coverAll:
					{119 to: 134}
				by: ReceptiveAccount.
			#_coverageTracker3189292_
				coverAll:
					{136 to: 138}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189292_
		cover: (142 to: 156)
		declaredAt: (69 to: 83)
		by:
			(simplePortfolio _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189292_
				coverAll:
					{161 to: 169}
				by: Portfolio.
			#_coverageTracker3189292_
				coverAll:
					{171 to: 173}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189292_
		cover: (177 to: 193)
		declaredAt: (85 to: 101)
		by:
			(composedPortfolio _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189292_
				coverAll:
					{198 to: 206}
				by: Portfolio.
			#_coverageTracker3189292_
				coverAll:
					{208 to: 212}
				evaluating: [
					receiver3 with:
						(#_coverageTracker3189292_
							cover: (214 to: 228)
							declaredAt: (69 to: 83)
							by: simplePortfolio) ]
				thatSends: #with:
				to: receiver3 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker3189292_
		cover: (232 to: 248)
		declaredAt: (85 to: 101)
		by: composedPortfolio.
	#_coverageTracker3189292_
		coverAll:
			{250 to: 253}
		evaluating: [
			receiver4 add:
				(#_coverageTracker3189292_
					cover: (255 to: 261)
					declaredAt: (61 to: 67)
					by: account) ]
		thatSends: #add:
		to: receiver4 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker3189292_
		coverAll:
			{267 to: 270}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189292_
		coverAll:
			{275 to: 281. 318 to: 323. 357 to: 372}
		evaluating: [
			receiver12
				should: [
					[ | receiver5 |
					receiver5 _ #_coverageTracker3189292_
						cover: (285 to: 299)
						declaredAt: (69 to: 83)
						by: simplePortfolio.
					#_coverageTracker3189292_
						coverAll:
							{301 to: 304}
						evaluating: [
							receiver5 add:
								(#_coverageTracker3189292_
									cover: (306 to: 312)
									declaredAt: (61 to: 67)
									by: account) ]
						thatSends: #add:
						to: receiver5 ] value ]
				raise:
					[ | receiver6 |
					receiver6 _ #_coverageTracker3189292_
						coverAll:
							{325 to: 329}
						by: Error.
					#_coverageTracker3189292_
						coverAll:
							{331 to: 331}
						evaluating: [
							receiver6 -
								(#_coverageTracker3189292_
									coverAll:
										{333 to: 352}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver6 ] value
				withExceptionDo: [ :anError |
					[ | receiver9 |
					receiver9 _ #_coverageTracker3189292_
						coverAll:
							{390 to: 393}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189292_
						coverAll:
							{395 to: 401. 442 to: 448}
						evaluating: [
							receiver9
								assert:
									[ | receiver7 |
									receiver7 _ #_coverageTracker3189292_
										coverAll:
											{403 to: 411}
										by: Portfolio.
									#_coverageTracker3189292_
										coverAll:
											{413 to: 440}
										evaluating: [ receiver7 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver7 ] value
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker3189292_
										cover: (450 to: 456)
										declaredAt: (377 to: 383)
										by: anError.
									#_coverageTracker3189292_
										coverAll:
											{458 to: 468}
										evaluating: [ receiver8 messageText ]
										thatSends: #messageText
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker3189292_
						coverAll:
							{474 to: 477}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189292_
						coverAll:
							{479 to: 485}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker3189292_
									cover: (487 to: 501)
									declaredAt: (69 to: 83)
									by: simplePortfolio.
								#_coverageTracker3189292_
									coverAll:
										{503 to: 517}
									evaluating: [ receiver10 accountsIsEmpty ]
									thatSends: #accountsIsEmpty
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
test10ReportForPortfolioWithAccountWithOriginTransfer
	| portfolioWithOrigin summaryReport originReport originAccount receiverAccount |
	#_coverageTracker3189373_ markAsExecuted.
	#_coverageTracker3189373_
		cover: (143 to: 155)
		declaredAt: (106 to: 118)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189373_
				coverAll:
					{160 to: 175}
				by: ReceptiveAccount.
			#_coverageTracker3189373_
				coverAll:
					{177 to: 179}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189373_
		cover: (184 to: 198)
		declaredAt: (120 to: 134)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189373_
				coverAll:
					{203 to: 218}
				by: ReceptiveAccount.
			#_coverageTracker3189373_
				coverAll:
					{220 to: 222}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189373_
		coverAll:
			{226 to: 233}
		by: Transfer.
	#_coverageTracker3189373_
		coverAll:
			{235 to: 239. 255 to: 257. 275 to: 284}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3189373_
						cover: (241 to: 253)
						declaredAt: (106 to: 118)
						by: originAccount)
				to:
					(#_coverageTracker3189373_
						cover: (259 to: 273)
						declaredAt: (120 to: 134)
						by: receiverAccount)
				withValue:
					(#_coverageTracker3189373_
						coverAll:
							{286 to: 287}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3189373_
		cover: (293 to: 311)
		declaredAt: (59 to: 77)
		by:
			(portfolioWithOrigin _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189373_
				coverAll:
					{316 to: 324}
				by: Portfolio.
			#_coverageTracker3189373_
				coverAll:
					{326 to: 330}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3189373_
							cover: (332 to: 344)
							declaredAt: (106 to: 118)
							by: originAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	#_coverageTracker3189373_
		cover: (348 to: 360)
		declaredAt: (79 to: 91)
		by:
			(summaryReport _ [ | receiver5 |
			receiver5 _ #_coverageTracker3189373_
				coverAll:
					{366 to: 379}
				by: AccountSummary.
			#_coverageTracker3189373_
				coverAll:
					{381 to: 384}
				evaluating: [
					receiver5 for:
						(#_coverageTracker3189373_
							cover: (386 to: 404)
							declaredAt: (59 to: 77)
							by: portfolioWithOrigin) ]
				thatSends: #for:
				to: receiver5 ] value).
	#_coverageTracker3189373_
		cover: (410 to: 421)
		declaredAt: (93 to: 104)
		by:
			(originReport _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189373_
				coverAll:
					{426 to: 442}
				by: OrderedCollection.
			#_coverageTracker3189373_
				coverAll:
					{444 to: 448. 465 to: 469}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3189373_
								coverAll:
									{449 to: 463}
								byLiteralOrPseudoVariable: 'Balance = -20')
						with:
							(#_coverageTracker3189373_
								coverAll:
									{471 to: 503}
								byLiteralOrPseudoVariable: 'Salida por transferencia de 20.') ]
				thatSends: #with:with:
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3189373_
		coverAll:
			{509 to: 512}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189373_
		coverAll:
			{514 to: 520. 550 to: 556}
		evaluating: [
			receiver8
				assert:
					[ | receiver7 |
					receiver7 _ #_coverageTracker3189373_
						cover: (523 to: 535)
						declaredAt: (79 to: 91)
						by: summaryReport.
					#_coverageTracker3189373_
						coverAll:
							{537 to: 547}
						evaluating: [ receiver7 buildResult ]
						thatSends: #buildResult
						to: receiver7 ] value
				equals:
					(#_coverageTracker3189373_
						cover: (558 to: 569)
						declaredAt: (93 to: 104)
						by: originReport) ]
		thatSends: #assert:equals:
		to: receiver8 ] value.! !
!Behavior method!
test07ReportForNewPortfolio
	| aPortfolio summaryReport |
	#_coverageTracker3189392_ markAsExecuted.
	#_coverageTracker3189392_
		cover: (63 to: 72)
		declaredAt: (33 to: 42)
		by:
			(aPortfolio _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189392_
				coverAll:
					{77 to: 85}
				by: Portfolio.
			#_coverageTracker3189392_
				coverAll:
					{87 to: 89}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189392_
		cover: (93 to: 105)
		declaredAt: (44 to: 56)
		by:
			(summaryReport _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189392_
				coverAll:
					{111 to: 124}
				by: AccountSummary.
			#_coverageTracker3189392_
				coverAll:
					{126 to: 129}
				evaluating: [
					receiver2 for:
						(#_coverageTracker3189392_
							cover: (131 to: 140)
							declaredAt: (33 to: 42)
							by: aPortfolio) ]
				thatSends: #for:
				to: receiver2 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189392_
		coverAll:
			{146 to: 149}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189392_
		coverAll:
			{151 to: 157. 187 to: 193}
		evaluating: [
			receiver5
				assert:
					[ | receiver3 |
					receiver3 _ #_coverageTracker3189392_
						cover: (160 to: 172)
						declaredAt: (44 to: 56)
						by: summaryReport.
					#_coverageTracker3189392_
						coverAll:
							{174 to: 184}
						evaluating: [ receiver3 buildResult ]
						thatSends: #buildResult
						to: receiver3 ] value
				equals:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189392_
						coverAll:
							{196 to: 212}
						by: OrderedCollection.
					#_coverageTracker3189392_
						coverAll:
							{214 to: 218}
						evaluating: [
							receiver4 with:
								(#_coverageTracker3189392_
									coverAll:
										{220 to: 232}
									byLiteralOrPseudoVariable: 'Balance = 0') ]
						thatSends: #with:
						to: receiver4 ] value ]
		thatSends: #assert:equals:
		to: receiver5 ] value.! !
!Behavior method!
test11ReportForPortfolioWithAccountWithReceiverTransfer
	| portfolioWithReceiver summaryReport receiverReport originAccount receiverAccount |
	#_coverageTracker3189400_ markAsExecuted.
	#_coverageTracker3189400_
		cover: (149 to: 161)
		declaredAt: (112 to: 124)
		by:
			(originAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189400_
				coverAll:
					{166 to: 181}
				by: ReceptiveAccount.
			#_coverageTracker3189400_
				coverAll:
					{183 to: 185}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189400_
		cover: (190 to: 204)
		declaredAt: (126 to: 140)
		by:
			(receiverAccount _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189400_
				coverAll:
					{209 to: 224}
				by: ReceptiveAccount.
			#_coverageTracker3189400_
				coverAll:
					{226 to: 228}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189400_
		coverAll:
			{232 to: 239}
		by: Transfer.
	#_coverageTracker3189400_
		coverAll:
			{241 to: 245. 261 to: 263. 281 to: 290}
		evaluating: [
			receiver3
				from:
					(#_coverageTracker3189400_
						cover: (247 to: 259)
						declaredAt: (112 to: 124)
						by: originAccount)
				to:
					(#_coverageTracker3189400_
						cover: (265 to: 279)
						declaredAt: (126 to: 140)
						by: receiverAccount)
				withValue:
					(#_coverageTracker3189400_
						coverAll:
							{292 to: 293}
						byLiteralOrPseudoVariable: 20) ]
		thatSends: #from:to:withValue:
		to: receiver3 ] value.
	#_coverageTracker3189400_
		cover: (299 to: 319)
		declaredAt: (61 to: 81)
		by:
			(portfolioWithReceiver _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189400_
				coverAll:
					{324 to: 332}
				by: Portfolio.
			#_coverageTracker3189400_
				coverAll:
					{334 to: 338}
				evaluating: [
					receiver4 with:
						(#_coverageTracker3189400_
							cover: (340 to: 354)
							declaredAt: (126 to: 140)
							by: receiverAccount) ]
				thatSends: #with:
				to: receiver4 ] value).
	#_coverageTracker3189400_
		cover: (358 to: 370)
		declaredAt: (83 to: 95)
		by:
			(summaryReport _ [ | receiver5 |
			receiver5 _ #_coverageTracker3189400_
				coverAll:
					{376 to: 389}
				by: AccountSummary.
			#_coverageTracker3189400_
				coverAll:
					{391 to: 394}
				evaluating: [
					receiver5 for:
						(#_coverageTracker3189400_
							cover: (396 to: 416)
							declaredAt: (61 to: 81)
							by: portfolioWithReceiver) ]
				thatSends: #for:
				to: receiver5 ] value).
	#_coverageTracker3189400_
		cover: (422 to: 435)
		declaredAt: (97 to: 110)
		by:
			(receiverReport _ [ | receiver6 |
			receiver6 _ #_coverageTracker3189400_
				coverAll:
					{440 to: 456}
				by: OrderedCollection.
			#_coverageTracker3189400_
				coverAll:
					{458 to: 462. 479 to: 483}
				evaluating: [
					receiver6
						with:
							(#_coverageTracker3189400_
								coverAll:
									{464 to: 477}
								byLiteralOrPseudoVariable: 'Balance = 20')
						with:
							(#_coverageTracker3189400_
								coverAll:
									{485 to: 518}
								byLiteralOrPseudoVariable: 'Entrada por transferencia de 20.') ]
				thatSends: #with:with:
				to: receiver6 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker3189400_
		coverAll:
			{524 to: 527}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189400_
		coverAll:
			{529 to: 535. 565 to: 571}
		evaluating: [
			receiver8
				assert:
					[ | receiver7 |
					receiver7 _ #_coverageTracker3189400_
						cover: (538 to: 550)
						declaredAt: (83 to: 95)
						by: summaryReport.
					#_coverageTracker3189400_
						coverAll:
							{552 to: 562}
						evaluating: [ receiver7 buildResult ]
						thatSends: #buildResult
						to: receiver7 ] value
				equals:
					(#_coverageTracker3189400_
						cover: (573 to: 586)
						declaredAt: (97 to: 110)
						by: receiverReport) ]
		thatSends: #assert:equals:
		to: receiver8 ] value.! !
!Behavior method!
executeForWithdraw: aWithdraw
	#_coverageTracker3189417_ markAsExecuted.
	#_coverageTracker3189417_
		cover: (43 to: 48)
		declaredAt: (33 to: 38)
		by:
			(result _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189417_
				cover: (33 to: 38)
				declaredAt: (33 to: 38)
				by: result.
			#_coverageTracker3189417_
				coverAll:
					{50 to: 50}
				evaluating: [
					receiver1 +
						(#_coverageTracker3189417_
							coverAll:
								{52 to: 52}
							byLiteralOrPseudoVariable: 0) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
receiverTransferLeg
	#_coverageTracker3189421_ markAsExecuted.
	^ #_coverageTracker3189421_
		cover: (23 to: 38)
		declaredAt: (23 to: 38)
		by: receiverTransfer.! !
!Behavior method!
test03ReportForReceptiveAccountWithWithdrawPrintWithdrawValue
	| anAccount reportPrinted summaryReport |
	#_coverageTracker3189423_ markAsExecuted.
	#_coverageTracker3189423_
		cover: (110 to: 118)
		declaredAt: (67 to: 75)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189423_
				coverAll:
					{123 to: 138}
				by: ReceptiveAccount.
			#_coverageTracker3189423_
				coverAll:
					{140 to: 142}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189423_
		coverAll:
			{147 to: 154}
		by: Withdraw.
	#_coverageTracker3189423_
		coverAll:
			{156 to: 164. 169 to: 171}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3189423_
						coverAll:
							{166 to: 167}
						byLiteralOrPseudoVariable: 50)
				on:
					(#_coverageTracker3189423_
						cover: (173 to: 181)
						declaredAt: (67 to: 75)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3189423_
		cover: (187 to: 199)
		declaredAt: (91 to: 103)
		by:
			(summaryReport _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189423_
				coverAll:
					{204 to: 217}
				by: AccountSummary.
			#_coverageTracker3189423_
				coverAll:
					{219 to: 222}
				evaluating: [
					receiver3 for:
						(#_coverageTracker3189423_
							cover: (224 to: 232)
							declaredAt: (67 to: 75)
							by: anAccount) ]
				thatSends: #for:
				to: receiver3 ] value).
	#_coverageTracker3189423_
		cover: (236 to: 248)
		declaredAt: (77 to: 89)
		by:
			(reportPrinted _ [ | receiver4 |
			receiver4 _ #_coverageTracker3189423_
				coverAll:
					{253 to: 269}
				by: OrderedCollection.
			#_coverageTracker3189423_
				coverAll:
					{271 to: 275. 292 to: 296}
				evaluating: [
					receiver4
						with:
							(#_coverageTracker3189423_
								coverAll:
									{276 to: 290}
								byLiteralOrPseudoVariable: 'Balance = -50')
						with:
							(#_coverageTracker3189423_
								coverAll:
									{298 to: 317}
								byLiteralOrPseudoVariable: 'Extracción por 50.') ]
				thatSends: #with:with:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker3189423_
		coverAll:
			{323 to: 326}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189423_
		coverAll:
			{328 to: 334. 364 to: 370}
		evaluating: [
			receiver6
				assert:
					[ | receiver5 |
					receiver5 _ #_coverageTracker3189423_
						cover: (337 to: 349)
						declaredAt: (91 to: 103)
						by: summaryReport.
					#_coverageTracker3189423_
						coverAll:
							{351 to: 361}
						evaluating: [ receiver5 buildResult ]
						thatSends: #buildResult
						to: receiver5 ] value
				equals:
					(#_coverageTracker3189423_
						cover: (372 to: 384)
						declaredAt: (77 to: 89)
						by: reportPrinted) ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
isContraryTransfer: aTransferLeg
	#_coverageTracker3189442_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker3189442_
		cover: (37 to: 44)
		declaredAt: (37 to: 44)
		by: transfer.
	#_coverageTracker3189442_
		coverAll:
			{46 to: 62}
		evaluating: [ receiver1 originTransferLeg ]
		thatSends: #originTransferLeg
		to: receiver1 ] value.
	#_coverageTracker3189442_
		coverAll:
			{64 to: 64}
		evaluating: [
			receiver2 =
				(#_coverageTracker3189442_
					cover: (66 to: 77)
					declaredAt: (21 to: 32)
					by: aTransferLeg) ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
test01BalanceOfPortfolioWithoutAccountsIsZero
	#_coverageTracker3189445_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker3189445_
		coverAll:
			{49 to: 52}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189445_
		coverAll:
			{54 to: 60. 64 to: 70}
		evaluating: [
			receiver3
				assert:
					(#_coverageTracker3189445_
						coverAll:
							{62 to: 62}
						byLiteralOrPseudoVariable: 0)
				equals:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker3189445_
						coverAll:
							{72 to: 80}
						by: Portfolio.
					#_coverageTracker3189445_
						coverAll:
							{82 to: 84}
						evaluating: [ receiver1 new ]
						thatSends: #new
						to: receiver1 ] value.
					#_coverageTracker3189445_
						coverAll:
							{86 to: 92}
						evaluating: [ receiver2 balance ]
						thatSends: #balance
						to: receiver2 ] value ]
		thatSends: #assert:equals:
		to: receiver3 ] value.! !
!Behavior method!
affectBalance: currentBalance
	#_coverageTracker3189449_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker3189449_
		cover: (34 to: 47)
		declaredAt: (16 to: 29)
		by: currentBalance.
	#_coverageTracker3189449_
		coverAll:
			{49 to: 49}
		evaluating: [
			receiver2 -
				[ | receiver1 |
				receiver1 _ #_coverageTracker3189449_
					cover: (53 to: 60)
					declaredAt: (53 to: 60)
					by: transfer.
				#_coverageTracker3189449_
					coverAll:
						{62 to: 66}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #-
		to: receiver2 ] value.! !
!Behavior method!
initializeNamed: name
	#_coverageTracker3189451_ markAsExecuted.
	#_coverageTracker3189451_
		cover: (25 to: 32)
		declaredAt: (25 to: 32)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189451_
				coverAll:
					{37 to: 53}
				by: OrderedCollection.
			#_coverageTracker3189451_
				coverAll:
					{55 to: 57}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189451_
		cover: (61 to: 67)
		declaredAt: (61 to: 67)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189451_
				coverAll:
					{72 to: 88}
				by: OrderedCollection.
			#_coverageTracker3189451_
				coverAll:
					{90 to: 92}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker3189451_
		cover: (96 to: 108)
		declaredAt: (96 to: 108)
		by:
			(portfolioName _ #_coverageTracker3189451_
				cover: (113 to: 116)
				declaredAt: (18 to: 21)
				by: name).! !
!Behavior method!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce
	| account portfolio |
	#_coverageTracker3189457_ markAsExecuted.
	#_coverageTracker3189457_
		cover: (83 to: 89)
		declaredAt: (60 to: 66)
		by:
			(account _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189457_
				coverAll:
					{94 to: 109}
				by: ReceptiveAccount.
			#_coverageTracker3189457_
				coverAll:
					{111 to: 113}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker3189457_
		cover: (117 to: 125)
		declaredAt: (68 to: 76)
		by:
			(portfolio _ [ | receiver2 |
			receiver2 _ #_coverageTracker3189457_
				coverAll:
					{130 to: 138}
				by: Portfolio.
			#_coverageTracker3189457_
				coverAll:
					{140 to: 144}
				evaluating: [
					receiver2 with:
						(#_coverageTracker3189457_
							cover: (146 to: 152)
							declaredAt: (60 to: 66)
							by: account) ]
				thatSends: #with:
				to: receiver2 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker3189457_
		coverAll:
			{158 to: 161}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189457_
		coverAll:
			{166 to: 172. 203 to: 208. 242 to: 257}
		evaluating: [
			receiver12
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker3189457_
						cover: (176 to: 184)
						declaredAt: (68 to: 76)
						by: portfolio.
					#_coverageTracker3189457_
						coverAll:
							{186 to: 189}
						evaluating: [
							receiver3 add:
								(#_coverageTracker3189457_
									cover: (191 to: 197)
									declaredAt: (60 to: 66)
									by: account) ]
						thatSends: #add:
						to: receiver3 ] value ]
				raise:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189457_
						coverAll:
							{210 to: 214}
						by: Error.
					#_coverageTracker3189457_
						coverAll:
							{216 to: 216}
						evaluating: [
							receiver4 -
								(#_coverageTracker3189457_
									coverAll:
										{218 to: 237}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver4 ] value
				withExceptionDo: [ :anError |
					[ | receiver7 |
					receiver7 _ #_coverageTracker3189457_
						coverAll:
							{275 to: 278}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189457_
						coverAll:
							{280 to: 286. 327 to: 333}
						evaluating: [
							receiver7
								assert:
									[ | receiver5 |
									receiver5 _ #_coverageTracker3189457_
										coverAll:
											{288 to: 296}
										by: Portfolio.
									#_coverageTracker3189457_
										coverAll:
											{298 to: 325}
										evaluating: [ receiver5 canNotAddAccountErrorMessage ]
										thatSends: #canNotAddAccountErrorMessage
										to: receiver5 ] value
								equals:
									[ | receiver6 |
									receiver6 _ #_coverageTracker3189457_
										cover: (335 to: 341)
										declaredAt: (262 to: 268)
										by: anError.
									#_coverageTracker3189457_
										coverAll:
											{343 to: 353}
										evaluating: [ receiver6 messageText ]
										thatSends: #messageText
										to: receiver6 ] value ]
						thatSends: #assert:equals:
						to: receiver7 ] value.
					[ | receiver9 |
					receiver9 _ #_coverageTracker3189457_
						coverAll:
							{359 to: 362}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189457_
						coverAll:
							{364 to: 370. 374 to: 380}
						evaluating: [
							receiver9
								assert:
									(#_coverageTracker3189457_
										coverAll:
											{372 to: 372}
										byLiteralOrPseudoVariable: 1)
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker3189457_
										cover: (382 to: 390)
										declaredAt: (68 to: 76)
										by: portfolio.
									#_coverageTracker3189457_
										coverAll:
											{392 to: 403}
										evaluating: [ receiver8 accountsSize ]
										thatSends: #accountsSize
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker3189457_
						coverAll:
							{409 to: 412}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker3189457_
						coverAll:
							{414 to: 420}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker3189457_
									cover: (423 to: 431)
									declaredAt: (68 to: 76)
									by: portfolio.
								#_coverageTracker3189457_
									coverAll:
										{433 to: 449}
									evaluating: [
										receiver10 accountsIncludes:
											(#_coverageTracker3189457_
												cover: (451 to: 457)
												declaredAt: (60 to: 66)
												by: account) ]
									thatSends: #accountsIncludes:
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
test06TransferNetReportWithDeposit
	| anAccount transferReport |
	#_coverageTracker3189476_ markAsExecuted.
	#_coverageTracker3189476_
		cover: (70 to: 78)
		declaredAt: (40 to: 48)
		by:
			(anAccount _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189476_
				coverAll:
					{83 to: 98}
				by: ReceptiveAccount.
			#_coverageTracker3189476_
				coverAll:
					{100 to: 102}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker3189476_
		coverAll:
			{107 to: 113}
		by: Deposit.
	#_coverageTracker3189476_
		coverAll:
			{115 to: 123. 128 to: 130}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker3189476_
						coverAll:
							{125 to: 126}
						byLiteralOrPseudoVariable: 10)
				on:
					(#_coverageTracker3189476_
						cover: (132 to: 140)
						declaredAt: (40 to: 48)
						by: anAccount) ]
		thatSends: #register:on:
		to: receiver2 ] value.
	#_coverageTracker3189476_
		cover: (147 to: 160)
		declaredAt: (50 to: 63)
		by:
			(transferReport _ [ | receiver3 |
			receiver3 _ #_coverageTracker3189476_
				coverAll:
					{166 to: 176}
				by: TransferNet.
			#_coverageTracker3189476_
				coverAll:
					{178 to: 181}
				evaluating: [
					receiver3 for:
						(#_coverageTracker3189476_
							cover: (183 to: 191)
							declaredAt: (40 to: 48)
							by: anAccount) ]
				thatSends: #for:
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker3189476_
		coverAll:
			{198 to: 201}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189476_
		coverAll:
			{203 to: 209. 240 to: 246}
		evaluating: [
			receiver5
				assert:
					[ | receiver4 |
					receiver4 _ #_coverageTracker3189476_
						cover: (212 to: 225)
						declaredAt: (50 to: 63)
						by: transferReport.
					#_coverageTracker3189476_
						coverAll:
							{227 to: 237}
						evaluating: [ receiver4 buildResult ]
						thatSends: #buildResult
						to: receiver4 ] value
				equals:
					(#_coverageTracker3189476_
						coverAll:
							{248 to: 248}
						byLiteralOrPseudoVariable: 0) ]
		thatSends: #assert:equals:
		to: receiver5 ] value.! !
!Behavior method!
from: originAccount to: receiverAccount withValue: transferValue
	| transfer |
	#_coverageTracker3189484_ markAsExecuted.
	#_coverageTracker3189484_
		cover: (80 to: 87)
		declaredAt: (69 to: 76)
		by:
			(transfer _ [ | receiver2 |
			receiver2 _ [ | receiver1 |
			receiver1 _ #_coverageTracker3189484_
				coverAll:
					{92 to: 95}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker3189484_
				coverAll:
					{97 to: 99}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value.
			#_coverageTracker3189484_
				coverAll:
					{101 to: 115. 131 to: 133. 151 to: 160}
				evaluating: [
					receiver2
						initializeFrom:
							(#_coverageTracker3189484_
								cover: (117 to: 129)
								declaredAt: (7 to: 19)
								by: originAccount)
						to:
							(#_coverageTracker3189484_
								cover: (135 to: 149)
								declaredAt: (25 to: 39)
								by: receiverAccount)
						withValue:
							(#_coverageTracker3189484_
								cover: (162 to: 174)
								declaredAt: (52 to: 64)
								by: transferValue) ]
				thatSends: #initializeFrom:to:withValue:
				to: receiver2 ] value).
	^ #_coverageTracker3189484_
		cover: (318 to: 325)
		declaredAt: (69 to: 76)
		by: transfer.! !
!Behavior method!
invalidTransferValueError
	#_coverageTracker3189490_ markAsExecuted.
	^ #_coverageTracker3189490_
		coverAll:
			{30 to: 60}
		byLiteralOrPseudoVariable: 'Transferencia must be positve'.! !
!Behavior method!
with: anAccount
	#_coverageTracker3189490_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker3189490_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker3189490_
		coverAll:
			{25 to: 27}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker3189490_
		coverAll:
			{32 to: 35}
		evaluating: [
			receiver2 add:
				(#_coverageTracker3189490_
					cover: (37 to: 45)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker3189490_
		coverAll:
			{50 to: 57}
		evaluating: [ receiver3 yourself ]
		thatSends: #yourself
		to: receiver3 ] value ] value.! !
!Behavior method!
initializeFor: aTransfer
	#_coverageTracker3189495_ markAsExecuted.
	#_coverageTracker3189495_
		cover: (28 to: 35)
		declaredAt: (28 to: 35)
		by:
			(transfer _ #_coverageTracker3189495_
				cover: (40 to: 48)
				declaredAt: (16 to: 24)
				by: aTransfer).! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:38:59'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:38:59'!
FAILURE!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:39:58' prior: 50682910!
buildResult
	result addLast: account name.
	account buildName: self.
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:40:00'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:40:09'!
buildName: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:40:54' prior: 50690440!
buildResult
	
	account buildName: self.
	
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:40:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:41:45' prior: 50690450!
buildName: aPortfolioTreeReport 
	aPortfolioTreeReport  printPortfolioName: self.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:41:48'!
ERROR!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:41:54'!
printPortfolioName: aPortfolio 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:42:03' prior: 50690474!
printPortfolioName: aPortfolio 
	result addLast: account name.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:42:05'!
FAILURE!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:43:44' prior: 50690480!
printPortfolioName: aPortfolio 
	result addLast: account name.
	aPortfolio printAccountNames: self.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:43:47'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:43:54'!
printAccountNames: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:44:54' prior: 50690500!
printAccountNames: aPortfolioTreeReport 
	accounts do: [:anAccount | anAccount buildName: aPortfolioTreeReport ].! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:45:01'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:45:06'!
buildName: aPortfolioTreeReport 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:45:16' prior: 50690517!
buildName: aPortfolioTreeReport 
	aPortfolioTreeReport buildNameAccount: self.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:45:19'!
ERROR!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:45:22'!
buildNameAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:45:43' prior: 50690533!
buildNameAccount: aReceptiveAccount 
	result addLast: aReceptiveAccount name.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:45:45'!
FAILURE!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'camila 10/26/2023 14:46:26'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'account result level'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'result' stamp: 'camila 10/26/2023 14:46:25' prior: 50690455!
buildResult
	level := 0.
	account buildName: self.
	
	^ result.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:46:30'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:48:06' prior: 50682961!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:48:22'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:48:22'!
FAILURE!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:49:34' prior: 50690539!
buildNameAccount: aReceptiveAccount 
	result addLast: aReceptiveAccount accountName.! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:49:37'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:49:42'!
accountName
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:49:46' prior: 50690603!
accountName
	^name! !

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:49:47'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:49:51'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 14:49:54'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:50:12' prior: 50690567!
test02PortfolioWithAccountReturnsBothNames
	
	| finalReport portfolio treeReport myAccount |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount .
	
	treeReport  := PortfolioTreeReport for: portfolio. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:51:36'!
test03PortfolioWithChildrenPortfolio
	
	| finalReport portfolioFamily treeReport myAccount portfolioChildren |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolioFamily := Portfolio named: 'Portfolio de la familia'.
	portfolioFamily add: myAccount .
	
	portfolioChildren := Portfolio named: 'Portfolio de hijos'.
	portfolioFamily add: portfolioChildren.
	
	
	treeReport  := PortfolioTreeReport for: portfolioFamily. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:51:48' prior: 50690641!
test03PortfolioWithChildrenPortfolio
	
	| finalReport portfolioFamily treeReport myAccount portfolioChildren |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolioFamily := Portfolio named: 'Portfolio de la familia'.
	portfolioFamily add: myAccount .
	
	portfolioChildren := Portfolio named: 'Portfolio de hijos'.
	portfolioFamily add: portfolioChildren.
	
	
	treeReport  := PortfolioTreeReport for: portfolioFamily. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia' with: 'Portfolio de hijos'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 14:51:52' prior: 50690663!
test03PortfolioWithChildrenPortfolio
	
	| finalReport portfolioFamily treeReport myAccount portfolioChildren |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolioFamily := Portfolio named: 'Portfolio de la familia'.
	portfolioFamily add: myAccount .
	
	portfolioChildren := Portfolio named: 'Portfolio de hijos'.
	portfolioFamily add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioFamily. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia' with: 'Portfolio de hijos'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 14:51:52'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 15:00:31'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 15:00:31'!
FAILURE!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 15:03:28' prior: 50690490!
printPortfolioName: aPortfolio 
	result addLast: aPortfolio name.
	aPortfolio printAccountNames: self.! !

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 15:03:29'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 15:03:33'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01NewPortfolioWithNameReturnsName stamp: 'camila 10/26/2023 15:03:38'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02PortfolioWithAccountReturnsBothNames stamp: 'camila 10/26/2023 15:03:38'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03PortfolioWithChildrenPortfolio stamp: 'camila 10/26/2023 15:03:38'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'camila 10/26/2023 15:04:11'!
test04PortfolioWithChildrenPortfolioWithChildrenAccounts
	
	| finalReport portfolioFamily treeReport myAccount portfolioChildren |
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	portfolioFamily := Portfolio named: 'Portfolio de la familia'.
	portfolioFamily add: myAccount .
	
	portfolioChildren := Portfolio named: 'Portfolio de hijos'.
	portfolioFamily add: portfolioChildren.
	
	treeReport  := PortfolioTreeReport for: portfolioFamily. 
	
	finalReport := OrderedCollection with: 'Portfolio de la familia' with: 'Cuenta mia' with: 'Portfolio de hijos'.
	
	self assert: (treeReport buildResult) equals: finalReport.! !

----SNAPSHOT----(26 October 2023 15:04:22) CuisUniversity-5981.image priorSource: 11221860!